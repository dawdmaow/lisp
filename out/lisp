/* Generated by the Nim Compiler v2.2.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI553657040 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553657039 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI520094029 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI134217753 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553648183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553649984 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648184 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553648185 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553650670 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI687866165 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI553654761 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648178 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI553648863 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI553648414 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217747 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554444 = {size: 0,kind: 44,base: null,node: null,finalizer: null};
var NTI1006633308 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217746 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553648249 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648238 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648237 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648236 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648235 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI553648232 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648229 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI553648221 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554445 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI553648175 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI553648168 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1006632963 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI553648205 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI553648202 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648199 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI553648190 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI553648177 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI553654345 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553648176 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI553654382 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI553648169 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI553648191 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI553648173 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI134217750 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553648138 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554448 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI738198881 = {size: 0, kind: 19, base: null, node: null, finalizer: null};
var NTI1426064267 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI553659835 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553658980 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI553659815 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553658979 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1459618074 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI553659774 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553659648 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553659646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553659641 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073504 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI553659644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073655 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073534 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI553659642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI553659640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI905969744 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI905969751 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063398 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063397 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1426063389 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063388 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1459617894 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1459617893 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1459617892 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1459617891 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1459617890 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1459617889 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1459617884 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1426063370 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063380 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063369 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063379 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063367 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1426063368 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063378 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1426063377 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073565 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073564 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073563 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073562 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073561 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073560 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073559 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073558 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073557 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073556 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073555 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073554 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073553 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073552 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073551 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073550 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073549 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073548 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073547 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073546 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073545 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073544 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073543 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073542 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073541 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073614 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073502 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073661 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073658 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1124073657 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1124073537 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073660 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1124073538 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073607 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073496 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073596 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073497 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073595 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073594 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073613 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073501 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073593 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073592 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073609 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073498 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073591 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073599 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073610 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073499 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073598 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073612 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073611 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073500 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI1124073583 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073486 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073597 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073490 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073590 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073489 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1124073487 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1124073589 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073588 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073587 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1124073586 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1124073488 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1526726709 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1526726708 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1459617896 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1459617895 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1459617800 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1459617885 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1459617881 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1459617888 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1459617887 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1459617795 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1459617886 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1459617883 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1426063376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1426063375 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063373 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI553659611 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217749 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555172 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555836 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555175 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555174 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555171 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555167 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1426064194 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1426064193 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI553659579 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI553659579 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "renderer0", len: 0, typ: NTI1426064193, name: "renderer0", sons: null}, 
{kind: 1, offset: "clientPostRenderCallback1", len: 0, typ: NTI1426064194, name: "clientPostRenderCallback1", sons: null}]};
NTI553659579.node = NNI553659579;
var NNI33555167 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555167.node = NNI33555167;
NTI553659579.base = NTI33555167;
NTI33555174.base = NTI33555171;
NTI33555175.base = NTI33555171;
var NNI33555171 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555174, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555175, name: "up", sons: null}]};
NTI33555171.node = NNI33555171;
NTI33555171.base = NTI33555167;
var NNI33555836 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554450, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554450, name: "Field2", sons: null}]};
NTI33555836.node = NNI33555836;
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555172 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555172.node = NNI33555172;
NTI33555172.base = NTI33555171;
NTI134217741.base = NTI33555172;
NTI134217743.base = NTI134217741;
var NNI134217751 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555172;
var NNI134217749 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555172;
var NNI1459617795 = {kind: 2, offset: 0, typ: null, name: null, len: 213, sons: {"0": {kind: 1, offset: 0, typ: NTI1459617795, name: "#text", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1459617795, name: "#int", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1459617795, name: "#bool", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1459617795, name: "#vthunk", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1459617795, name: "#dthunk", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1459617795, name: "#component", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1459617795, name: "#verbatim", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1459617795, name: "html", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1459617795, name: "head", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1459617795, name: "title", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1459617795, name: "base", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1459617795, name: "link", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI1459617795, name: "meta", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI1459617795, name: "style", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI1459617795, name: "script", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI1459617795, name: "noscript", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI1459617795, name: "body", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI1459617795, name: "section", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI1459617795, name: "nav", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI1459617795, name: "article", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI1459617795, name: "aside", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI1459617795, name: "h1", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI1459617795, name: "h2", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI1459617795, name: "h3", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI1459617795, name: "h4", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI1459617795, name: "h5", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI1459617795, name: "h6", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI1459617795, name: "hgroup", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI1459617795, name: "header", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI1459617795, name: "footer", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI1459617795, name: "address", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI1459617795, name: "main", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI1459617795, name: "p", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI1459617795, name: "hr", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI1459617795, name: "pre", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI1459617795, name: "blockquote", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI1459617795, name: "ol", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI1459617795, name: "ul", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI1459617795, name: "li", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI1459617795, name: "dl", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI1459617795, name: "dt", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI1459617795, name: "dd", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI1459617795, name: "figure", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI1459617795, name: "figcaption", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI1459617795, name: "div", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI1459617795, name: "a", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI1459617795, name: "em", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI1459617795, name: "strong", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI1459617795, name: "small", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI1459617795, name: "s", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI1459617795, name: "cite", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI1459617795, name: "quote", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI1459617795, name: "dfn", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI1459617795, name: "abbr", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI1459617795, name: "data", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI1459617795, name: "time", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI1459617795, name: "code", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI1459617795, name: "var", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI1459617795, name: "samp", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI1459617795, name: "kbd", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI1459617795, name: "sub", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI1459617795, name: "sup", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI1459617795, name: "i", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI1459617795, name: "b", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI1459617795, name: "u", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI1459617795, name: "mark", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI1459617795, name: "ruby", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI1459617795, name: "rt", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI1459617795, name: "rp", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI1459617795, name: "bdi", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI1459617795, name: "dbo", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI1459617795, name: "span", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI1459617795, name: "br", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI1459617795, name: "wbr", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI1459617795, name: "ins", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI1459617795, name: "del", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI1459617795, name: "img", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI1459617795, name: "iframe", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI1459617795, name: "embed", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI1459617795, name: "object", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI1459617795, name: "param", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI1459617795, name: "video", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI1459617795, name: "audio", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI1459617795, name: "source", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI1459617795, name: "track", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI1459617795, name: "canvas", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI1459617795, name: "map", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI1459617795, name: "area", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI1459617795, name: "animate", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI1459617795, name: "animateMotion", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI1459617795, name: "animateTransform", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI1459617795, name: "circle", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI1459617795, name: "clipPath", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI1459617795, name: "defs", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI1459617795, name: "desc", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI1459617795, name: "discard", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI1459617795, name: "ellipse", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI1459617795, name: "feBlend", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI1459617795, name: "feColorMatrix", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI1459617795, name: "feComponentTransfer", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI1459617795, name: "feComposite", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI1459617795, name: "feConvolveMatrix", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI1459617795, name: "feDiffuseLighting", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI1459617795, name: "feDisplacementMap", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI1459617795, name: "feDistantLight", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI1459617795, name: "feDropShadow", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI1459617795, name: "feFlood", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI1459617795, name: "feFuncA", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI1459617795, name: "feFuncB", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI1459617795, name: "feFuncG", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI1459617795, name: "feFuncR", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI1459617795, name: "feGaussianBlur", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI1459617795, name: "feImage", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI1459617795, name: "feMerge", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI1459617795, name: "feMergeNode", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI1459617795, name: "feMorphology", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI1459617795, name: "feOffset", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI1459617795, name: "fePointLight", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI1459617795, name: "feSpecularLighting", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI1459617795, name: "feSpotLight", len: 0, sons: null}, 
"120": {kind: 1, offset: 120, typ: NTI1459617795, name: "feTile", len: 0, sons: null}, 
"121": {kind: 1, offset: 121, typ: NTI1459617795, name: "feTurbulence", len: 0, sons: null}, 
"122": {kind: 1, offset: 122, typ: NTI1459617795, name: "filter", len: 0, sons: null}, 
"123": {kind: 1, offset: 123, typ: NTI1459617795, name: "foreignObject", len: 0, sons: null}, 
"124": {kind: 1, offset: 124, typ: NTI1459617795, name: "g", len: 0, sons: null}, 
"125": {kind: 1, offset: 125, typ: NTI1459617795, name: "image", len: 0, sons: null}, 
"126": {kind: 1, offset: 126, typ: NTI1459617795, name: "line", len: 0, sons: null}, 
"127": {kind: 1, offset: 127, typ: NTI1459617795, name: "linearGradient", len: 0, sons: null}, 
"128": {kind: 1, offset: 128, typ: NTI1459617795, name: "marker", len: 0, sons: null}, 
"129": {kind: 1, offset: 129, typ: NTI1459617795, name: "mask", len: 0, sons: null}, 
"130": {kind: 1, offset: 130, typ: NTI1459617795, name: "metadata", len: 0, sons: null}, 
"131": {kind: 1, offset: 131, typ: NTI1459617795, name: "mpath", len: 0, sons: null}, 
"132": {kind: 1, offset: 132, typ: NTI1459617795, name: "path", len: 0, sons: null}, 
"133": {kind: 1, offset: 133, typ: NTI1459617795, name: "pattern", len: 0, sons: null}, 
"134": {kind: 1, offset: 134, typ: NTI1459617795, name: "polygon", len: 0, sons: null}, 
"135": {kind: 1, offset: 135, typ: NTI1459617795, name: "polyline", len: 0, sons: null}, 
"136": {kind: 1, offset: 136, typ: NTI1459617795, name: "radialGradient", len: 0, sons: null}, 
"137": {kind: 1, offset: 137, typ: NTI1459617795, name: "rect", len: 0, sons: null}, 
"138": {kind: 1, offset: 138, typ: NTI1459617795, name: "set", len: 0, sons: null}, 
"139": {kind: 1, offset: 139, typ: NTI1459617795, name: "stop", len: 0, sons: null}, 
"140": {kind: 1, offset: 140, typ: NTI1459617795, name: "svg", len: 0, sons: null}, 
"141": {kind: 1, offset: 141, typ: NTI1459617795, name: "switch", len: 0, sons: null}, 
"142": {kind: 1, offset: 142, typ: NTI1459617795, name: "symbol", len: 0, sons: null}, 
"143": {kind: 1, offset: 143, typ: NTI1459617795, name: "text", len: 0, sons: null}, 
"144": {kind: 1, offset: 144, typ: NTI1459617795, name: "textPath", len: 0, sons: null}, 
"145": {kind: 1, offset: 145, typ: NTI1459617795, name: "tspan", len: 0, sons: null}, 
"146": {kind: 1, offset: 146, typ: NTI1459617795, name: "unknown", len: 0, sons: null}, 
"147": {kind: 1, offset: 147, typ: NTI1459617795, name: "use", len: 0, sons: null}, 
"148": {kind: 1, offset: 148, typ: NTI1459617795, name: "view", len: 0, sons: null}, 
"149": {kind: 1, offset: 149, typ: NTI1459617795, name: "maction", len: 0, sons: null}, 
"150": {kind: 1, offset: 150, typ: NTI1459617795, name: "math", len: 0, sons: null}, 
"151": {kind: 1, offset: 151, typ: NTI1459617795, name: "menclose", len: 0, sons: null}, 
"152": {kind: 1, offset: 152, typ: NTI1459617795, name: "merror", len: 0, sons: null}, 
"153": {kind: 1, offset: 153, typ: NTI1459617795, name: "mfenced", len: 0, sons: null}, 
"154": {kind: 1, offset: 154, typ: NTI1459617795, name: "mfrac", len: 0, sons: null}, 
"155": {kind: 1, offset: 155, typ: NTI1459617795, name: "mglyph", len: 0, sons: null}, 
"156": {kind: 1, offset: 156, typ: NTI1459617795, name: "mi", len: 0, sons: null}, 
"157": {kind: 1, offset: 157, typ: NTI1459617795, name: "mlabeledtr", len: 0, sons: null}, 
"158": {kind: 1, offset: 158, typ: NTI1459617795, name: "mmultiscripts", len: 0, sons: null}, 
"159": {kind: 1, offset: 159, typ: NTI1459617795, name: "mn", len: 0, sons: null}, 
"160": {kind: 1, offset: 160, typ: NTI1459617795, name: "mo", len: 0, sons: null}, 
"161": {kind: 1, offset: 161, typ: NTI1459617795, name: "mover", len: 0, sons: null}, 
"162": {kind: 1, offset: 162, typ: NTI1459617795, name: "mpadded", len: 0, sons: null}, 
"163": {kind: 1, offset: 163, typ: NTI1459617795, name: "mphantom", len: 0, sons: null}, 
"164": {kind: 1, offset: 164, typ: NTI1459617795, name: "mroot", len: 0, sons: null}, 
"165": {kind: 1, offset: 165, typ: NTI1459617795, name: "mrow", len: 0, sons: null}, 
"166": {kind: 1, offset: 166, typ: NTI1459617795, name: "ms", len: 0, sons: null}, 
"167": {kind: 1, offset: 167, typ: NTI1459617795, name: "mspace", len: 0, sons: null}, 
"168": {kind: 1, offset: 168, typ: NTI1459617795, name: "msqrt", len: 0, sons: null}, 
"169": {kind: 1, offset: 169, typ: NTI1459617795, name: "mstyle", len: 0, sons: null}, 
"170": {kind: 1, offset: 170, typ: NTI1459617795, name: "msub", len: 0, sons: null}, 
"171": {kind: 1, offset: 171, typ: NTI1459617795, name: "msubsup", len: 0, sons: null}, 
"172": {kind: 1, offset: 172, typ: NTI1459617795, name: "msup", len: 0, sons: null}, 
"173": {kind: 1, offset: 173, typ: NTI1459617795, name: "mtable", len: 0, sons: null}, 
"174": {kind: 1, offset: 174, typ: NTI1459617795, name: "mtd", len: 0, sons: null}, 
"175": {kind: 1, offset: 175, typ: NTI1459617795, name: "mtext", len: 0, sons: null}, 
"176": {kind: 1, offset: 176, typ: NTI1459617795, name: "mtr", len: 0, sons: null}, 
"177": {kind: 1, offset: 177, typ: NTI1459617795, name: "munder", len: 0, sons: null}, 
"178": {kind: 1, offset: 178, typ: NTI1459617795, name: "munderover", len: 0, sons: null}, 
"179": {kind: 1, offset: 179, typ: NTI1459617795, name: "semantics", len: 0, sons: null}, 
"180": {kind: 1, offset: 180, typ: NTI1459617795, name: "table", len: 0, sons: null}, 
"181": {kind: 1, offset: 181, typ: NTI1459617795, name: "caption", len: 0, sons: null}, 
"182": {kind: 1, offset: 182, typ: NTI1459617795, name: "colgroup", len: 0, sons: null}, 
"183": {kind: 1, offset: 183, typ: NTI1459617795, name: "col", len: 0, sons: null}, 
"184": {kind: 1, offset: 184, typ: NTI1459617795, name: "tbody", len: 0, sons: null}, 
"185": {kind: 1, offset: 185, typ: NTI1459617795, name: "thead", len: 0, sons: null}, 
"186": {kind: 1, offset: 186, typ: NTI1459617795, name: "tfoot", len: 0, sons: null}, 
"187": {kind: 1, offset: 187, typ: NTI1459617795, name: "tr", len: 0, sons: null}, 
"188": {kind: 1, offset: 188, typ: NTI1459617795, name: "td", len: 0, sons: null}, 
"189": {kind: 1, offset: 189, typ: NTI1459617795, name: "th", len: 0, sons: null}, 
"190": {kind: 1, offset: 190, typ: NTI1459617795, name: "form", len: 0, sons: null}, 
"191": {kind: 1, offset: 191, typ: NTI1459617795, name: "fieldset", len: 0, sons: null}, 
"192": {kind: 1, offset: 192, typ: NTI1459617795, name: "legend", len: 0, sons: null}, 
"193": {kind: 1, offset: 193, typ: NTI1459617795, name: "label", len: 0, sons: null}, 
"194": {kind: 1, offset: 194, typ: NTI1459617795, name: "input", len: 0, sons: null}, 
"195": {kind: 1, offset: 195, typ: NTI1459617795, name: "button", len: 0, sons: null}, 
"196": {kind: 1, offset: 196, typ: NTI1459617795, name: "select", len: 0, sons: null}, 
"197": {kind: 1, offset: 197, typ: NTI1459617795, name: "datalist", len: 0, sons: null}, 
"198": {kind: 1, offset: 198, typ: NTI1459617795, name: "optgroup", len: 0, sons: null}, 
"199": {kind: 1, offset: 199, typ: NTI1459617795, name: "option", len: 0, sons: null}, 
"200": {kind: 1, offset: 200, typ: NTI1459617795, name: "textarea", len: 0, sons: null}, 
"201": {kind: 1, offset: 201, typ: NTI1459617795, name: "keygen", len: 0, sons: null}, 
"202": {kind: 1, offset: 202, typ: NTI1459617795, name: "output", len: 0, sons: null}, 
"203": {kind: 1, offset: 203, typ: NTI1459617795, name: "progress", len: 0, sons: null}, 
"204": {kind: 1, offset: 204, typ: NTI1459617795, name: "meter", len: 0, sons: null}, 
"205": {kind: 1, offset: 205, typ: NTI1459617795, name: "details", len: 0, sons: null}, 
"206": {kind: 1, offset: 206, typ: NTI1459617795, name: "summary", len: 0, sons: null}, 
"207": {kind: 1, offset: 207, typ: NTI1459617795, name: "command", len: 0, sons: null}, 
"208": {kind: 1, offset: 208, typ: NTI1459617795, name: "menu", len: 0, sons: null}, 
"209": {kind: 1, offset: 209, typ: NTI1459617795, name: "bdo", len: 0, sons: null}, 
"210": {kind: 1, offset: 210, typ: NTI1459617795, name: "dialog", len: 0, sons: null}, 
"211": {kind: 1, offset: 211, typ: NTI1459617795, name: "slot", len: 0, sons: null}, 
"212": {kind: 1, offset: 212, typ: NTI1459617795, name: "template", len: 0, sons: null}}};
NTI1459617795.node = NNI1459617795;
NTI1459617887.base = NTI1459617883;
NTI1459617888.base = NTI33554450;
var NNI1459617800 = {kind: 2, offset: 0, typ: null, name: null, len: 37, sons: {"0": {kind: 1, offset: 0, typ: NTI1459617800, name: "onclick", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1459617800, name: "oncontextmenu", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1459617800, name: "ondblclick", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1459617800, name: "onkeyup", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1459617800, name: "onkeydown", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1459617800, name: "onkeypressed", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1459617800, name: "onfocus", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1459617800, name: "onblur", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1459617800, name: "onchange", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1459617800, name: "onscroll", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1459617800, name: "onmousedown", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1459617800, name: "onmouseenter", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI1459617800, name: "onmouseleave", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI1459617800, name: "onmousemove", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI1459617800, name: "onmouseout", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI1459617800, name: "onmouseover", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI1459617800, name: "onmouseup", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI1459617800, name: "ondrag", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI1459617800, name: "ondragend", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI1459617800, name: "ondragenter", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI1459617800, name: "ondragleave", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI1459617800, name: "ondragover", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI1459617800, name: "ondragstart", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI1459617800, name: "ondrop", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI1459617800, name: "onsubmit", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI1459617800, name: "oninput", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI1459617800, name: "onanimationstart", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI1459617800, name: "onanimationend", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI1459617800, name: "onanimationiteration", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI1459617800, name: "onkeyupenter", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI1459617800, name: "onkeyuplater", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI1459617800, name: "onload", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI1459617800, name: "ontransitioncancel", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI1459617800, name: "ontransitionend", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI1459617800, name: "ontransitionrun", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI1459617800, name: "ontransitionstart", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI1459617800, name: "onwheel", len: 0, sons: null}}};
NTI1459617800.node = NNI1459617800;
var NNI1459617885 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1459617800, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1459617895, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1459617896, name: "Field2", sons: null}]};
NTI1459617885.node = NNI1459617885;
NTI1459617881.base = NTI1459617885;
var NNI1526726709 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1526726709.node = NNI1526726709;
NTI1526726708.base = NTI1526726709;
NTI1124073587.base = NTI1124073488;
NTI1124073588.base = NTI1124073488;
NTI1124073589.base = NTI1124073488;
var NNI1124073487 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI1124073487, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1124073487, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1124073487, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1124073487, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1124073487, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1124073487, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1124073487, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1124073487, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1124073487, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1124073487, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1124073487, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI1124073487, name: "NotationNode", len: 0, sons: null}}};
NTI1124073487.node = NNI1124073487;
var NNI1124073583 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1124073583.node = NNI1124073583;
NTI1124073583.base = NTI33555167;
NTI1124073486.base = NTI1124073583;
NTI1124073612.base = NTI1124073490;
var NNI1124073611 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI33554450, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI33554450, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI33554450, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI1124073612, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI33554450, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI33554450, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI33554435, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI33554450, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI33554466, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI33554450, name: "target", sons: null}]};
NTI1124073611.node = NNI1124073611;
NTI1124073611.base = NTI1124073597;
NTI1124073500.base = NTI1124073611;
var NNI1124073610 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI33554466, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI33554466, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI33554435, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI33554450, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI33554450, name: "value", sons: null}]};
NTI1124073610.node = NNI1124073610;
NTI1124073610.base = NTI1124073597;
NTI1124073499.base = NTI1124073610;
NTI1124073598.base = NTI1124073499;
NTI1124073599.base = NTI1124073499;
var NNI1124073597 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "className", len: 0, typ: NTI33554450, name: "className", sons: null}, 
{kind: 1, offset: "classList", len: 0, typ: NTI1124073486, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI33554466, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI33554466, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI33554450, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI33554466, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI1124073500, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI33554466, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI1124073598, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI1124073599, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI33554435, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI33554435, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI33554450, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI33554466, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI33554450, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI33554435, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI33554435, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI33554435, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI33554435, name: "offsetTop", sons: null}]};
NTI1124073597.node = NNI1124073597;
NTI1124073597.base = NTI1124073586;
NTI1124073490.base = NTI1124073597;
var NNI1124073609 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI33554450, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI33554435, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI33554435, name: "y", sons: null}]};
NTI1124073609.node = NNI1124073609;
NTI1124073609.base = NTI1124073597;
NTI1124073498.base = NTI1124073609;
NTI1124073591.base = NTI1124073498;
NTI1124073592.base = NTI1124073500;
var NNI1124073613 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI33554435, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI33554466, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI33554435, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI33554435, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI33554450, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI33554450, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI33554435, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI33554435, name: "width", sons: null}]};
NTI1124073613.node = NNI1124073613;
NTI1124073613.base = NTI1124073597;
NTI1124073501.base = NTI1124073613;
NTI1124073593.base = NTI1124073501;
NTI1124073594.base = NTI1124073490;
var NNI1124073608 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI33554435, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI33554435, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI33554450, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI33554435, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI33554450, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI33554435, name: "vspace", sons: null}]};
NTI1124073608.node = NNI1124073608;
NTI1124073608.base = NTI1124073597;
NTI1124073497.base = NTI1124073608;
NTI1124073595.base = NTI1124073497;
var NNI1124073607 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI33554450, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI33554450, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI33554435, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI33554435, name: "y", sons: null}]};
NTI1124073607.node = NNI1124073607;
NTI1124073607.base = NTI1124073597;
NTI1124073496.base = NTI1124073607;
NTI1124073596.base = NTI1124073496;
var NNI1124073657 = {kind: 1, offset: "then", len: 0, typ: NTI1124073658, name: "then", sons: null};
NTI1124073657.node = NNI1124073657;
NTI1124073537.base = NTI1124073657;
var NNI1124073660 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ready", len: 0, typ: NTI1124073537, name: "ready", sons: null}, 
{kind: 1, offset: "onloadingdone", len: 0, typ: NTI1124073661, name: "onloadingdone", sons: null}]};
NTI1124073660.node = NNI1124073660;
NTI1124073538.base = NTI1124073660;
var NNI1124073590 = {kind: 2, len: 25, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI1124073490, name: "activeElement", sons: null}, 
{kind: 1, offset: "documentElement", len: 0, typ: NTI1124073490, name: "documentElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI33554450, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI33554450, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI1124073490, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI33554450, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI33554450, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI33554450, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI33554450, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI1124073490, name: "head", sons: null}, 
{kind: 1, offset: "hidden", len: 0, typ: NTI33554466, name: "hidden", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI33554450, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI33554450, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI33554450, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI33554450, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI33554450, name: "URL", sons: null}, 
{kind: 1, offset: "visibilityState", len: 0, typ: NTI33554450, name: "visibilityState", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI33554450, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI1124073591, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI1124073592, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI1124073593, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI1124073594, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI1124073595, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI1124073596, name: "links", sons: null}, 
{kind: 1, offset: "fonts", len: 0, typ: NTI1124073538, name: "fonts", sons: null}]};
NTI1124073590.node = NNI1124073590;
NTI1124073590.base = NTI1124073586;
NTI1124073489.base = NTI1124073590;
var NNI1124073614 = {kind: 2, len: 368, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "alignContent", len: 0, typ: NTI33554450, name: "alignContent", sons: null}, 
{kind: 1, offset: "alignItems", len: 0, typ: NTI33554450, name: "alignItems", sons: null}, 
{kind: 1, offset: "alignSelf", len: 0, typ: NTI33554450, name: "alignSelf", sons: null}, 
{kind: 1, offset: "all", len: 0, typ: NTI33554450, name: "all", sons: null}, 
{kind: 1, offset: "animation", len: 0, typ: NTI33554450, name: "animation", sons: null}, 
{kind: 1, offset: "animationDelay", len: 0, typ: NTI33554450, name: "animationDelay", sons: null}, 
{kind: 1, offset: "animationDirection", len: 0, typ: NTI33554450, name: "animationDirection", sons: null}, 
{kind: 1, offset: "animationDuration", len: 0, typ: NTI33554450, name: "animationDuration", sons: null}, 
{kind: 1, offset: "animationFillMode", len: 0, typ: NTI33554450, name: "animationFillMode", sons: null}, 
{kind: 1, offset: "animationIterationCount", len: 0, typ: NTI33554450, name: "animationIterationCount", sons: null}, 
{kind: 1, offset: "animationName", len: 0, typ: NTI33554450, name: "animationName", sons: null}, 
{kind: 1, offset: "animationPlayState", len: 0, typ: NTI33554450, name: "animationPlayState", sons: null}, 
{kind: 1, offset: "animationTimingFunction", len: 0, typ: NTI33554450, name: "animationTimingFunction", sons: null}, 
{kind: 1, offset: "backdropFilter", len: 0, typ: NTI33554450, name: "backdropFilter", sons: null}, 
{kind: 1, offset: "backfaceVisibility", len: 0, typ: NTI33554450, name: "backfaceVisibility", sons: null}, 
{kind: 1, offset: "background", len: 0, typ: NTI33554450, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI33554450, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundBlendMode", len: 0, typ: NTI33554450, name: "backgroundBlendMode", sons: null}, 
{kind: 1, offset: "backgroundClip", len: 0, typ: NTI33554450, name: "backgroundClip", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI33554450, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI33554450, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundOrigin", len: 0, typ: NTI33554450, name: "backgroundOrigin", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI33554450, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI33554450, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI33554450, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "blockSize", len: 0, typ: NTI33554450, name: "blockSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI33554450, name: "border", sons: null}, 
{kind: 1, offset: "borderBlock", len: 0, typ: NTI33554450, name: "borderBlock", sons: null}, 
{kind: 1, offset: "borderBlockColor", len: 0, typ: NTI33554450, name: "borderBlockColor", sons: null}, 
{kind: 1, offset: "borderBlockEnd", len: 0, typ: NTI33554450, name: "borderBlockEnd", sons: null}, 
{kind: 1, offset: "borderBlockEndColor", len: 0, typ: NTI33554450, name: "borderBlockEndColor", sons: null}, 
{kind: 1, offset: "borderBlockEndStyle", len: 0, typ: NTI33554450, name: "borderBlockEndStyle", sons: null}, 
{kind: 1, offset: "borderBlockEndWidth", len: 0, typ: NTI33554450, name: "borderBlockEndWidth", sons: null}, 
{kind: 1, offset: "borderBlockStart", len: 0, typ: NTI33554450, name: "borderBlockStart", sons: null}, 
{kind: 1, offset: "borderBlockStartColor", len: 0, typ: NTI33554450, name: "borderBlockStartColor", sons: null}, 
{kind: 1, offset: "borderBlockStartStyle", len: 0, typ: NTI33554450, name: "borderBlockStartStyle", sons: null}, 
{kind: 1, offset: "borderBlockStartWidth", len: 0, typ: NTI33554450, name: "borderBlockStartWidth", sons: null}, 
{kind: 1, offset: "borderBlockStyle", len: 0, typ: NTI33554450, name: "borderBlockStyle", sons: null}, 
{kind: 1, offset: "borderBlockWidth", len: 0, typ: NTI33554450, name: "borderBlockWidth", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI33554450, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI33554450, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomLeftRadius", len: 0, typ: NTI33554450, name: "borderBottomLeftRadius", sons: null}, 
{kind: 1, offset: "borderBottomRightRadius", len: 0, typ: NTI33554450, name: "borderBottomRightRadius", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI33554450, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI33554450, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderCollapse", len: 0, typ: NTI33554450, name: "borderCollapse", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI33554450, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderEndEndRadius", len: 0, typ: NTI33554450, name: "borderEndEndRadius", sons: null}, 
{kind: 1, offset: "borderEndStartRadius", len: 0, typ: NTI33554450, name: "borderEndStartRadius", sons: null}, 
{kind: 1, offset: "borderImage", len: 0, typ: NTI33554450, name: "borderImage", sons: null}, 
{kind: 1, offset: "borderImageOutset", len: 0, typ: NTI33554450, name: "borderImageOutset", sons: null}, 
{kind: 1, offset: "borderImageRepeat", len: 0, typ: NTI33554450, name: "borderImageRepeat", sons: null}, 
{kind: 1, offset: "borderImageSlice", len: 0, typ: NTI33554450, name: "borderImageSlice", sons: null}, 
{kind: 1, offset: "borderImageSource", len: 0, typ: NTI33554450, name: "borderImageSource", sons: null}, 
{kind: 1, offset: "borderImageWidth", len: 0, typ: NTI33554450, name: "borderImageWidth", sons: null}, 
{kind: 1, offset: "borderInline", len: 0, typ: NTI33554450, name: "borderInline", sons: null}, 
{kind: 1, offset: "borderInlineColor", len: 0, typ: NTI33554450, name: "borderInlineColor", sons: null}, 
{kind: 1, offset: "borderInlineEnd", len: 0, typ: NTI33554450, name: "borderInlineEnd", sons: null}, 
{kind: 1, offset: "borderInlineEndColor", len: 0, typ: NTI33554450, name: "borderInlineEndColor", sons: null}, 
{kind: 1, offset: "borderInlineEndStyle", len: 0, typ: NTI33554450, name: "borderInlineEndStyle", sons: null}, 
{kind: 1, offset: "borderInlineEndWidth", len: 0, typ: NTI33554450, name: "borderInlineEndWidth", sons: null}, 
{kind: 1, offset: "borderInlineStart", len: 0, typ: NTI33554450, name: "borderInlineStart", sons: null}, 
{kind: 1, offset: "borderInlineStartColor", len: 0, typ: NTI33554450, name: "borderInlineStartColor", sons: null}, 
{kind: 1, offset: "borderInlineStartStyle", len: 0, typ: NTI33554450, name: "borderInlineStartStyle", sons: null}, 
{kind: 1, offset: "borderInlineStartWidth", len: 0, typ: NTI33554450, name: "borderInlineStartWidth", sons: null}, 
{kind: 1, offset: "borderInlineStyle", len: 0, typ: NTI33554450, name: "borderInlineStyle", sons: null}, 
{kind: 1, offset: "borderInlineWidth", len: 0, typ: NTI33554450, name: "borderInlineWidth", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI33554450, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI33554450, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI33554450, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI33554450, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI33554450, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI33554450, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI33554450, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI33554450, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI33554450, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderSpacing", len: 0, typ: NTI33554450, name: "borderSpacing", sons: null}, 
{kind: 1, offset: "borderStartEndRadius", len: 0, typ: NTI33554450, name: "borderStartEndRadius", sons: null}, 
{kind: 1, offset: "borderStartStartRadius", len: 0, typ: NTI33554450, name: "borderStartStartRadius", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI33554450, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI33554450, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI33554450, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopLeftRadius", len: 0, typ: NTI33554450, name: "borderTopLeftRadius", sons: null}, 
{kind: 1, offset: "borderTopRightRadius", len: 0, typ: NTI33554450, name: "borderTopRightRadius", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI33554450, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI33554450, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI33554450, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI33554450, name: "bottom", sons: null}, 
{kind: 1, offset: "boxDecorationBreak", len: 0, typ: NTI33554450, name: "boxDecorationBreak", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI33554450, name: "boxShadow", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI33554450, name: "boxSizing", sons: null}, 
{kind: 1, offset: "breakAfter", len: 0, typ: NTI33554450, name: "breakAfter", sons: null}, 
{kind: 1, offset: "breakBefore", len: 0, typ: NTI33554450, name: "breakBefore", sons: null}, 
{kind: 1, offset: "breakInside", len: 0, typ: NTI33554450, name: "breakInside", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI33554450, name: "captionSide", sons: null}, 
{kind: 1, offset: "caretColor", len: 0, typ: NTI33554450, name: "caretColor", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI33554450, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI33554450, name: "clip", sons: null}, 
{kind: 1, offset: "clipPath", len: 0, typ: NTI33554450, name: "clipPath", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI33554450, name: "color", sons: null}, 
{kind: 1, offset: "colorAdjust", len: 0, typ: NTI33554450, name: "colorAdjust", sons: null}, 
{kind: 1, offset: "columnCount", len: 0, typ: NTI33554450, name: "columnCount", sons: null}, 
{kind: 1, offset: "columnFill", len: 0, typ: NTI33554450, name: "columnFill", sons: null}, 
{kind: 1, offset: "columnGap", len: 0, typ: NTI33554450, name: "columnGap", sons: null}, 
{kind: 1, offset: "columnRule", len: 0, typ: NTI33554450, name: "columnRule", sons: null}, 
{kind: 1, offset: "columnRuleColor", len: 0, typ: NTI33554450, name: "columnRuleColor", sons: null}, 
{kind: 1, offset: "columnRuleStyle", len: 0, typ: NTI33554450, name: "columnRuleStyle", sons: null}, 
{kind: 1, offset: "columnRuleWidth", len: 0, typ: NTI33554450, name: "columnRuleWidth", sons: null}, 
{kind: 1, offset: "columnSpan", len: 0, typ: NTI33554450, name: "columnSpan", sons: null}, 
{kind: 1, offset: "columnWidth", len: 0, typ: NTI33554450, name: "columnWidth", sons: null}, 
{kind: 1, offset: "columns", len: 0, typ: NTI33554450, name: "columns", sons: null}, 
{kind: 1, offset: "contain", len: 0, typ: NTI33554450, name: "contain", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI33554450, name: "content", sons: null}, 
{kind: 1, offset: "counterIncrement", len: 0, typ: NTI33554450, name: "counterIncrement", sons: null}, 
{kind: 1, offset: "counterReset", len: 0, typ: NTI33554450, name: "counterReset", sons: null}, 
{kind: 1, offset: "counterSet", len: 0, typ: NTI33554450, name: "counterSet", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI33554450, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI33554450, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI33554450, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI33554450, name: "emptyCells", sons: null}, 
{kind: 1, offset: "filter", len: 0, typ: NTI33554450, name: "filter", sons: null}, 
{kind: 1, offset: "flex", len: 0, typ: NTI33554450, name: "flex", sons: null}, 
{kind: 1, offset: "flexBasis", len: 0, typ: NTI33554450, name: "flexBasis", sons: null}, 
{kind: 1, offset: "flexDirection", len: 0, typ: NTI33554450, name: "flexDirection", sons: null}, 
{kind: 1, offset: "flexFlow", len: 0, typ: NTI33554450, name: "flexFlow", sons: null}, 
{kind: 1, offset: "flexGrow", len: 0, typ: NTI33554450, name: "flexGrow", sons: null}, 
{kind: 1, offset: "flexShrink", len: 0, typ: NTI33554450, name: "flexShrink", sons: null}, 
{kind: 1, offset: "flexWrap", len: 0, typ: NTI33554450, name: "flexWrap", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI33554450, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI33554450, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI33554450, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontFeatureSettings", len: 0, typ: NTI33554450, name: "fontFeatureSettings", sons: null}, 
{kind: 1, offset: "fontKerning", len: 0, typ: NTI33554450, name: "fontKerning", sons: null}, 
{kind: 1, offset: "fontLanguageOverride", len: 0, typ: NTI33554450, name: "fontLanguageOverride", sons: null}, 
{kind: 1, offset: "fontOpticalSizing", len: 0, typ: NTI33554450, name: "fontOpticalSizing", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI33554450, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontSizeAdjust", len: 0, typ: NTI33554450, name: "fontSizeAdjust", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI33554450, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI33554450, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontSynthesis", len: 0, typ: NTI33554450, name: "fontSynthesis", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI33554450, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontVariantAlternates", len: 0, typ: NTI33554450, name: "fontVariantAlternates", sons: null}, 
{kind: 1, offset: "fontVariantCaps", len: 0, typ: NTI33554450, name: "fontVariantCaps", sons: null}, 
{kind: 1, offset: "fontVariantEastAsian", len: 0, typ: NTI33554450, name: "fontVariantEastAsian", sons: null}, 
{kind: 1, offset: "fontVariantLigatures", len: 0, typ: NTI33554450, name: "fontVariantLigatures", sons: null}, 
{kind: 1, offset: "fontVariantNumeric", len: 0, typ: NTI33554450, name: "fontVariantNumeric", sons: null}, 
{kind: 1, offset: "fontVariantPosition", len: 0, typ: NTI33554450, name: "fontVariantPosition", sons: null}, 
{kind: 1, offset: "fontVariationSettings", len: 0, typ: NTI33554450, name: "fontVariationSettings", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI33554450, name: "fontWeight", sons: null}, 
{kind: 1, offset: "gap", len: 0, typ: NTI33554450, name: "gap", sons: null}, 
{kind: 1, offset: "grid", len: 0, typ: NTI33554450, name: "grid", sons: null}, 
{kind: 1, offset: "gridArea", len: 0, typ: NTI33554450, name: "gridArea", sons: null}, 
{kind: 1, offset: "gridAutoColumns", len: 0, typ: NTI33554450, name: "gridAutoColumns", sons: null}, 
{kind: 1, offset: "gridAutoFlow", len: 0, typ: NTI33554450, name: "gridAutoFlow", sons: null}, 
{kind: 1, offset: "gridAutoRows", len: 0, typ: NTI33554450, name: "gridAutoRows", sons: null}, 
{kind: 1, offset: "gridColumn", len: 0, typ: NTI33554450, name: "gridColumn", sons: null}, 
{kind: 1, offset: "gridColumnEnd", len: 0, typ: NTI33554450, name: "gridColumnEnd", sons: null}, 
{kind: 1, offset: "gridColumnStart", len: 0, typ: NTI33554450, name: "gridColumnStart", sons: null}, 
{kind: 1, offset: "gridRow", len: 0, typ: NTI33554450, name: "gridRow", sons: null}, 
{kind: 1, offset: "gridRowEnd", len: 0, typ: NTI33554450, name: "gridRowEnd", sons: null}, 
{kind: 1, offset: "gridRowStart", len: 0, typ: NTI33554450, name: "gridRowStart", sons: null}, 
{kind: 1, offset: "gridTemplate", len: 0, typ: NTI33554450, name: "gridTemplate", sons: null}, 
{kind: 1, offset: "gridTemplateAreas", len: 0, typ: NTI33554450, name: "gridTemplateAreas", sons: null}, 
{kind: 1, offset: "gridTemplateColumns", len: 0, typ: NTI33554450, name: "gridTemplateColumns", sons: null}, 
{kind: 1, offset: "gridTemplateRows", len: 0, typ: NTI33554450, name: "gridTemplateRows", sons: null}, 
{kind: 1, offset: "hangingPunctuation", len: 0, typ: NTI33554450, name: "hangingPunctuation", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI33554450, name: "height", sons: null}, 
{kind: 1, offset: "hyphens", len: 0, typ: NTI33554450, name: "hyphens", sons: null}, 
{kind: 1, offset: "imageOrientation", len: 0, typ: NTI33554450, name: "imageOrientation", sons: null}, 
{kind: 1, offset: "imageRendering", len: 0, typ: NTI33554450, name: "imageRendering", sons: null}, 
{kind: 1, offset: "inlineSize", len: 0, typ: NTI33554450, name: "inlineSize", sons: null}, 
{kind: 1, offset: "inset", len: 0, typ: NTI33554450, name: "inset", sons: null}, 
{kind: 1, offset: "insetBlock", len: 0, typ: NTI33554450, name: "insetBlock", sons: null}, 
{kind: 1, offset: "insetBlockEnd", len: 0, typ: NTI33554450, name: "insetBlockEnd", sons: null}, 
{kind: 1, offset: "insetBlockStart", len: 0, typ: NTI33554450, name: "insetBlockStart", sons: null}, 
{kind: 1, offset: "insetInline", len: 0, typ: NTI33554450, name: "insetInline", sons: null}, 
{kind: 1, offset: "insetInlineEnd", len: 0, typ: NTI33554450, name: "insetInlineEnd", sons: null}, 
{kind: 1, offset: "insetInlineStart", len: 0, typ: NTI33554450, name: "insetInlineStart", sons: null}, 
{kind: 1, offset: "isolation", len: 0, typ: NTI33554450, name: "isolation", sons: null}, 
{kind: 1, offset: "justifyContent", len: 0, typ: NTI33554450, name: "justifyContent", sons: null}, 
{kind: 1, offset: "justifyItems", len: 0, typ: NTI33554450, name: "justifyItems", sons: null}, 
{kind: 1, offset: "justifySelf", len: 0, typ: NTI33554450, name: "justifySelf", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI33554450, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI33554450, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineBreak", len: 0, typ: NTI33554450, name: "lineBreak", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI33554450, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI33554450, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI33554450, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI33554450, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI33554450, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI33554450, name: "margin", sons: null}, 
{kind: 1, offset: "marginBlock", len: 0, typ: NTI33554450, name: "marginBlock", sons: null}, 
{kind: 1, offset: "marginBlockEnd", len: 0, typ: NTI33554450, name: "marginBlockEnd", sons: null}, 
{kind: 1, offset: "marginBlockStart", len: 0, typ: NTI33554450, name: "marginBlockStart", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI33554450, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginInline", len: 0, typ: NTI33554450, name: "marginInline", sons: null}, 
{kind: 1, offset: "marginInlineEnd", len: 0, typ: NTI33554450, name: "marginInlineEnd", sons: null}, 
{kind: 1, offset: "marginInlineStart", len: 0, typ: NTI33554450, name: "marginInlineStart", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI33554450, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI33554450, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI33554450, name: "marginTop", sons: null}, 
{kind: 1, offset: "mask", len: 0, typ: NTI33554450, name: "mask", sons: null}, 
{kind: 1, offset: "maskBorder", len: 0, typ: NTI33554450, name: "maskBorder", sons: null}, 
{kind: 1, offset: "maskBorderMode", len: 0, typ: NTI33554450, name: "maskBorderMode", sons: null}, 
{kind: 1, offset: "maskBorderOutset", len: 0, typ: NTI33554450, name: "maskBorderOutset", sons: null}, 
{kind: 1, offset: "maskBorderRepeat", len: 0, typ: NTI33554450, name: "maskBorderRepeat", sons: null}, 
{kind: 1, offset: "maskBorderSlice", len: 0, typ: NTI33554450, name: "maskBorderSlice", sons: null}, 
{kind: 1, offset: "maskBorderSource", len: 0, typ: NTI33554450, name: "maskBorderSource", sons: null}, 
{kind: 1, offset: "maskBorderWidth", len: 0, typ: NTI33554450, name: "maskBorderWidth", sons: null}, 
{kind: 1, offset: "maskClip", len: 0, typ: NTI33554450, name: "maskClip", sons: null}, 
{kind: 1, offset: "maskComposite", len: 0, typ: NTI33554450, name: "maskComposite", sons: null}, 
{kind: 1, offset: "maskImage", len: 0, typ: NTI33554450, name: "maskImage", sons: null}, 
{kind: 1, offset: "maskMode", len: 0, typ: NTI33554450, name: "maskMode", sons: null}, 
{kind: 1, offset: "maskOrigin", len: 0, typ: NTI33554450, name: "maskOrigin", sons: null}, 
{kind: 1, offset: "maskPosition", len: 0, typ: NTI33554450, name: "maskPosition", sons: null}, 
{kind: 1, offset: "maskRepeat", len: 0, typ: NTI33554450, name: "maskRepeat", sons: null}, 
{kind: 1, offset: "maskSize", len: 0, typ: NTI33554450, name: "maskSize", sons: null}, 
{kind: 1, offset: "maskType", len: 0, typ: NTI33554450, name: "maskType", sons: null}, 
{kind: 1, offset: "maxBlockSize", len: 0, typ: NTI33554450, name: "maxBlockSize", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI33554450, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxInlineSize", len: 0, typ: NTI33554450, name: "maxInlineSize", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI33554450, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minBlockSize", len: 0, typ: NTI33554450, name: "minBlockSize", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI33554450, name: "minHeight", sons: null}, 
{kind: 1, offset: "minInlineSize", len: 0, typ: NTI33554450, name: "minInlineSize", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI33554450, name: "minWidth", sons: null}, 
{kind: 1, offset: "mixBlendMode", len: 0, typ: NTI33554450, name: "mixBlendMode", sons: null}, 
{kind: 1, offset: "objectFit", len: 0, typ: NTI33554450, name: "objectFit", sons: null}, 
{kind: 1, offset: "objectPosition", len: 0, typ: NTI33554450, name: "objectPosition", sons: null}, 
{kind: 1, offset: "offset", len: 0, typ: NTI33554450, name: "offset", sons: null}, 
{kind: 1, offset: "offsetAnchor", len: 0, typ: NTI33554450, name: "offsetAnchor", sons: null}, 
{kind: 1, offset: "offsetDistance", len: 0, typ: NTI33554450, name: "offsetDistance", sons: null}, 
{kind: 1, offset: "offsetPath", len: 0, typ: NTI33554450, name: "offsetPath", sons: null}, 
{kind: 1, offset: "offsetRotate", len: 0, typ: NTI33554450, name: "offsetRotate", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI33554450, name: "opacity", sons: null}, 
{kind: 1, offset: "order", len: 0, typ: NTI33554450, name: "order", sons: null}, 
{kind: 1, offset: "orphans", len: 0, typ: NTI33554450, name: "orphans", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI33554450, name: "outline", sons: null}, 
{kind: 1, offset: "outlineColor", len: 0, typ: NTI33554450, name: "outlineColor", sons: null}, 
{kind: 1, offset: "outlineOffset", len: 0, typ: NTI33554450, name: "outlineOffset", sons: null}, 
{kind: 1, offset: "outlineStyle", len: 0, typ: NTI33554450, name: "outlineStyle", sons: null}, 
{kind: 1, offset: "outlineWidth", len: 0, typ: NTI33554450, name: "outlineWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI33554450, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowAnchor", len: 0, typ: NTI33554450, name: "overflowAnchor", sons: null}, 
{kind: 1, offset: "overflowBlock", len: 0, typ: NTI33554450, name: "overflowBlock", sons: null}, 
{kind: 1, offset: "overflowInline", len: 0, typ: NTI33554450, name: "overflowInline", sons: null}, 
{kind: 1, offset: "overflowWrap", len: 0, typ: NTI33554450, name: "overflowWrap", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI33554450, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI33554450, name: "overflowY", sons: null}, 
{kind: 1, offset: "overscrollBehavior", len: 0, typ: NTI33554450, name: "overscrollBehavior", sons: null}, 
{kind: 1, offset: "overscrollBehaviorBlock", len: 0, typ: NTI33554450, name: "overscrollBehaviorBlock", sons: null}, 
{kind: 1, offset: "overscrollBehaviorInline", len: 0, typ: NTI33554450, name: "overscrollBehaviorInline", sons: null}, 
{kind: 1, offset: "overscrollBehaviorX", len: 0, typ: NTI33554450, name: "overscrollBehaviorX", sons: null}, 
{kind: 1, offset: "overscrollBehaviorY", len: 0, typ: NTI33554450, name: "overscrollBehaviorY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI33554450, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBlock", len: 0, typ: NTI33554450, name: "paddingBlock", sons: null}, 
{kind: 1, offset: "paddingBlockEnd", len: 0, typ: NTI33554450, name: "paddingBlockEnd", sons: null}, 
{kind: 1, offset: "paddingBlockStart", len: 0, typ: NTI33554450, name: "paddingBlockStart", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI33554450, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingInline", len: 0, typ: NTI33554450, name: "paddingInline", sons: null}, 
{kind: 1, offset: "paddingInlineEnd", len: 0, typ: NTI33554450, name: "paddingInlineEnd", sons: null}, 
{kind: 1, offset: "paddingInlineStart", len: 0, typ: NTI33554450, name: "paddingInlineStart", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI33554450, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI33554450, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI33554450, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI33554450, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI33554450, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pageBreakInside", len: 0, typ: NTI33554450, name: "pageBreakInside", sons: null}, 
{kind: 1, offset: "paintOrder", len: 0, typ: NTI33554450, name: "paintOrder", sons: null}, 
{kind: 1, offset: "perspective", len: 0, typ: NTI33554450, name: "perspective", sons: null}, 
{kind: 1, offset: "perspectiveOrigin", len: 0, typ: NTI33554450, name: "perspectiveOrigin", sons: null}, 
{kind: 1, offset: "placeContent", len: 0, typ: NTI33554450, name: "placeContent", sons: null}, 
{kind: 1, offset: "placeItems", len: 0, typ: NTI33554450, name: "placeItems", sons: null}, 
{kind: 1, offset: "placeSelf", len: 0, typ: NTI33554450, name: "placeSelf", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI33554450, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI33554450, name: "position", sons: null}, 
{kind: 1, offset: "quotes", len: 0, typ: NTI33554450, name: "quotes", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI33554450, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI33554450, name: "right", sons: null}, 
{kind: 1, offset: "rotate", len: 0, typ: NTI33554450, name: "rotate", sons: null}, 
{kind: 1, offset: "rowGap", len: 0, typ: NTI33554450, name: "rowGap", sons: null}, 
{kind: 1, offset: "scale", len: 0, typ: NTI33554450, name: "scale", sons: null}, 
{kind: 1, offset: "scrollBehavior", len: 0, typ: NTI33554450, name: "scrollBehavior", sons: null}, 
{kind: 1, offset: "scrollMargin", len: 0, typ: NTI33554450, name: "scrollMargin", sons: null}, 
{kind: 1, offset: "scrollMarginBlock", len: 0, typ: NTI33554450, name: "scrollMarginBlock", sons: null}, 
{kind: 1, offset: "scrollMarginBlockEnd", len: 0, typ: NTI33554450, name: "scrollMarginBlockEnd", sons: null}, 
{kind: 1, offset: "scrollMarginBlockStart", len: 0, typ: NTI33554450, name: "scrollMarginBlockStart", sons: null}, 
{kind: 1, offset: "scrollMarginBottom", len: 0, typ: NTI33554450, name: "scrollMarginBottom", sons: null}, 
{kind: 1, offset: "scrollMarginInline", len: 0, typ: NTI33554450, name: "scrollMarginInline", sons: null}, 
{kind: 1, offset: "scrollMarginInlineEnd", len: 0, typ: NTI33554450, name: "scrollMarginInlineEnd", sons: null}, 
{kind: 1, offset: "scrollMarginInlineStart", len: 0, typ: NTI33554450, name: "scrollMarginInlineStart", sons: null}, 
{kind: 1, offset: "scrollMarginLeft", len: 0, typ: NTI33554450, name: "scrollMarginLeft", sons: null}, 
{kind: 1, offset: "scrollMarginRight", len: 0, typ: NTI33554450, name: "scrollMarginRight", sons: null}, 
{kind: 1, offset: "scrollMarginTop", len: 0, typ: NTI33554450, name: "scrollMarginTop", sons: null}, 
{kind: 1, offset: "scrollPadding", len: 0, typ: NTI33554450, name: "scrollPadding", sons: null}, 
{kind: 1, offset: "scrollPaddingBlock", len: 0, typ: NTI33554450, name: "scrollPaddingBlock", sons: null}, 
{kind: 1, offset: "scrollPaddingBlockEnd", len: 0, typ: NTI33554450, name: "scrollPaddingBlockEnd", sons: null}, 
{kind: 1, offset: "scrollPaddingBlockStart", len: 0, typ: NTI33554450, name: "scrollPaddingBlockStart", sons: null}, 
{kind: 1, offset: "scrollPaddingBottom", len: 0, typ: NTI33554450, name: "scrollPaddingBottom", sons: null}, 
{kind: 1, offset: "scrollPaddingInline", len: 0, typ: NTI33554450, name: "scrollPaddingInline", sons: null}, 
{kind: 1, offset: "scrollPaddingInlineEnd", len: 0, typ: NTI33554450, name: "scrollPaddingInlineEnd", sons: null}, 
{kind: 1, offset: "scrollPaddingInlineStart", len: 0, typ: NTI33554450, name: "scrollPaddingInlineStart", sons: null}, 
{kind: 1, offset: "scrollPaddingLeft", len: 0, typ: NTI33554450, name: "scrollPaddingLeft", sons: null}, 
{kind: 1, offset: "scrollPaddingRight", len: 0, typ: NTI33554450, name: "scrollPaddingRight", sons: null}, 
{kind: 1, offset: "scrollPaddingTop", len: 0, typ: NTI33554450, name: "scrollPaddingTop", sons: null}, 
{kind: 1, offset: "scrollSnapAlign", len: 0, typ: NTI33554450, name: "scrollSnapAlign", sons: null}, 
{kind: 1, offset: "scrollSnapStop", len: 0, typ: NTI33554450, name: "scrollSnapStop", sons: null}, 
{kind: 1, offset: "scrollSnapType", len: 0, typ: NTI33554450, name: "scrollSnapType", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI33554450, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI33554450, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI33554450, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarColor", len: 0, typ: NTI33554450, name: "scrollbarColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI33554450, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI33554450, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI33554450, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI33554450, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI33554450, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "scrollbarWidth", len: 0, typ: NTI33554450, name: "scrollbarWidth", sons: null}, 
{kind: 1, offset: "shapeImageThreshold", len: 0, typ: NTI33554450, name: "shapeImageThreshold", sons: null}, 
{kind: 1, offset: "shapeMargin", len: 0, typ: NTI33554450, name: "shapeMargin", sons: null}, 
{kind: 1, offset: "shapeOutside", len: 0, typ: NTI33554450, name: "shapeOutside", sons: null}, 
{kind: 1, offset: "tabSize", len: 0, typ: NTI33554450, name: "tabSize", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI33554450, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI33554450, name: "textAlign", sons: null}, 
{kind: 1, offset: "textAlignLast", len: 0, typ: NTI33554450, name: "textAlignLast", sons: null}, 
{kind: 1, offset: "textCombineUpright", len: 0, typ: NTI33554450, name: "textCombineUpright", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI33554450, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textDecorationColor", len: 0, typ: NTI33554450, name: "textDecorationColor", sons: null}, 
{kind: 1, offset: "textDecorationLine", len: 0, typ: NTI33554450, name: "textDecorationLine", sons: null}, 
{kind: 1, offset: "textDecorationSkipInk", len: 0, typ: NTI33554450, name: "textDecorationSkipInk", sons: null}, 
{kind: 1, offset: "textDecorationStyle", len: 0, typ: NTI33554450, name: "textDecorationStyle", sons: null}, 
{kind: 1, offset: "textDecorationThickness", len: 0, typ: NTI33554450, name: "textDecorationThickness", sons: null}, 
{kind: 1, offset: "textEmphasis", len: 0, typ: NTI33554450, name: "textEmphasis", sons: null}, 
{kind: 1, offset: "textEmphasisColor", len: 0, typ: NTI33554450, name: "textEmphasisColor", sons: null}, 
{kind: 1, offset: "textEmphasisPosition", len: 0, typ: NTI33554450, name: "textEmphasisPosition", sons: null}, 
{kind: 1, offset: "textEmphasisStyle", len: 0, typ: NTI33554450, name: "textEmphasisStyle", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI33554450, name: "textIndent", sons: null}, 
{kind: 1, offset: "textJustify", len: 0, typ: NTI33554450, name: "textJustify", sons: null}, 
{kind: 1, offset: "textOrientation", len: 0, typ: NTI33554450, name: "textOrientation", sons: null}, 
{kind: 1, offset: "textOverflow", len: 0, typ: NTI33554450, name: "textOverflow", sons: null}, 
{kind: 1, offset: "textRendering", len: 0, typ: NTI33554450, name: "textRendering", sons: null}, 
{kind: 1, offset: "textShadow", len: 0, typ: NTI33554450, name: "textShadow", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI33554450, name: "textTransform", sons: null}, 
{kind: 1, offset: "textUnderlineOffset", len: 0, typ: NTI33554450, name: "textUnderlineOffset", sons: null}, 
{kind: 1, offset: "textUnderlinePosition", len: 0, typ: NTI33554450, name: "textUnderlinePosition", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI33554450, name: "top", sons: null}, 
{kind: 1, offset: "touchAction", len: 0, typ: NTI33554450, name: "touchAction", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI33554450, name: "transform", sons: null}, 
{kind: 1, offset: "transformBox", len: 0, typ: NTI33554450, name: "transformBox", sons: null}, 
{kind: 1, offset: "transformOrigin", len: 0, typ: NTI33554450, name: "transformOrigin", sons: null}, 
{kind: 1, offset: "transformStyle", len: 0, typ: NTI33554450, name: "transformStyle", sons: null}, 
{kind: 1, offset: "transition", len: 0, typ: NTI33554450, name: "transition", sons: null}, 
{kind: 1, offset: "transitionDelay", len: 0, typ: NTI33554450, name: "transitionDelay", sons: null}, 
{kind: 1, offset: "transitionDuration", len: 0, typ: NTI33554450, name: "transitionDuration", sons: null}, 
{kind: 1, offset: "transitionProperty", len: 0, typ: NTI33554450, name: "transitionProperty", sons: null}, 
{kind: 1, offset: "transitionTimingFunction", len: 0, typ: NTI33554450, name: "transitionTimingFunction", sons: null}, 
{kind: 1, offset: "translate", len: 0, typ: NTI33554450, name: "translate", sons: null}, 
{kind: 1, offset: "unicodeBidi", len: 0, typ: NTI33554450, name: "unicodeBidi", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI33554450, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI33554450, name: "visibility", sons: null}, 
{kind: 1, offset: "whiteSpace", len: 0, typ: NTI33554450, name: "whiteSpace", sons: null}, 
{kind: 1, offset: "widows", len: 0, typ: NTI33554450, name: "widows", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI33554450, name: "width", sons: null}, 
{kind: 1, offset: "willChange", len: 0, typ: NTI33554450, name: "willChange", sons: null}, 
{kind: 1, offset: "wordBreak", len: 0, typ: NTI33554450, name: "wordBreak", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI33554450, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "writingMode", len: 0, typ: NTI33554450, name: "writingMode", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI33554450, name: "zIndex", sons: null}]};
NTI1124073614.node = NNI1124073614;
NTI1124073614.base = NTI33555167;
NTI1124073502.base = NTI1124073614;
var NNI1124073586 = {kind: 2, len: 22, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI1124073587, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI1124073588, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI1124073589, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI33554450, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI1124073488, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI1124073488, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI1124073488, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI33554450, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI1124073487, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI33554450, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI1124073488, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI1124073488, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI1124073488, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI1124073489, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI33554450, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI33554450, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI33554450, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI33554450, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI1124073502, name: "style", sons: null}, 
{kind: 1, offset: "baseURI", len: 0, typ: NTI33554450, name: "baseURI", sons: null}, 
{kind: 1, offset: "parentElement", len: 0, typ: NTI1124073490, name: "parentElement", sons: null}, 
{kind: 1, offset: "isConnected", len: 0, typ: NTI33554466, name: "isConnected", sons: null}]};
NTI1124073586.node = NNI1124073586;
var NNI1124073541 = {kind: 2, len: 24, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI1124073542, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI1124073543, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI1124073544, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI1124073545, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI1124073546, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI1124073547, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI1124073548, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI1124073549, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI1124073550, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI1124073551, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI1124073552, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI1124073553, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI1124073554, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI1124073555, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI1124073556, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI1124073557, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI1124073558, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI1124073559, name: "onselect", sons: null}, 
{kind: 1, offset: "onstorage", len: 0, typ: NTI1124073560, name: "onstorage", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI1124073561, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI1124073562, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI1124073563, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI1124073564, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI1124073565, name: "onloadend", sons: null}]};
NTI1124073541.node = NNI1124073541;
NTI1124073541.base = NTI33555167;
NTI1124073586.base = NTI1124073541;
NTI1124073488.base = NTI1124073586;
var NNI1459617886 = {kind: 2, len: 11, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI1459617795, name: "kind", sons: null}, 
{kind: 1, offset: "index", len: 0, typ: NTI33554435, name: "index", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI33554450, name: "id", sons: null}, 
{kind: 1, offset: "class", len: 0, typ: NTI33554450, name: "class", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI33554450, name: "text", sons: null}, 
{kind: 1, offset: "kids", len: 0, typ: NTI1459617887, name: "kids", sons: null}, 
{kind: 1, offset: "attrs", len: 0, typ: NTI1459617888, name: "attrs", sons: null}, 
{kind: 1, offset: "events", len: 0, typ: NTI1459617881, name: "events", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI1526726708, name: "style", sons: null}, 
{kind: 1, offset: "styleVersion", len: 0, typ: NTI33554435, name: "styleVersion", sons: null}, 
{kind: 1, offset: "dom", len: 0, typ: NTI1124073488, name: "dom", sons: null}]};
NTI1459617886.node = NNI1459617886;
NTI1459617886.base = NTI33555167;
NTI1459617883.base = NTI1459617886;
var NNI1426063367 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI1426063367, name: "pkReplace", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1426063367, name: "pkRemove", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1426063367, name: "pkAppend", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1426063367, name: "pkInsertBefore", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1426063367, name: "pkDetach", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1426063367, name: "pkSame", len: 0, sons: null}}};
NTI1426063367.node = NNI1426063367;
var NNI1426063368 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "k", len: 0, typ: NTI1426063367, name: "k", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI1124073488, name: "parent", sons: null}, 
{kind: 1, offset: "current", len: 0, typ: NTI1124073488, name: "current", sons: null}, 
{kind: 1, offset: "newNode", len: 0, typ: NTI1459617883, name: "newNode", sons: null}, 
{kind: 1, offset: "oldNode", len: 0, typ: NTI1459617883, name: "oldNode", sons: null}]};
NTI1426063368.node = NNI1426063368;
NTI1426063378.base = NTI1426063368;
var NNI1426063369 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1459617883, name: "parent", sons: null}, 
{kind: 1, offset: "newChild", len: 0, typ: NTI1459617883, name: "newChild", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI33554435, name: "pos", sons: null}]};
NTI1426063369.node = NNI1426063369;
NTI1426063379.base = NTI1426063369;
var NNI1459617889 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI33554450, name: "key", sons: null}, 
{kind: 1, offset: "renderImpl", len: 0, typ: NTI1459617890, name: "renderImpl", sons: null}, 
{kind: 1, offset: "changedImpl", len: 0, typ: NTI1459617891, name: "changedImpl", sons: null}, 
{kind: 1, offset: "updatedImpl", len: 0, typ: NTI1459617892, name: "updatedImpl", sons: null}, 
{kind: 1, offset: "onAttachImpl", len: 0, typ: NTI1459617893, name: "onAttachImpl", sons: null}, 
{kind: 1, offset: "onDetachImpl", len: 0, typ: NTI1459617894, name: "onDetachImpl", sons: null}, 
{kind: 1, offset: "version", len: 0, typ: NTI33554435, name: "version", sons: null}, 
{kind: 1, offset: "renderedVersion", len: 0, typ: NTI33554435, name: "renderedVersion", sons: null}, 
{kind: 1, offset: "expanded", len: 0, typ: NTI1459617883, name: "expanded", sons: null}, 
{kind: 1, offset: "debugId", len: 0, typ: NTI33554435, name: "debugId", sons: null}]};
NTI1459617889.node = NNI1459617889;
NTI1459617889.base = NTI1459617886;
NTI1459617884.base = NTI1459617889;
var NNI1426063370 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "oldNode", len: 0, typ: NTI1459617884, name: "oldNode", sons: null}, 
{kind: 1, offset: "newNode", len: 0, typ: NTI1459617884, name: "newNode", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI1124073488, name: "parent", sons: null}, 
{kind: 1, offset: "current", len: 0, typ: NTI1124073488, name: "current", sons: null}]};
NTI1426063370.node = NNI1426063370;
NTI1426063380.base = NTI1426063370;
var NNI1426063389 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1426063389.node = NNI1426063389;
NTI1426063388.base = NTI1426063389;
var NNI1426063398 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1426063398.node = NNI1426063398;
NTI1426063397.base = NTI1426063398;
var NNI1426063375 = {kind: 2, len: 17, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "rootId", len: 0, typ: NTI33554450, name: "rootId", sons: null}, 
{kind: 1, offset: "renderer", len: 0, typ: NTI1426063376, name: "renderer", sons: null}, 
{kind: 1, offset: "currentTree", len: 0, typ: NTI1459617883, name: "currentTree", sons: null}, 
{kind: 1, offset: "postRenderCallback", len: 0, typ: NTI1426063377, name: "postRenderCallback", sons: null}, 
{kind: 1, offset: "toFocus", len: 0, typ: NTI1124073488, name: "toFocus", sons: null}, 
{kind: 1, offset: "toFocusV", len: 0, typ: NTI1459617883, name: "toFocusV", sons: null}, 
{kind: 1, offset: "renderId", len: 0, typ: NTI33554435, name: "renderId", sons: null}, 
{kind: 1, offset: "rendering", len: 0, typ: NTI33554466, name: "rendering", sons: null}, 
{kind: 1, offset: "patches", len: 0, typ: NTI1426063378, name: "patches", sons: null}, 
{kind: 1, offset: "patchLen", len: 0, typ: NTI33554435, name: "patchLen", sons: null}, 
{kind: 1, offset: "patchesV", len: 0, typ: NTI1426063379, name: "patchesV", sons: null}, 
{kind: 1, offset: "patchLenV", len: 0, typ: NTI33554435, name: "patchLenV", sons: null}, 
{kind: 1, offset: "runCount", len: 0, typ: NTI33554435, name: "runCount", sons: null}, 
{kind: 1, offset: "components", len: 0, typ: NTI1426063380, name: "components", sons: null}, 
{kind: 1, offset: "surpressRedraws", len: 0, typ: NTI33554466, name: "surpressRedraws", sons: null}, 
{kind: 1, offset: "byId", len: 0, typ: NTI1426063388, name: "byId", sons: null}, 
{kind: 1, offset: "orphans", len: 0, typ: NTI1426063397, name: "orphans", sons: null}]};
NTI1426063375.node = NNI1426063375;
NTI1426063373.base = NTI1426063375;
var NNI553659611 = {kind: 1, offset: "kxi0", len: 0, typ: NTI1426063373, name: "kxi0", sons: null};
NTI553659611.node = NNI553659611;
NTI553659611.base = NTI33555167;
var NNI905969751 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI905969744, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI905969751.node = NNI905969751;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555172;
var NNI553659640 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "action0", len: 0, typ: NTI1459617895, name: "action0", sons: null}, 
{kind: 1, offset: "n1", len: 0, typ: NTI1459617883, name: "n1", sons: null}]};
NTI553659640.node = NNI553659640;
NTI553659640.base = NTI33555167;
var NNI1124073655 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1124073655.node = NNI1124073655;
NTI1124073655.base = NTI33555167;
NTI1124073534.base = NTI1124073655;
var NNI553659642 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "timer0", len: 0, typ: NTI1124073534, name: "timer0", sons: null}, 
{kind: 1, offset: "n1", len: 0, typ: NTI1459617883, name: "n1", sons: null}, 
{kind: 1, offset: "action2", len: 0, typ: NTI1459617895, name: "action2", sons: null}]};
NTI553659642.node = NNI553659642;
NTI553659642.base = NTI33555167;
var NNI1124073617 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "bubbles", len: 0, typ: NTI33554466, name: "bubbles", sons: null}, 
{kind: 1, offset: "cancelBubble", len: 0, typ: NTI33554466, name: "cancelBubble", sons: null}, 
{kind: 1, offset: "cancelable", len: 0, typ: NTI33554466, name: "cancelable", sons: null}, 
{kind: 1, offset: "composed", len: 0, typ: NTI33554466, name: "composed", sons: null}, 
{kind: 1, offset: "currentTarget", len: 0, typ: NTI1124073488, name: "currentTarget", sons: null}, 
{kind: 1, offset: "defaultPrevented", len: 0, typ: NTI33554466, name: "defaultPrevented", sons: null}, 
{kind: 1, offset: "eventPhase", len: 0, typ: NTI33554435, name: "eventPhase", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI1124073488, name: "target", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI33554450, name: "type", sons: null}, 
{kind: 1, offset: "isTrusted", len: 0, typ: NTI33554466, name: "isTrusted", sons: null}]};
NTI1124073617.node = NNI1124073617;
NTI1124073617.base = NTI33555167;
NTI1124073504.base = NTI1124073617;
NTI553659641.base = NTI553659642;
var NNI553659644 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ev0", len: 0, typ: NTI1124073504, name: "ev0", sons: null}, 
{kind: 1, offset: "HEX3Aup", len: 0, typ: NTI553659641, name: ":up", sons: null}]};
NTI553659644.node = NNI553659644;
NTI553659644.base = NTI33555167;
var NNI553659646 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "n0", len: 0, typ: NTI1459617883, name: "n0", sons: null}, 
{kind: 1, offset: "action1", len: 0, typ: NTI1459617895, name: "action1", sons: null}]};
NTI553659646.node = NNI553659646;
NTI553659646.base = NTI33555167;
var NNI553659648 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "n0", len: 0, typ: NTI1459617883, name: "n0", sons: null}, 
{kind: 1, offset: "action1", len: 0, typ: NTI1459617895, name: "action1", sons: null}]};
NTI553659648.node = NNI553659648;
NTI553659648.base = NTI33555167;
var NNI553659774 = {kind: 1, offset: "kxi0", len: 0, typ: NTI1426063373, name: "kxi0", sons: null};
NTI553659774.node = NNI553659774;
NTI553659774.base = NTI33555167;
NTI1459618074.base = NTI33554450;
var NNI553658979 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI553658979, name: "basic", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI553658979, name: "advanced", len: 0, sons: null}}};
NTI553658979.node = NNI553658979;
var NNI553659815 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "action0", len: 0, typ: NTI1459617895, name: "action0", sons: null}, 
{kind: 1, offset: "kxi1", len: 0, typ: NTI1426063373, name: "kxi1", sons: null}]};
NTI553659815.node = NNI553659815;
NTI553659815.base = NTI33555167;
var NNI553658980 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI553658979, name: "kind", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554449, name: "name", sons: null}, 
{kind: 1, offset: "code", len: 0, typ: NTI33554449, name: "code", sons: null}]};
NTI553658980.node = NNI553658980;
var NNI553659835 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "action0", len: 0, typ: NTI1426064267, name: "action0", sons: null}, 
{kind: 1, offset: "kxi1", len: 0, typ: NTI1426063373, name: "kxi1", sons: null}]};
NTI553659835.node = NNI553659835;
NTI553659835.base = NTI33555167;
NTI738198881.base = NTI33554448;
var NNI553648138 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554449, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554449, name: "Field1", sons: null}]};
NTI553648138.node = NNI553648138;
var NNI134217750 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217750.node = NNI134217750;
NTI134217750.base = NTI33555172;
var NNI553648173 = {kind: 2, offset: 0, typ: null, name: null, len: 13, sons: {"0": {kind: 1, offset: 0, typ: NTI553648173, name: "tkSymbol", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI553648173, name: "number-type", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI553648173, name: "string-type", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI553648173, name: "tkOpen", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI553648173, name: "tkClose", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI553648173, name: "tkKeyword", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI553648173, name: "tkBool", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI553648173, name: "tkAtomicType", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI553648173, name: "tkDot", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI553648173, name: "tkTag", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI553648173, name: "any-type", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI553648173, name: "void-type", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI553648173, name: "tkMember", len: 0, sons: null}}};
NTI553648173.node = NNI553648173;
var NNI553648169 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI553648169, name: "unquote", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI553648169, name: "unquote-splicing", len: 0, sons: null}}};
NTI553648169.node = NNI553648169;
NTI553648191.base = NTI553648169;
NTI553654382.base = NTI553648169;
var NNI553648176 = {kind: 2, offset: 0, typ: null, name: null, len: 20, sons: {"0": {kind: 1, offset: 0, typ: NTI553648176, name: "nkSymbol", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI553648176, name: "nkList", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI553648176, name: "nkFunction", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI553648176, name: "nkKeyword", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI553648176, name: "nkTable", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI553648176, name: "nkAtomicType", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI553648176, name: "nkObjectType", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI553648176, name: "nkEnumType", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI553648176, name: "nkObject", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI553648176, name: "nkAtomic", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI553648176, name: "nkDot", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI553648176, name: "nkTemplate", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI553648176, name: "nkTableType", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI553648176, name: "nkArrayType", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI553648176, name: "nkAnyType", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI553648176, name: "nkVoidType", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI553648176, name: "nkVoidValue", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI553648176, name: "nkClassType", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI553648176, name: "nkClassObj", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI553648176, name: "nkMember", len: 0, sons: null}}};
NTI553648176.node = NNI553648176;
var NNI553648205 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1006632963, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554449, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI553648177, name: "Field2", sons: null}]};
NTI553648205.node = NNI553648205;
NTI553648202.base = NTI553648205;
var NNI553648199 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI553648202, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}]};
NTI553648199.node = NNI553648199;
var NNI553648168 = {kind: 2, offset: 0, typ: null, name: null, len: 57, sons: {"0": {kind: 1, offset: 0, typ: NTI553648168, name: "quote", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI553648168, name: "eval", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI553648168, name: ":=", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI553648168, name: "if", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI553648168, name: "+", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI553648168, name: "\\", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI553648168, name: "echo", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI553648168, name: "repr", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI553648168, name: "block", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI553648168, name: "table", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI553648168, name: "must-equal", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI553648168, name: "object-type", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI553648168, name: "=", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI553648168, name: "str-add", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI553648168, name: "high", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI553648168, name: "low", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI553648168, name: "..", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI553648168, name: "expect", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI553648168, name: "to-str", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI553648168, name: "is-list", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI553648168, name: "==", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI553648168, name: "!=", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI553648168, name: "not", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI553648168, name: "empty?", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI553648168, name: "array-get", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI553648168, name: "filter-array", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI553648168, name: "-", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI553648168, name: "for", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI553648168, name: "len", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI553648168, name: "+=", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI553648168, name: "-=", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI553648168, name: "is-str", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI553648168, name: "class", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI553648168, name: "return", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI553648168, name: "or", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI553648168, name: "and", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI553648168, name: "contains", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI553648168, name: "template", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI553648168, name: "while", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI553648168, name: "<=", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI553648168, name: ">=", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI553648168, name: "<", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI553648168, name: ">", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI553648168, name: "add", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI553648168, name: "enum-type", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI553648168, name: "try", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI553648168, name: "except", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI553648168, name: "finally", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI553648168, name: "table-type", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI553648168, name: "array-type", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI553648168, name: "case", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI553648168, name: "table-set!", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI553648168, name: "table-get", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI553648168, name: "table-has-key", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI553648168, name: "continue", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI553648168, name: "break", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI553648168, name: "join-lists", len: 0, sons: null}}};
NTI553648168.node = NNI553648168;
var NNI553648175 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI553648175, name: "number", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI553648175, name: "string", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI553648175, name: "bool", len: 0, sons: null}}};
NTI553648175.node = NNI553648175;
NTI553648221.base = NTI553648177;
var NNI553648235 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1006632963, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI553648177, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI553648177, name: "Field2", sons: null}]};
NTI553648235.node = NNI553648235;
NTI553648232.base = NTI553648235;
var NNI553648229 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI553648232, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI33554435, name: "counter", sons: null}]};
NTI553648229.node = NNI553648229;
NTI553648236.base = NTI33554449;
NTI553648237.base = NTI553648177;
NTI553648238.base = NTI33554449;
NTI553648249.base = NTI553648177;
var NNI553648190 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "line", len: 0, typ: NTI33554435, name: "line", sons: null}, 
{kind: 1, offset: "tags", len: 0, typ: NTI553648191, name: "tags", sons: null}, 
{kind: 1, offset: "enumType", len: 0, typ: NTI553648177, name: "enumType", sons: null}, 
{kind: 3, offset: "kind", len: 20, typ: NTI553648176, name: "kind", sons: [[setConstr(19), {kind: 1, offset: "member", len: 0, typ: NTI33554449, name: "member", sons: null}], 
[setConstr(17), {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "className", len: 0, typ: NTI33554449, name: "className", sons: null}, 
{kind: 1, offset: "classParent", len: 0, typ: NTI553648177, name: "classParent", sons: null}, 
{kind: 1, offset: "classFields", len: 0, typ: NTI553648199, name: "classFields", sons: null}, 
{kind: 1, offset: "classMethods", len: 0, typ: NTI553648199, name: "classMethods", sons: null}]}], 
[setConstr(18), {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classObjType", len: 0, typ: NTI553648177, name: "classObjType", sons: null}, 
{kind: 1, offset: "classObjFields", len: 0, typ: NTI553648199, name: "classObjFields", sons: null}, 
{kind: 1, offset: "classObjMethods", len: 0, typ: NTI553648199, name: "classObjMethods", sons: null}]}], 
[setConstr(14, 15, 16), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(10), {kind: 1, offset: "dot", len: 0, typ: NTI33554449, name: "dot", sons: null}], 
[setConstr(3), {kind: 1, offset: "keyword", len: 0, typ: NTI553648168, name: "keyword", sons: null}], 
[setConstr(9), {kind: 3, offset: "atomicKind", len: 3, typ: NTI553648175, name: "atomicKind", sons: [[setConstr(0), {kind: 1, offset: "num", len: 0, typ: NTI33554445, name: "num", sons: null}], 
[setConstr(1), {kind: 1, offset: "str", len: 0, typ: NTI33554449, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "boolean", len: 0, typ: NTI33554466, name: "boolean", sons: null}]]}], 
[setConstr(0), {kind: 1, offset: "sym", len: 0, typ: NTI33554449, name: "sym", sons: null}], 
[setConstr(5), {kind: 1, offset: "atomicType", len: 0, typ: NTI553648175, name: "atomicType", sons: null}], 
[setConstr(1), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kids", len: 0, typ: NTI553648221, name: "kids", sons: null}, 
{kind: 1, offset: "listType", len: 0, typ: NTI553648177, name: "listType", sons: null}]}], 
[setConstr(4), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tableVal", len: 0, typ: NTI553648229, name: "tableVal", sons: null}, 
{kind: 1, offset: "tableType", len: 0, typ: NTI553648177, name: "tableType", sons: null}]}], 
[setConstr(2), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "funcParams", len: 0, typ: NTI553648236, name: "funcParams", sons: null}, 
{kind: 1, offset: "funcTypes", len: 0, typ: NTI553648237, name: "funcTypes", sons: null}, 
{kind: 1, offset: "funcBody", len: 0, typ: NTI553648177, name: "funcBody", sons: null}, 
{kind: 1, offset: "funcReturnType", len: 0, typ: NTI553648177, name: "funcReturnType", sons: null}, 
{kind: 1, offset: "funcObj", len: 0, typ: NTI553648177, name: "funcObj", sons: null}]}], 
[setConstr(11), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "templateParams", len: 0, typ: NTI553648238, name: "templateParams", sons: null}, 
{kind: 1, offset: "templateBody", len: 0, typ: NTI553648177, name: "templateBody", sons: null}]}], 
[setConstr(6), {kind: 1, offset: "objectTypeFields", len: 0, typ: NTI553648199, name: "objectTypeFields", sons: null}], 
[setConstr(8), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "objectType", len: 0, typ: NTI553648177, name: "objectType", sons: null}, 
{kind: 1, offset: "objectFields", len: 0, typ: NTI553648199, name: "objectFields", sons: null}]}], 
[setConstr(7), {kind: 1, offset: "enumTypeValues", len: 0, typ: NTI553648249, name: "enumTypeValues", sons: null}], 
[setConstr(12), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tableKeyType", len: 0, typ: NTI553648177, name: "tableKeyType", sons: null}, 
{kind: 1, offset: "tableValueType", len: 0, typ: NTI553648177, name: "tableValueType", sons: null}]}], 
[setConstr(13), {kind: 1, offset: "arrayValueType", len: 0, typ: NTI553648177, name: "arrayValueType", sons: null}]]}]};
NTI553648190.node = NNI553648190;
NTI553648177.base = NTI553648190;
NTI553654345.base = NTI553648177;
var NNI134217746 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217746.node = NNI134217746;
var NNI33555173 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555173.node = NNI33555173;
NTI33555173.base = NTI33555171;
NTI134217746.base = NTI33555173;
var NNI1006633308 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554444, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554444, name: "Field1", sons: null}]};
NTI1006633308.node = NNI1006633308;
var NNI134217742 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217742.node = NNI134217742;
NTI134217742.base = NTI134217741;
var NNI134217747 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217747.node = NNI134217747;
NTI134217747.base = NTI134217746;
var NNI553648414 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554449, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI553648177, name: "Field1", sons: null}]};
NTI553648414.node = NNI553648414;
var NNI553648863 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI553648177, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI553648177, name: "Field1", sons: null}]};
NTI553648863.node = NNI553648863;
var NNI553648178 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI553648178, name: "skBlock", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI553648178, name: "skFunction", len: 0, sons: null}}};
NTI553648178.node = NNI553648178;
NTI553654761.base = NTI553648177;
var NNI687866165 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554435, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI687866165.node = NNI687866165;
NTI553650670.base = NTI553648177;
var NNI553648185 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI553648185.node = NNI553648185;
NTI553648185.base = NTI33555173;
var NNI553648184 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI553648184.node = NNI553648184;
NTI553648184.base = NTI33555173;
NTI553649984.base = NTI553648177;
var NNI553648183 = {kind: 1, offset: "value", len: 0, typ: NTI553648177, name: "value", sons: null};
NTI553648183.node = NNI553648183;
NTI553648183.base = NTI33555173;
var NNI134217753 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217753.node = NNI134217753;
NTI134217753.base = NTI33555172;
NTI520094029.base = NTI33554449;
NTI553657039.base = NTI33554449;
NTI553657040.base = NTI553648177;

function cstrToNimstr(c_p0) {
      var ln = c_p0.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_p0.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_p0.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function arrayConstr(len_p0, value_p1, typ_p2) {
        var result = new Array(len_p0);
    for (var i = 0; i < len_p0; ++i) result[i] = nimCopy(null, value_p1, typ_p2);
    return result;
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_p0, src_p1, ti_p2) {
  var result_33557321 = null;

    switch (ti_p2.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer__system_u2869(ti_p2))) {
      result_33557321 = src_p1;
      }
      else {
        result_33557321 = [src_p1[0], src_p1[1]];
      }
      
      break;
    case 19:
            if (dest_p0 === null || dest_p0 === undefined) {
        dest_p0 = {};
      }
      else {
        for (var key in dest_p0) { delete dest_p0[key]; }
      }
      for (var key in src_p1) { dest_p0[key] = src_p1[key]; }
      result_33557321 = dest_p0;
    
      break;
    case 18:
    case 17:
      if (!((ti_p2.base == null))) {
      result_33557321 = nimCopy(dest_p0, src_p1, ti_p2.base);
      }
      else {
      if ((ti_p2.kind == 17)) {
      result_33557321 = (dest_p0 === null || dest_p0 === undefined) ? {m_type: ti_p2} : dest_p0;
      }
      else {
        result_33557321 = (dest_p0 === null || dest_p0 === undefined) ? {} : dest_p0;
      }
      }
      nimCopyAux(result_33557321, src_p1, ti_p2.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_p1)) { 
        if(dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
          dest_p0 = new src_p1.constructor(src_p1);
        } else {
          dest_p0.set(src_p1, 0);
        }
        result_33557321 = dest_p0;
      } else {
        if (src_p1 === null) {
          result_33557321 = null;
        }
        else {
          if (dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
            dest_p0 = new Array(src_p1.length);
          }
          result_33557321 = dest_p0;
          for (var i = 0; i < src_p1.length; ++i) {
            result_33557321[i] = nimCopy(result_33557321[i], src_p1[i], ti_p2.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_p1 === null) {
        result_33557321 = null;
      }
      else {
        if (dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
          dest_p0 = new Array(src_p1.length);
        }
        result_33557321 = dest_p0;
        for (var i = 0; i < src_p1.length; ++i) {
          result_33557321[i] = nimCopy(result_33557321[i], src_p1[i], ti_p2.base);
        }
      }
    
      break;
    case 28:
            if (src_p1 !== null) {
        result_33557321 = src_p1.slice(0);
      }
    
      break;
    default: 
      result_33557321 = src_p1;
      break;
    }

  return result_33557321;

}

function mnewString(len_p0) {
        var result = new Array(len_p0);
    for (var i = 0; i < len_p0; i++) {result[i] = 0;}
    return result;
  

  
}

function addInt(a_p0, b_p1) {
        var result = a_p0 + b_p1;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_p0, a_p1, b_p2) {
  var result_33557361 = 0;

  BeforeRet: {
    if (((a_p1 <= i_p0) && (i_p0 <= b_p2))) {
    result_33557361 = i_p0;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  };

  return result_33557361;

}

function chckIndx(i_p0, a_p1, b_p2) {
  var result_33557356 = 0;

  BeforeRet: {
    if (((a_p1 <= i_p0) && (i_p0 <= b_p2))) {
    result_33557356 = i_p0;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_p0, a_p1, b_p2);
    }
    
  };

  return result_33557356;

}

function toJSStr(s_p0) {
  var result_33556910 = null;

    var res_33556964 = newSeq__system_u2507((s_p0).length);
    var i_33556965 = 0;
    var j_33556966 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556965 < (s_p0).length)) break Label2;
          var c_33556967 = s_p0[i_33556965];
          if ((c_33556967 < 128)) {
          res_33556964[j_33556966] = String.fromCharCode(c_33556967);
          i_33556965 += 1;
          }
          else {
            var helper_33556993 = newSeq__system_u2507(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556994 = c_33556967.toString(16);
                  if ((((code_33556994) == null ? 0 : (code_33556994).length) == 1)) {
                  helper_33556993.push("%0");;
                  }
                  else {
                  helper_33556993.push("%");;
                  }
                  
                  helper_33556993.push(code_33556994);;
                  i_33556965 += 1;
                  if ((((s_p0).length <= i_33556965) || (s_p0[i_33556965] < 128))) {
                  break Label3;
                  }
                  
                  c_33556967 = s_p0[i_33556965];
                }
            };
++excHandler;
            try {
            res_33556964[j_33556966] = decodeURIComponent(helper_33556993.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556964[j_33556966] = helper_33556993.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556966 += 1;
        }
    };
    if (res_33556964.length < j_33556966) { for (var i = res_33556964.length ; i < j_33556966 ; ++i) res_33556964.push(null); }
               else { res_33556964.length = j_33556966; };
    result_33556910 = res_33556964.join("");

  return result_33556910;

}

function raiseException(e_p0, ename_p1) {
    e_p0.name = ename_p1;
    if ((excHandler == 0)) {
    unhandledException(e_p0);
    }
    
    e_p0.trace = nimCopy(null, rawWriteStackTrace__system_u2180(), NTI33554449);
    throw e_p0;

  
}

function subInt(a_p0, b_p1) {
        var result = a_p0 - b_p1;
    checkOverflowInt(result);
    return result;
  

  
}

function makeNimstrLit(c_p0) {
      var result = [];
  for (var i = 0; i < c_p0.length; ++i) {
    result[i] = c_p0.charCodeAt(i);
  }
  return result;
  

  
}

function cmpClosures(a_p0, b_p1) {
        if (a_p0 !== null && a_p0.ClP_0 !== undefined &&
        b_p1 !== null && b_p1.ClP_0 !== undefined) {
      return a_p0.ClP_0 == b_p1.ClP_0 && a_p0.ClE_0 == b_p1.ClE_0;
    } else {
      return a_p0 == b_p1;
    }
  

  
}
var ConstSet2 = setConstr([88, 148]);
      var toTag_1459618116 = ["#text", "#int", "#bool", "#vthunk", "#dthunk", "#component", "#verbatim", "html", "head", "title", "base", "link", "meta", "style", "script", "noscript", "body", "section", "nav", "article", "aside", "h1", "h2", "h3", "h4", "h5", "h6", "hgroup", "header", "footer", "address", "main", "p", "hr", "pre", "blockquote", "ol", "ul", "li", "dl", "dt", "dd", "figure", "figcaption", "div", "a", "em", "strong", "small", "s", "cite", "quote", "dfn", "abbr", "data", "time", "code", "var", "samp", "kbd", "sub", "sup", "i", "b", "u", "mark", "ruby", "rt", "rp", "bdi", "dbo", "span", "br", "wbr", "ins", "del", "img", "iframe", "embed", "object", "param", "video", "audio", "source", "track", "canvas", "map", "area", "animate", "animateMotion", "animateTransform", "circle", "clipPath", "defs", "desc", "discard", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "set", "stop", "svg", "switch", "symbol", "text", "textPath", "tspan", "unknown", "use", "view", "maction", "math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msubsup", "msup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "semantics", "table", "caption", "colgroup", "col", "tbody", "thead", "tfoot", "tr", "td", "th", "form", "fieldset", "legend", "label", "input", "button", "select", "datalist", "optgroup", "option", "textarea", "keygen", "output", "progress", "meter", "details", "summary", "command", "menu", "bdo", "dialog", "slot", "template"];
var ConstSet3 = setConstr([149, 179]);
var ConstSet4 = setConstr([88, 148]);
      var toEventName_1459618193 = ["click", "contextmenu", "dblclick", "keyup", "keydown", "keypressed", "focus", "blur", "change", "scroll", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseout", "mouseover", "mouseup", "drag", "dragend", "dragenter", "dragleave", "dragover", "dragstart", "drop", "submit", "input", "animationstart", "animationend", "animationiteration", "keyupenter", "keyuplater", "load", "transitioncancel", "transitionend", "transitionrun", "transitionstart", "wheel"];
var ConstSet5 = setConstr([88, 148]);

function nimMin(a_p0, b_p1) {
    var Temporary1;

  var result_33557144 = 0;

  BeforeRet: {
    if ((a_p0 <= b_p1)) {
    Temporary1 = a_p0;
    }
    else {
    Temporary1 = b_p1;
    }
    
    result_33557144 = Temporary1;
    break BeforeRet;
  };

  return result_33557144;

}
            var scripts_553663980 = [{kind: 1, name: [99,104,101,115,115], code: makeNimstrLit("(block\x0A    (vec2 := (object-type ((x number) (y number))))\x0A    (Team := (enum-type \"white\" \"black\"))\x0A\x0A    (PieceKind := (enum-type \"pawn\" \"rook\" \"knight\" \"bishop\" \"queen\" \"king\"))\x0A    (piece := (object-type (\x0A        (kind PieceKind)\x0A        (pos vec2)\x0A        (team Team)\x0A        (did-pawn-move bool)\x0A    )))\x0A\x0A    (State := (object-type (\x0A        (board (table-type vec2 piece))\x0A        (current-team Team)\x0A        (turn number)\x0A    )))\x0A\x0A    (new-state := (\\ () State\x0A        (current-team := \"white\")\x0A        (turn := 0)\x0A        (board := (table))\x0A        (for y (1 .. 8)\x0A            (for x (1 .. 8)\x0A                (if (not (contains (quote (1 2 7 8)) x))\x0A                    (continue)\x0A                )\x0A                (pos := (vec2 ((x x) (y y))))\x0A                (kind := (case x\x0A                    ((2 7) \"pawn\")\x0A                    ((1 8)\x0A                        (case y\x0A                            (1 \"rook\")\x0A                            (2 \"knight\")\x0A                            (3 \"bishop\")\x0A                            (4 \"queen\")\x0A                            (5 \"king\")\x0A                            (6 \"bishop\")\x0A                            (7 \"knight\")\x0A                            (8 \"rook\")\x0A                        )\x0A                    ))\x0A                )\x0A                (did-pawn-move := false)\x0A                (team := (if ((x == 1) or (x == 2)) \"white\" \"black\"))\x0A                (piece := (piece (\x0A                    (kind kind)\x0A                    (pos pos) \x0A                    (team team)\x0A                    (did-pawn-move did-pawn-move)\x0A                )))\x0A                (table-set! board pos piece)\x0A            )\x0A        )\x0A        (State ((board board) (current-team current-team) (turn turn)))\x0A    ))\x0A\x0A    (piece-kind-char := (\\ ((kind PieceKind) (team Team)) string\x0A        (case team\x0A            (\"white\"\x0A                (case kind\x0A                    (\"pawn\" \"\xE2\x99\x99\")\x0A                    (\"rook\" \"\xE2\x99\x96\")\x0A                    (\"knight\" \"\xE2\x99\x98\")\x0A                    (\"bishop\" \"\xE2\x99\x97\")\x0A                    (\"queen\" \"\xE2\x99\x95\")\x0A                    (\"king\" \"\xE2\x99\x94\")\x0A                )\x0A            )\x0A            (\"black\"\x0A                (case kind\x0A                    (\"pawn\" \"\xE2\x99\x9F\")\x0A                    (\"rook\" \"\xE2\x99\x9C\")\x0A                    (\"knight\" \"\xE2\x99\x9E\")\x0A                    (\"bishop\" \"\xE2\x99\x9D\")\x0A                    (\"queen\" \"\xE2\x99\x9B\")\x0A                    (\"king\" \"\xE2\x99\x9A\")\x0A                )\x0A            )\x0A        )\x0A    ))\x0A \x0A    (state-as-str := (\\ ((state State)) string\x0A        (result := \"\")\x0A        (for y (1 .. 8)\x0A            (for x (1 .. 8)\x0A                (pos := (vec2 ((x x) (y y))))\x0A                (case (table-has-key state.board pos)\x0A                    (true\x0A                        (piece := (table-get state.board pos))\x0A                        (str-add result (piece-kind-char piece.kind piece.team))\x0A                    )\x0A                    (false\x0A                        (str-add result \".\")\x0A                    )\x0A                )\x0A                (str-add result \" \")\x0A            )\x0A            (str-add result \"\\n\") \x0A        )\x0A        result\x0A    ))\x0A\x0A    (state := (new-state))\x0A\x0A    (tmp := (state-as-str state))\x0A    (echo tmp)\x0A)")}, {kind: 0, name: [99,108,97,115,115,101,115], code: makeNimstrLit("(was-dog := false)\x0A\x0A(class Animal void\x0A    (field id number)\x0A\x0A    (method speak (\\ () void\x0A        (echo \"I am an animal\")\x0A        (was-dog = false)\x0A    ))\x0A)\x0A\x0A(class Dog Animal\x0A    (field name string)\x0A\x0A    (method speak (\\ () void\x0A        (echo \"I am a dog\")\x0A        (echo \"My name is:\")\x0A        (echo @name)\x0A        (was-dog = true)\x0A    ))\x0A)\x0A\x0A(class DumbDog Dog)\x0A\x0A(a := (Animal (id 1)))\x0A(d := (Dog (name \"Burek\") (id 2)))\x0A\x0A(a.id must-equal 1)\x0A(d.id must-equal 2)\x0A\x0A(a.speak)\x0A(was-dog must-equal false)\x0A(d.speak)\x0A(was-dog must-equal true)\x0A \x0A(a = d)\x0A\x0A(a.id must-equal 2)\x0A\x0A(was-dog = false)\x0A(a.speak)\x0A(was-dog must-equal true)\x0A\x0A(was-dog = false)\x0A(dd := (DumbDog (name \"Maks\") (id 3)))\x0A(dd.speak)\x0A(was-dog must-equal true)")}, {kind: 0, name: [99,111,114,101], code: makeNimstrLit("(block\x0A    (block\x0A        (vec2 := (object-type ((x number) (y number))))\x0A        (v := (vec2 ((x 10) (y 20))))\x0A        (v.x must-equal 10)\x0A        (v.y must-equal 20)\x0A        (person := (object-type ((name string) (pos vec2))))\x0A        (p := (person ((name \"John\") (pos v))))\x0A        (p.name must-equal \"John\")\x0A        (p.pos.x must-equal 10)\x0A        (p.pos.y must-equal 20)\x0A        (p.pos must-equal (vec2 ((x 10) (y 20))))\x0A    )\x0A\x0A    (block\x0A        (piece-kind := (enum-type \"pawn\" \"rook\" \"knight\" \"bishop\" \"queen\" \"king\"))\x0A        (x := (piece-kind \"pawn\"))\x0A        (x must-equal \"pawn\")\x0A        (did-raise := false)\x0A        \x0A        (block\x0A            (y := (piece-kind \"rook\"))\x0A            (y must-equal \"rook\")\x0A            (y = \"queen\")\x0A            (y must-equal \"queen\")\x0A        )\x0A        \x0A        (try\x0A            (x = \"xyz\")\x0A            (except\x0A                (did-raise = true)\x0A            )\x0A            (finally\x0A                (x = \"knight\")\x0A            )\x0A        )\x0A        (x must-equal \"knight\")\x0A        (did-raise must-equal true)\x0A    )\x0A\x0A    (block\x0A        (b := 2)\x0A        ((1 + b) must-equal 3)\x0A        (block\x0A            (b := 10)\x0A            ((1 + b) must-equal 11)\x0A        )\x0A        ((1 + b) must-equal 3)\x0A    )\x0A\x0A    (block\x0A        (cond := false)\x0A        ((if cond \"prawda\" \"falsz\") must-equal \"falsz\")\x0A    )\x0A\x0A    (block\x0A        (f := (\\ (a b) any (a + b)))\x0A        ((f 10 20) must-equal 30)\x0A        (((table (\"a\" \"A\") (\"b\" \"B\") (\"c\" \"C\")) \"b\") must-equal \"B\")\x0A    )\x0A\x0A    (block\x0A        (f := (\\ ((a number) (b number)) number (a + b)))\x0A        ((f 100 200) must-equal 300)\x0A    )\x0A\x0A    (block\x0A        (x := false)\x0A        (y := false)\x0A        (f := (\\ () void (x = true) (y = true))) ;; Function with multiple statements without an explicit block.\x0A        (f)\x0A        (x must-equal true)\x0A        (y must-equal true)\x0A    )\x0A)")}, {kind: 0, name: [104,101,108,108,111,45,119,111,114,108,100], code: [40,101,99,104,111,32,34,72,101,108,108,111,32,119,111,114,108,100,33,34,41]}, {kind: 0, name: [104,116,109,108], code: makeNimstrLit("(block\x0A    (self-closing-tags := (quote (\x0A        \"area\" \"base\" \"br\" \"col\" \"embed\" \"hr\" \"img\" \"input\" \"keygen\" \"link\" \"menuitem\" \"meta\" \"param\" \"source\" \"track\" \"wbr\"\x0A    )))\x0A\x0A    (build-html := (\\ (tree) any\x0A        ;; Build HTML from a tree made of nested lists.\x0A        \x0A        (result := \"\")\x0A        ;; HTML output is appended to this variable.\x0A\x0A        (indent := (- 1))\x0A        ;; We keep indentation for pretty formatting.\x0A\x0A        (helper := (\\ (l) any\x0A            ;; This function recursively travels the tree.\x0A            ;; This function won\'t be accessible from the outside of the build-html function.\x0A\x0A            (for _ (0 .. indent)\x0A                (str-add result \"  \")\x0A            )\x0A            ;; Padding for nested tags\x0A\x0A            (expect (is-list l) true)\x0A            (expect (len l) 3)\x0A            ;; Every tag is a list with name, attributes and body.\x0A\x0A            (tag := (to-str (l 0)))\x0A            (attributes := (l 1))\x0A            (body := (l 2))\x0A\x0A            (str-add result \"<\" tag)\x0A\x0A            (if (not (empty? attributes))\x0A                (str-add result \" \")\x0A            )\x0A            ;; Separator between tag and attributes.\x0A\x0A            (for (idx el) attributes\x0A                (expect (is-list el) true)\x0A                (expect (len el) 2)\x0A                \x0A                (field-name := (el 0))\x0A                (field-val := (el 1))\x0A                \x0A                (str-add result\x0A                (to-str field-name)\x0A                \"=\\\"\"\x0A                (to-str field-val)\x0A                \"\\\"\"\x0A                )\x0A\x0A                ;; (echo idx)\x0A                ;; (echo (high attributes))\x0A                ;; (echo (!= idx (high attributes)))\x0A                ;; (echo (= idx (high attributes)))\x0A                ;; (echo (not (= idx (high attributes))))\x0A                (if (!= idx (high attributes))\x0A                    (str-add result \" \")\x0A                )\x0A                ;; Separator between attributes.\x0A            ) \x0A            ;; Appending attributes.\x0A\x0A            (str-add result \">\")\x0A            ;; Closing the bracket pair.\x0A\x0A            (if (is-list body)\x0A                ;; If body is a list, then it\'s a nested tag.\x0A                \x0A                (if (not (empty? body))\x0A                ;; We only process it if it\'s not empty.\x0A                \x0A                (block\x0A                    (str-add result \"\\n\")\x0A                    \x0A                    (for el body\x0A                    ;; (for _ (range 0 indent)\x0A                    ;;   (str-add result \"  \")\x0A                    ;; )\x0A\x0A                        (indent += 1)\x0A\x0A                        (helper el)\x0A                        (str-add result \"\\n\")\x0A\x0A                        (indent -= 1)\x0A                    )\x0A                )\x0A                )\x0A                (block\x0A                    (expect (is-str body) true) \x0A                    ;; Expecting text content for the tag.\x0A\x0A                    (str-add result \"\\n\")\x0A                    (for _ (0 .. (indent + 1))\x0A                        (str-add result \"  \")\x0A                    )\x0A                    (str-add result body)\x0A                    (str-add result \"\\n\")\x0A                )\x0A            )\x0A\x0A            (if (not (contains self-closing-tags tag))\x0A                ;; Close the opened tag.\x0A                ;; (Some tags should\'t be closed.)\x0A                \x0A                (block\x0A                    (for _ (0 .. indent)\x0A                        (str-add result \"  \")\x0A                    )\x0A                    (str-add result \"</\")\x0A                    (str-add result tag)\x0A                    (str-add result \">\")\x0A                )\x0A\x0A                (block\x0A                    (expect (empty? body) true) ;; If it\'s a self-closing tag, then it shouldn\'t have a body.\x0A                )\x0A            )\x0A        ))\x0A\x0A        (helper tree)\x0A        \x0A        result\x0A    ))\x0A\x0A    (html :=\x0A      (build-html\x0A        (quote\x0A          (\"div\" ((\"css\" \"bg-red-500 w-full\") (\"style\" \"opacity: 0.5\")) (\x0A            (\"input\" ((\"type\" \"text\") (\"name\" \"username\")) ())\x0A            (\"input\" ((\"type\" \"password\") (\"name\" \"password\")) ())\x0A            (\"div\" () (\x0A              (\"div\" () \"text\")\x0A            ))\x0A          ))\x0A        )\x0A      )\x0A    )\x0A\x0A    (expected-html := \"<div css=\\\"bg-red-500 w-full\\\" style=\\\"opacity: 0.5\\\">\\n  <input type=\\\"text\\\" name=\\\"username\\\">\\n  <input type=\\\"password\\\" name=\\\"password\\\">\\n  <div>\\n    <div>\\n      text\\n    </div>\\n  </div>\\n</div>\")\x0A\x0A    (html must-equal expected-html)\x0A)")}, {kind: 0, name: [109,97,99,114,111,115], code: makeNimstrLit("(block\x0A    (block\x0A        (unless := (template (cond body)\x0A            (if (not ^unquote cond)\x0A                (block\x0A                    ^unquote-splicing body\x0A                )\x0A            )\x0A        ))\x0A\x0A        (x := false)\x0A        (y := false)\x0A        (counter := 0)\x0A\x0A        (unless true ((y = true) (counter += 1)))\x0A        (unless false ((x = true) (counter += 1)))\x0A\x0A        (counter must-equal 1)\x0A        (y must-equal false)\x0A        (x must-equal true)\x0A    )\x0A\x0A    (block\x0A        ;; (:= reverse-expr (macro (input)\x0A        ;;     (:= result (quote ()))\x0A        ;;     (:= i (high input))\x0A        ;;     (while (>= i 0)\x0A        ;;         (block\x0A        ;;             (add result (reverse-expr (input i)))\x0A        ;;             (i -= 1)\x0A        ;;         )\x0A        ;;     )\x0A        ;; ))\x0A\x0A        ;; TODO: need a macro magic that will automatically 1) quote input 2) evaluate output before returning it\x0A        (reverse-expr := (\\ (input) any\x0A            (helper := (\\ (input) any\x0A                (if (not (is-list input))\x0A                    (return input)\x0A                )\x0A\x0A                (result := (quote ()))\x0A                ;; (echo result)\x0A                (i := (high input))\x0A                (while (i >= 0)\x0A                    (add result (helper (input i)))\x0A                    (i -= 1)\x0A                )\x0A                result\x0A            ))\x0A\x0A            (result := (helper input))\x0A\x0A            (eval result)\x0A        ))\x0A\x0A        ((reverse-expr (quote (1 2 3 4 5 +))) must-equal 15)\x0A        ((reverse-expr (quote (1 2 3 4 5 +))) must-equal 15)\x0A    )\x0A)")}];

function eqStrings(a_p0, b_p1) {
        if (a_p0 == b_p1) return true;
    if (a_p0 === null && b_p1.length == 0) return true;
    if (b_p1 === null && a_p0.length == 0) return true;
    if ((!a_p0) || (!b_p1)) return false;
    var alen = a_p0.length;
    if (alen != b_p1.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_p0[i] != b_p1[i]) return false;
    return true;
  

  
}

function reprEnum(e_p0, typ_p1) {
  var result_33557626 = [];

  var F = {procname: "system.reprEnum", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "reprjs.nim";
    var tmp_33557627 = false;
    F.line = 31;
    var item_33557628 = typ_p1.node.sons[e_p0];
    F.line = 32;
    tmp_33557627 = item_33557628 !== undefined;
    if (tmp_33557627) {
    F.line = 34;
    result_33557626 = nimCopy(null, makeNimstrLit(item_33557628.name), NTI33554449);
    }
    else {
      F.line = 36;
      result_33557626 = nimCopy(null, (HEX24__systemZdollars_u8(e_p0)).concat([32,40,105,110,118,97,108,105,100,32,100,97,116,97,33,41]), NTI33554449);
    }
    
  framePtr = F.prev;

  return result_33557626;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet6 = setConstr();

function addChar(x_p0, c_p1) {
    x_p0.push(c_p1);

  
}
var ConstSet7 = setConstr(12);

function raiseFieldError2(f_p0, discVal_p1) {
    raiseException({message: (f_p0).concat(discVal_p1,[39]), parent: null, m_type: NTI134217750, name: null, trace: [], up: null}, "FieldDefect");

  
}

function nimBoolToStr(x_p0) {
  var result_33556445 = [];

    if (x_p0) {
    result_33556445 = nimCopy(null, [116,114,117,101], NTI33554449);
    }
    else {
      result_33556445 = nimCopy(null, [102,97,108,115,101], NTI33554449);
    }
    

  return result_33556445;

}

function reprDiscriminant(e_p0, typ_p1) {
    var Temporary1;

  var result_33557664 = [];

  var F = {procname: "system.reprDiscriminant", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/repr_impl.nim", line: 0};
  framePtr = F;
    F.line = 12;
    F.filename = "repr_impl.nim";
    F.line = 12;
    switch (typ_p1.kind) {
    case 14:
      Temporary1 = reprEnum(e_p0, typ_p1);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_p0 == 0)));
      break;
    default: 
      Temporary1 = HEX24__systemZdollars_u8(e_p0);
      break;
    }
    result_33557664 = nimCopy(null, Temporary1, NTI33554449);
  framePtr = F.prev;

  return result_33557664;

}

function SetCard(a_p0) {
        var result = 0;
    for (var elem in a_p0) { ++result; }
    return result;
  

  
}
var ConstSet8 = setConstr();
var ConstSet9 = setConstr(1);
var ConstSet10 = setConstr();
var ConstSet11 = setConstr(1);
var ConstSet12 = setConstr();
var ConstSet13 = setConstr(1);
var ConstSet14 = setConstr(9);
var ConstSet15 = setConstr(9);
var ConstSet16 = setConstr(9);
var ConstSet17 = setConstr(8);
var ConstSet18 = setConstr();
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr(7);
var ConstSet21 = setConstr();
var ConstSet22 = setConstr(1);
var ConstSet23 = setConstr();
var ConstSet24 = setConstr(1);
var ConstSet25 = setConstr(0);
var ConstSet26 = setConstr();
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(1);
var ConstSet29 = setConstr();
var ConstSet30 = setConstr(1);
var ConstSet31 = setConstr(2);
var ConstSet32 = setConstr();
var ConstSet33 = setConstr(1);
var ConstSet34 = setConstr(5);
var ConstSet35 = setConstr();
var ConstSet36 = setConstr(1);
var ConstSet37 = setConstr(6);
var ConstSet38 = setConstr();
var ConstSet39 = setConstr(1);
var ConstSet40 = setConstr(1);
var ConstSet41 = setConstr(1);
var ConstSet42 = setConstr(1);
var ConstSet43 = setConstr(12, 2, 10, 4, 29, 26, 30, 20, 34, 35, 16, 39, 41, 40, 42);
var ConstSet44 = setConstr(3);
var ConstSet45 = setConstr(1);
var ConstSet46 = setConstr(1);
var ConstSet47 = setConstr(12, 2, 10, 4, 29, 26, 30, 20, 34, 35, 16, 39, 41, 40, 42);
var ConstSet48 = setConstr(3);
var ConstSet49 = setConstr(1);
var ConstSet50 = setConstr(1);
var ConstSet51 = setConstr(1);
var ConstSet52 = setConstr(1);
var ConstSet53 = setConstr(1);
var ConstSet54 = setConstr(13, 10);
var ConstSet55 = setConstr(33, [37, 38], [42, 43], [45, 58], [60, 90], 92, [94, 95], [97, 122], 124, 126);
var ConstSet56 = setConstr(33, [37, 38], [42, 43], [45, 58], [60, 90], 92, [94, 95], [97, 122], 124, 126);
              var tags_553653954 = [[117,110,113,117,111,116,101], [117,110,113,117,111,116,101,45,115,112,108,105,99,105,110,103]];
var ConstSet57 = setConstr([65, 90]);
var ConstSet58 = setConstr(34, 92);

function nimCharToStr(x_p0) {
  var result_33556448 = [];

    result_33556448 = nimCopy(null, mnewString(1), NTI33554449);
    result_33556448[0] = x_p0;

  return result_33556448;

}
var ConstSet59 = setConstr(46, [48, 57]);
var ConstSet60 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet61 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet62 = setConstr([48, 57]);
var ConstSet63 = setConstr([48, 57]);
var ConstSet64 = setConstr(101, 69);
var ConstSet65 = setConstr([48, 57]);
var ConstSet66 = setConstr([48, 57]);

function nimParseBiggestFloat(s_p0, number_p1, number_p1_Idx) {
    var Temporary1;

  var result_33557484 = 0;

  var F = {procname: "system.nimParseBiggestFloat", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/jssys.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 705;
    F.filename = "jssys.nim";
    var sign_33557485 = false;
    F.line = 706;
    var i_33557486 = 0;
    if ((s_p0[i_33557486] == 43)) {
    F.line = 707;
    i_33557486 += 1;
    }
    else {
    if ((s_p0[i_33557486] == 45)) {
    F.line = 709;
    sign_33557485 = true;
    F.line = 710;
    i_33557486 += 1;
    }
    }
    if (((s_p0[i_33557486] == 78) || (s_p0[i_33557486] == 110))) {
    if (((s_p0[(i_33557486 + 1)] == 65) || (s_p0[(i_33557486 + 1)] == 97))) {
    if (((s_p0[(i_33557486 + 2)] == 78) || (s_p0[(i_33557486 + 2)] == 110))) {
    if (!((ConstSet60[s_p0[(i_33557486 + 3)]] != undefined))) {
    F.line = 715;
    number_p1[number_p1_Idx] = NaN;
    F.line = 716;
    result_33557484 = (i_33557486 + 3);
    break BeforeRet;
    }
    
    }
    
    }
    
    F.line = 717;
    result_33557484 = 0;
    break BeforeRet;
    }
    
    if (((s_p0[i_33557486] == 73) || (s_p0[i_33557486] == 105))) {
    if (((s_p0[(i_33557486 + 1)] == 78) || (s_p0[(i_33557486 + 1)] == 110))) {
    if (((s_p0[(i_33557486 + 2)] == 70) || (s_p0[(i_33557486 + 2)] == 102))) {
    if (!((ConstSet61[s_p0[(i_33557486 + 3)]] != undefined))) {
    F.line = 722;
    if (sign_33557485) {
    Temporary1 = -Infinity;
    }
    else {
    Temporary1 = Infinity;
    }
    
    number_p1[number_p1_Idx] = Temporary1;
    F.line = 723;
    result_33557484 = (i_33557486 + 3);
    break BeforeRet;
    }
    
    }
    
    }
    
    F.line = 724;
    result_33557484 = 0;
    break BeforeRet;
    }
    
    F.line = 726;
    var buf_33557505 = [];
    if (sign_33557485) {
    F.line = 729;
    addChar(buf_33557505, 45);;
    }
    
    Label2: {
      F.line = 735;
        Label3: while (true) {
        if (!(ConstSet62[s_p0[i_33557486]] != undefined)) break Label3;
          F.line = 736;
          addChar(buf_33557505, s_p0[i_33557486]);;
          F.line = 737;
          i_33557486 += 1;
          Label4: {
            F.line = 738;
              Label5: while (true) {
              if (!(s_p0[i_33557486] == 95)) break Label5;
                F.line = 734;
                i_33557486 += 1;
              }
          };
        }
    };
    if ((s_p0[i_33557486] == 46)) {
    F.line = 731;
    addChar(buf_33557505, s_p0[i_33557486]);;
    F.line = 740;
    i_33557486 += 1;
    Label6: {
      F.line = 741;
        Label7: while (true) {
        if (!(ConstSet63[s_p0[i_33557486]] != undefined)) break Label7;
          F.line = 731;
          addChar(buf_33557505, s_p0[i_33557486]);;
          F.line = 742;
          i_33557486 += 1;
          Label8: {
            F.line = 743;
              Label9: while (true) {
              if (!(s_p0[i_33557486] == 95)) break Label9;
                F.line = 734;
                i_33557486 += 1;
              }
          };
        }
    };
    }
    
    if (((buf_33557505).length == (sign_33557485 ? 1 : 0))) {
    F.line = 745;
    result_33557484 = 0;
    break BeforeRet;
    }
    
    if ((ConstSet64[s_p0[i_33557486]] != undefined)) {
    F.line = 731;
    addChar(buf_33557505, s_p0[i_33557486]);;
    F.line = 747;
    i_33557486 += 1;
    if ((s_p0[i_33557486] == 43)) {
    F.line = 748;
    i_33557486 += 1;
    }
    else {
    if ((s_p0[i_33557486] == 45)) {
    F.line = 731;
    addChar(buf_33557505, s_p0[i_33557486]);;
    F.line = 749;
    i_33557486 += 1;
    }
    }
    if (!((ConstSet65[s_p0[i_33557486]] != undefined))) {
    F.line = 750;
    result_33557484 = 0;
    break BeforeRet;
    }
    
    Label10: {
      F.line = 751;
        Label11: while (true) {
        if (!(ConstSet66[s_p0[i_33557486]] != undefined)) break Label11;
          F.line = 731;
          addChar(buf_33557505, s_p0[i_33557486]);;
          F.line = 752;
          i_33557486 += 1;
          Label12: {
            F.line = 753;
              Label13: while (true) {
              if (!(s_p0[i_33557486] == 95)) break Label13;
                F.line = 734;
                i_33557486 += 1;
              }
          };
        }
    };
    }
    
    F.line = 754;
    number_p1[number_p1_Idx] = parseFloatNative__system_u3030(buf_33557505);
    F.line = 755;
    result_33557484 = i_33557486;
  };
  framePtr = F.prev;

  return result_33557484;

}
var ConstSet67 = setConstr(33, [37, 38], [42, 43], [45, 58], [60, 90], 92, [94, 95], [97, 122], 124, 126);
var ConstSet68 = setConstr(33, [37, 38], [42, 43], [45, 58], [60, 90], 92, [94, 95], [97, 122], 124, 126);
              var atomicTypes_553653804 = [[110,117,109,98,101,114], [115,116,114,105,110,103], [98,111,111,108]];
              var keywords_553653733 = [[113,117,111,116,101], [101,118,97,108], [58,61], [105,102], [43], [92], [101,99,104,111], [114,101,112,114], [98,108,111,99,107], [116,97,98,108,101], [109,117,115,116,45,101,113,117,97,108], [111,98,106,101,99,116,45,116,121,112,101], [61], [115,116,114,45,97,100,100], [104,105,103,104], [108,111,119], [46,46], [101,120,112,101,99,116], [116,111,45,115,116,114], [105,115,45,108,105,115,116], [61,61], [33,61], [110,111,116], [101,109,112,116,121,63], [97,114,114,97,121,45,103,101,116], [102,105,108,116,101,114,45,97,114,114,97,121], [45], [102,111,114], [108,101,110], [43,61], [45,61], [105,115,45,115,116,114], [99,108,97,115,115], [114,101,116,117,114,110], [111,114], [97,110,100], [99,111,110,116,97,105,110,115], [116,101,109,112,108,97,116,101], [119,104,105,108,101], [60,61], [62,61], [60], [62], [97,100,100], [101,110,117,109,45,116,121,112,101], [116,114,121], [101,120,99,101,112,116], [102,105,110,97,108,108,121], [116,97,98,108,101,45,116,121,112,101], [97,114,114,97,121,45,116,121,112,101], [99,97,115,101], [116,97,98,108,101,45,115,101,116,33], [116,97,98,108,101,45,103,101,116], [116,97,98,108,101,45,104,97,115,45,107,101,121], [99,111,110,116,105,110,117,101], [98,114,101,97,107], [106,111,105,110,45,108,105,115,116,115]];

function mulInt(a_p0, b_p1) {
        var result = a_p0 * b_p1;
    checkOverflowInt(result);
    return result;
  

  
}

function divInt(a_p0, b_p1) {
        if (b_p1 == 0) raiseDivByZero();
    if (b_p1 == -1 && a_p0 == 2147483647) raiseOverflow();
    return Math.trunc(a_p0 / b_p1);
  

  
}
var ConstSet69 = setConstr(18);
var ConstSet70 = setConstr(19);
var ConstSet71 = setConstr(19);
var ConstSet72 = setConstr(10);

function nimMax(a_p0, b_p1) {
    var Temporary1;

  var result_33557148 = 0;

  BeforeRet: {
    if ((b_p1 <= a_p0)) {
    Temporary1 = a_p0;
    }
    else {
    Temporary1 = b_p1;
    }
    
    result_33557148 = Temporary1;
    break BeforeRet;
  };

  return result_33557148;

}
var ConstSet73 = setConstr(0);
var ConstSet74 = setConstr(0);
var ConstSet75 = setConstr(0);
var ConstSet76 = setConstr(0);
var ConstSet77 = setConstr(8);
var ConstSet78 = setConstr(18);
var ConstSet79 = setConstr(18);

function reprAny(p_p0, p_p0_Idx, typ_p1) {
  var result_33557816 = [[]];

  var F = {procname: "system.reprAny", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 247;
    F.filename = "reprjs.nim";
    var cl_33557817 = [({recDepth: 0, indent: 0})];
    F.line = 248;
    initReprClosure__system_u3290(cl_33557817[0]);
    F.line = 249;
    reprAux__system_u3292(result_33557816, 0, p_p0, p_p0_Idx, typ_p1, cl_33557817[0]);
  framePtr = F.prev;

  return result_33557816[0];

}
var ConstSet80 = setConstr(3);
var ConstSet81 = setConstr(3);
var ConstSet82 = setConstr(1);
var ConstSet83 = setConstr(1);
var ConstSet84 = setConstr(19);
var ConstSet85 = setConstr(17);
var ConstSet86 = setConstr(17);
var ConstSet87 = setConstr(17);
var ConstSet88 = setConstr(17);
var ConstSet89 = setConstr(17);
var ConstSet90 = setConstr(18);
var ConstSet91 = setConstr(18);
var ConstSet92 = setConstr(18);
var ConstSet93 = setConstr(18);
var ConstSet94 = setConstr(10);
var ConstSet95 = setConstr(3);
var ConstSet96 = setConstr(9);
var ConstSet97 = setConstr(9);
var ConstSet98 = setConstr(0);
var ConstSet99 = setConstr(1);
var ConstSet100 = setConstr(2);
var ConstSet101 = setConstr(0);
var ConstSet102 = setConstr(5);
var ConstSet103 = setConstr(1);
var ConstSet104 = setConstr(1);
var ConstSet105 = setConstr(1);
var ConstSet106 = setConstr(4);
var ConstSet107 = setConstr(4);
var ConstSet108 = setConstr(4);
var ConstSet109 = setConstr(2);
var ConstSet110 = setConstr(2);
var ConstSet111 = setConstr(2);
var ConstSet112 = setConstr(2);
var ConstSet113 = setConstr(2);
var ConstSet114 = setConstr(2);
var ConstSet115 = setConstr(2);
var ConstSet116 = setConstr(2);
var ConstSet117 = setConstr(11);
var ConstSet118 = setConstr(11);
var ConstSet119 = setConstr(11);
var ConstSet120 = setConstr(6);
var ConstSet121 = setConstr(8);
var ConstSet122 = setConstr(8);
var ConstSet123 = setConstr(8);
var ConstSet124 = setConstr(7);
var ConstSet125 = setConstr(12);
var ConstSet126 = setConstr(12);
var ConstSet127 = setConstr(12);
var ConstSet128 = setConstr(12);
var ConstSet129 = setConstr(13);
var ConstSet130 = setConstr(13);
var ConstSet131 = setConstr(4);
var ConstSet132 = setConstr(4);
var ConstSet133 = setConstr(5);
var ConstSet134 = setConstr(5);
var ConstSet135 = setConstr(9);
var ConstSet136 = setConstr(9);
var ConstSet137 = setConstr(9);
var ConstSet138 = setConstr(0);
var ConstSet139 = setConstr(0);
var ConstSet140 = setConstr(1);
var ConstSet141 = setConstr(1);
var ConstSet142 = setConstr(2);
var ConstSet143 = setConstr(2);
var ConstSet144 = setConstr(6);
var ConstSet145 = setConstr(6);
var ConstSet146 = setConstr(8);
var ConstSet147 = setConstr(8);
var ConstSet148 = setConstr(7);
var ConstSet149 = setConstr(7);
var ConstSet150 = setConstr(12);
var ConstSet151 = setConstr(12);
var ConstSet152 = setConstr(12);
var ConstSet153 = setConstr(12);
var ConstSet154 = setConstr(13);
var ConstSet155 = setConstr(13);
var ConstSet156 = setConstr(19);
var ConstSet157 = setConstr(17);
var ConstSet158 = setConstr(17);
var ConstSet159 = setConstr(17);
var ConstSet160 = setConstr(17);
var ConstSet161 = setConstr(17);
var ConstSet162 = setConstr(18);
var ConstSet163 = setConstr(18);
var ConstSet164 = setConstr(5);
var ConstSet165 = setConstr(0);
var ConstSet166 = setConstr(3);
var ConstSet167 = setConstr(10);
var ConstSet168 = setConstr(12);
var ConstSet169 = setConstr(12);
var ConstSet170 = setConstr(13);
var ConstSet171 = setConstr(7);
var ConstSet172 = setConstr(9);
var ConstSet173 = setConstr(0);
var ConstSet174 = setConstr(1);
var ConstSet175 = setConstr(2);
var ConstSet176 = setConstr(8);
var ConstSet177 = setConstr(6);
var ConstSet178 = setConstr(4);
var ConstSet179 = setConstr(1);
var ConstSet180 = setConstr(10);
var ConstSet181 = setConstr(1);
var ConstSet182 = setConstr(1);
var ConstSet183 = setConstr(1);
var ConstSet184 = setConstr(1);
var ConstSet185 = setConstr(19);
var ConstSet186 = setConstr(17);
var ConstSet187 = setConstr(17);
var ConstSet188 = setConstr(17);
var ConstSet189 = setConstr(17);
var ConstSet190 = setConstr(17);
var ConstSet191 = setConstr(18);
var ConstSet192 = setConstr(18);
var ConstSet193 = setConstr(18);
var ConstSet194 = setConstr(18);
var ConstSet195 = setConstr(10);
var ConstSet196 = setConstr(3);
var ConstSet197 = setConstr(9);
var ConstSet198 = setConstr(9);
var ConstSet199 = setConstr(0);
var ConstSet200 = setConstr(1);
var ConstSet201 = setConstr(2);
var ConstSet202 = setConstr(0);
var ConstSet203 = setConstr(5);
var ConstSet204 = setConstr(1);
var ConstSet205 = setConstr(1);
var ConstSet206 = setConstr(1);
var ConstSet207 = setConstr(4);
var ConstSet208 = setConstr(4);
var ConstSet209 = setConstr(4);
var ConstSet210 = setConstr(2);
var ConstSet211 = setConstr(2);
var ConstSet212 = setConstr(2);
var ConstSet213 = setConstr(2);
var ConstSet214 = setConstr(2);
var ConstSet215 = setConstr(2);
var ConstSet216 = setConstr(2);
var ConstSet217 = setConstr(2);
var ConstSet218 = setConstr(11);
var ConstSet219 = setConstr(11);
var ConstSet220 = setConstr(11);
var ConstSet221 = setConstr(6);
var ConstSet222 = setConstr(8);
var ConstSet223 = setConstr(8);
var ConstSet224 = setConstr(8);
var ConstSet225 = setConstr(7);
var ConstSet226 = setConstr(12);
var ConstSet227 = setConstr(12);
var ConstSet228 = setConstr(12);
var ConstSet229 = setConstr(12);
var ConstSet230 = setConstr(13);
var ConstSet231 = setConstr(13);
var ConstSet232 = setConstr(7);
var ConstSet233 = setConstr(7);
var ConstSet234 = setConstr(1);
var ConstSet235 = setConstr(1);
var ConstSet236 = setConstr(9);
var ConstSet237 = setConstr(9);
var ConstSet238 = setConstr(0);
var ConstSet239 = setConstr(1);
var ConstSet240 = setConstr(0);
var ConstSet241 = setConstr(17);
var ConstSet242 = setConstr(17);
var ConstSet243 = setConstr(17);
var ConstSet244 = setConstr(17);
var ConstSet245 = setConstr(1);
var ConstSet246 = setConstr(1);
var ConstSet247 = setConstr(0);
var ConstSet248 = setConstr(0);
var ConstSet249 = setConstr(18);
var ConstSet250 = setConstr(0);
var ConstSet251 = setConstr(0);
var ConstSet252 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet253 = setConstr(17, 18);
var ConstSet254 = setConstr(17, 18);
var ConstSet255 = setConstr(18);
var ConstSet256 = setConstr(18);
var ConstSet257 = setConstr(17);
var ConstSet258 = setConstr(17);
var ConstSet259 = setConstr(7);
var ConstSet260 = setConstr(4);
var ConstSet261 = setConstr(12);
var ConstSet262 = setConstr(12);
var ConstSet263 = setConstr(1);
var ConstSet264 = setConstr(13);
var ConstSet265 = setConstr(1);
var ConstSet266 = setConstr(9);
var ConstSet267 = setConstr(8);
var ConstSet268 = setConstr(1);
var ConstSet269 = setConstr(4);
var ConstSet270 = setConstr(18);
var ConstSet271 = setConstr(0);
var ConstSet272 = setConstr(18);
var ConstSet273 = setConstr(0);
var ConstSet274 = setConstr(18);
var ConstSet275 = setConstr(18);
var ConstSet276 = setConstr(17);
var ConstSet277 = setConstr(18);
var ConstSet278 = setConstr(19);
var ConstSet279 = setConstr(18);
var ConstSet280 = setConstr(18);
var ConstSet281 = setConstr(18);
var ConstSet282 = setConstr(18);
var ConstSet283 = setConstr(18);
var ConstSet284 = setConstr(12);
var ConstSet285 = setConstr(12);
var ConstSet286 = setConstr(13);
var ConstSet287 = setConstr(7);
var ConstSet288 = setConstr(7);
var ConstSet289 = setConstr(0);
var ConstSet290 = setConstr(3);
var ConstSet291 = setConstr(10);
var ConstSet292 = setConstr(5);
var ConstSet293 = setConstr(9);
var ConstSet294 = setConstr(9);
var ConstSet295 = setConstr(0);
var ConstSet296 = setConstr(0);
var ConstSet297 = setConstr(1);
var ConstSet298 = setConstr(1);
var ConstSet299 = setConstr(2);
var ConstSet300 = setConstr(2);
var ConstSet301 = setConstr(1);
var ConstSet302 = setConstr(1);
var ConstSet303 = setConstr(4);
var ConstSet304 = setConstr(4);
var ConstSet305 = setConstr(2);
var ConstSet306 = setConstr(2);
var ConstSet307 = setConstr(2);
var ConstSet308 = setConstr(2);
var ConstSet309 = setConstr(2);
var ConstSet310 = setConstr(2);
var ConstSet311 = setConstr(2);
var ConstSet312 = setConstr(2);
var ConstSet313 = setConstr(2);
var ConstSet314 = setConstr(2);
var ConstSet315 = setConstr(2);
var ConstSet316 = setConstr(11);
var ConstSet317 = setConstr(11);
var ConstSet318 = setConstr(11);
var ConstSet319 = setConstr(11);
var ConstSet320 = setConstr(6);
var ConstSet321 = setConstr(6);
var ConstSet322 = setConstr(8);
var ConstSet323 = setConstr(8);
var ConstSet324 = setConstr(8);
var ConstSet325 = setConstr(8);
var ConstSet326 = setConstr(17);
var ConstSet327 = setConstr(2);
var ConstSet328 = setConstr(18);
var ConstSet329 = setConstr(17);
var ConstSet330 = setConstr(1);
var ConstSet331 = setConstr(1);
var ConstSet332 = setConstr(1);
var ConstSet333 = setConstr(8);
var ConstSet334 = setConstr(0);
var ConstSet335 = setConstr(0);
var ConstSet336 = setConstr(6);
var ConstSet337 = setConstr(0);
var ConstSet338 = setConstr(0);
var ConstSet339 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet340 = setConstr(1);
var ConstSet341 = setConstr(1);
var ConstSet342 = setConstr(1);
var ConstSet343 = setConstr(4);
var ConstSet344 = setConstr(18);
var ConstSet345 = setConstr(18);
var ConstSet346 = setConstr(1);
var ConstSet347 = setConstr(1);
var ConstSet348 = setConstr(0);
var ConstSet349 = setConstr(8);
var ConstSet350 = setConstr(0);
var ConstSet351 = setConstr(6);
var ConstSet352 = setConstr(8);
var ConstSet353 = setConstr(1);
var ConstSet354 = setConstr(4);
var ConstSet355 = setConstr(1);
var ConstSet356 = setConstr(1);
var ConstSet357 = setConstr(1);
var ConstSet358 = setConstr(3);
var ConstSet359 = setConstr(1);
var ConstSet360 = setConstr(12);
var ConstSet361 = setConstr(4);
var ConstSet362 = setConstr(4);
var ConstSet363 = setConstr(12);
var ConstSet364 = setConstr(4);
var ConstSet365 = setConstr(4);
var ConstSet366 = setConstr(12);
var ConstSet367 = setConstr(4);
var ConstSet368 = setConstr(12);
var ConstSet369 = setConstr(4);
var ConstSet370 = setConstr(4);
var ConstSet371 = setConstr(1);
var ConstSet372 = setConstr(1);
var ConstSet373 = setConstr(1);
var ConstSet374 = setConstr(1);
var ConstSet375 = setConstr(1);
var ConstSet376 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet377 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet378 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet379 = setConstr(7);
var ConstSet380 = setConstr(1);
var ConstSet381 = setConstr(3);
var ConstSet382 = setConstr(1);
var ConstSet383 = setConstr(1);
var ConstSet384 = setConstr(1);

function isObj(obj_p0, subclass_p1) {
  var result_33557434 = false;

  BeforeRet: {
    var x_33557435 = obj_p0;
    if ((x_33557435 == subclass_p1)) {
    result_33557434 = true;
    break BeforeRet;
    }
    
    Label1: {
        Label2: while (true) {
        if (!!((x_33557435 == subclass_p1))) break Label2;
          if ((x_33557435 == null)) {
          result_33557434 = false;
          break BeforeRet;
          }
          
          x_33557435 = x_33557435.base;
        }
    };
    result_33557434 = true;
    break BeforeRet;
  };

  return result_33557434;

}

function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: [110,111,32,101,120,99,101,112,116,105,111,110,32,116,111,32,114,101,114,97,105,115,101], parent: null, m_type: NTI134217753, name: null, trace: [], up: null}, "ReraiseDefect");
    }
    else {
      if ((excHandler == 0)) {
      if (isNimException__system_u2017()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}
var ConstSet385 = setConstr(1);
var ConstSet386 = setConstr(1);
var ConstSet387 = setConstr(1);
var ConstSet388 = setConstr(9);
var ConstSet389 = setConstr(9);
var ConstSet390 = setConstr(9);
var ConstSet391 = setConstr(9);
var ConstSet392 = setConstr(0);
var ConstSet393 = setConstr(0);
var ConstSet394 = setConstr(9);
var ConstSet395 = setConstr(9);
var ConstSet396 = setConstr(9);
var ConstSet397 = setConstr(9);
var ConstSet398 = setConstr(0);
var ConstSet399 = setConstr(0);
var ConstSet400 = setConstr(9);
var ConstSet401 = setConstr(9);
var ConstSet402 = setConstr(9);
var ConstSet403 = setConstr(9);
var ConstSet404 = setConstr(0);
var ConstSet405 = setConstr(0);
var ConstSet406 = setConstr(9);
var ConstSet407 = setConstr(9);
var ConstSet408 = setConstr(9);
var ConstSet409 = setConstr(9);
var ConstSet410 = setConstr(0);
var ConstSet411 = setConstr(0);
var ConstSet412 = setConstr(9);
var ConstSet413 = setConstr(9);
var ConstSet414 = setConstr(2);
var ConstSet415 = setConstr(1);
var ConstSet416 = setConstr(1);
var ConstSet417 = setConstr(0);
var ConstSet418 = setConstr(1);
var ConstSet419 = setConstr(1);
var ConstSet420 = setConstr(1);
var ConstSet421 = setConstr(0);
var ConstSet422 = setConstr(0);
var ConstSet423 = setConstr(1);
var ConstSet424 = setConstr(9);
var ConstSet425 = setConstr(1);
var ConstSet426 = setConstr(9);
var ConstSet427 = setConstr(9);
var ConstSet428 = setConstr(2);
var ConstSet429 = setConstr(9);
var ConstSet430 = setConstr(9);
var ConstSet431 = setConstr(9);
var ConstSet432 = setConstr(9);
var ConstSet433 = setConstr(0);
var ConstSet434 = setConstr(0);
var ConstSet435 = setConstr(9);
var ConstSet436 = setConstr(9);
var ConstSet437 = setConstr(9);
var ConstSet438 = setConstr(9);
var ConstSet439 = setConstr(0);
var ConstSet440 = setConstr(0);
var ConstSet441 = setConstr(2);
var ConstSet442 = setConstr(2);
var ConstSet443 = setConstr(0, 1);
var ConstSet444 = setConstr(1);
var ConstSet445 = setConstr(1);
var ConstSet446 = setConstr(0);
var ConstSet447 = setConstr(0);
var ConstSet448 = setConstr(1);
var ConstSet449 = setConstr(9);
var ConstSet450 = setConstr(9);
var ConstSet451 = setConstr(9);
var ConstSet452 = setConstr(9);
var ConstSet453 = setConstr(1);
var ConstSet454 = setConstr(1);
var ConstSet455 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet456 = setConstr(0);
var ConstSet457 = setConstr(0);
var ConstSet458 = setConstr(1);
var ConstSet459 = setConstr(17);
var ConstSet460 = setConstr(0);
var ConstSet461 = setConstr(0);
var ConstSet462 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet463 = setConstr(17);
var ConstSet464 = setConstr(0);
var ConstSet465 = setConstr(1);
var ConstSet466 = setConstr(17);
var ConstSet467 = setConstr(0);
var ConstSet468 = setConstr(0);
var ConstSet469 = setConstr(17);
var ConstSet470 = setConstr(0);
var ConstSet471 = setConstr(0);
var ConstSet472 = setConstr(0);
var ConstSet473 = setConstr(1);
var ConstSet474 = setConstr(1);
var ConstSet475 = setConstr(1);
var ConstSet476 = setConstr(6);
var ConstSet477 = setConstr(0);
var ConstSet478 = setConstr(0);
var ConstSet479 = setConstr(1);
var ConstSet480 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet481 = setConstr(6);
var ConstSet482 = setConstr(0);
var ConstSet483 = setConstr(12);
var ConstSet484 = setConstr(4);
var ConstSet485 = setConstr(12);
var ConstSet486 = setConstr(4);
var ConstSet487 = setConstr(1);
var ConstSet488 = setConstr(1);
var ConstSet489 = setConstr(1);
var ConstSet490 = setConstr(4);
var ConstSet491 = setConstr(1);
var ConstSet492 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet493 = setConstr(1);
var ConstSet494 = setConstr(0);
var ConstSet495 = setConstr(1);
var ConstSet496 = setConstr(1);
var ConstSet497 = setConstr(1);
var ConstSet498 = setConstr(7, 5, 6, 12, 14, 15, 17, 13);
var ConstSet499 = setConstr(0);
var ConstSet500 = setConstr(1);
var ConstSet501 = setConstr(0);
var ConstSet502 = setConstr(0);
var ConstSet503 = setConstr(0);
var ConstSet504 = setConstr(2);
var ConstSet505 = setConstr(1);
var ConstSet506 = setConstr(9);
var ConstSet507 = setConstr(9);
var ConstSet508 = setConstr(2);
var ConstSet509 = setConstr(1);
var ConstSet510 = setConstr(1);
var ConstSet511 = setConstr(0);
var ConstSet512 = setConstr(9);
var ConstSet513 = setConstr(9);
var ConstSet514 = setConstr(0);
var ConstSet515 = setConstr(0);
var ConstSet516 = setConstr(0);
var ConstSet517 = setConstr(0);
var ConstSet518 = setConstr(0);
var ConstSet519 = setConstr(0);
var ConstSet520 = setConstr(11);
var ConstSet521 = setConstr(11);
var ConstSet522 = setConstr(11);
var ConstSet523 = setConstr(0);
var ConstSet524 = setConstr(0);
var ConstSet525 = setConstr(0);
var ConstSet526 = setConstr(0);
var ConstSet527 = setConstr(0);
var ConstSet528 = setConstr(1);
var ConstSet529 = setConstr(0);
var ConstSet530 = setConstr(1);
var ConstSet531 = setConstr(1);
var ConstSet532 = setConstr(1);
var ConstSet533 = setConstr(1);
var ConstSet534 = setConstr(1);
var ConstSet535 = setConstr(2);
var ConstSet536 = setConstr(2);
var ConstSet537 = setConstr(2);
var ConstSet538 = setConstr(2);
var ConstSet539 = setConstr(2);
var ConstSet540 = setConstr(2);
var ConstSet541 = setConstr(1);
var ConstSet542 = setConstr(2);
var ConstSet543 = setConstr(2);
var ConstSet544 = setConstr(2);
var ConstSet545 = setConstr(2);
var F = {procname: "module macros", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
framePtr = F;
F.line = 219;
F.filename = "hashes.nim";
var objectID_1006633138 = [0];
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module underscored_calls", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/underscored_calls.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sugar", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/sugar.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumerate", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/enumerate.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module dom", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/js/dom.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module dom", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/js/dom.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deepcopy", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/dawid/deepcopy.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module deepcopy", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/dawid/deepcopy.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module dawid", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/dawid/dawid.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module dawid", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/dawid/dawid.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osseps", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/osseps.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osseps", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/osseps.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module pathnorm", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/pathnorm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module oserrors", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/oserrors.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module oserrors", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/oserrors.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module staticos", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/staticos.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module staticos", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/staticos.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module oscommon", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/oscommon.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module oscommon", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/oscommon.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module ospaths2", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/ospaths2.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module ospaths2", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/ospaths2.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module ossymlinks", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/ossymlinks.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module ossymlinks", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/ossymlinks.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osfiles", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/osfiles.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osfiles", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/osfiles.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osdirs", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/osdirs.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osdirs", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/osdirs.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module envvars", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/envvars.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module envvars", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/envvars.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osappdirs", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/osappdirs.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module osappdirs", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/osappdirs.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module cmdline", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/cmdline.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module cmdline", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/cmdline.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module os", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/os.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module kbase", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/kbase.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module kbase", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/kbase.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module kdom", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/kdom.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module kdom", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/kdom.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jdict", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/jdict.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jdict", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/jdict.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jstrutils", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/jstrutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jstrutils", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/jstrutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module vstyles", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vstyles.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module vstyles", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vstyles.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module vdom", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
framePtr = F;
F.line = 75;
F.filename = "vdom.nim";
var svgNamespace_1459618018 = [[104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,48,47,115,118,103]];
F.line = 76;
var mathNamespace_1459618019 = [[104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,49,57,57,56,47,77,97,116,104,47,77,97,116,104,77,76]];
F.line = 224;
var gid_1459618508 = [0];
framePtr = F.prev;
var F = {procname: "module vdom", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module compact", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/compact.nim", line: 0};
framePtr = F;
F.line = 10;
F.filename = "compact.nim";
var vcomponents_1493172246 = [{}];
F.line = 22;
framePtr = F.prev;
var F = {procname: "module compact", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/compact.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module karax", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
framePtr = F;
F.line = 60;
F.filename = "karax.nim";
var kxi__ = null;
framePtr = F.prev;
var F = {procname: "module karax", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module karaxdsl", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karaxdsl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module karaxdsl", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karaxdsl.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function resize__lisp_u16193() {
  var F = {procname: "lisp.resize", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2295;
    F.filename = "lisp.nim";
          fitAddon.fit();
      editor.resize();
    
  framePtr = F.prev;

  
}

function add__system_u1942(x_p0, x_p0_Idx, y_p1) {
          if (x_p0[x_p0_Idx] === null) { x_p0[x_p0_Idx] = []; }
      var off = x_p0[x_p0_Idx].length;
      x_p0[x_p0_Idx].length += y_p1.length;
      for (var i = 0; i < y_p1.length; ++i) {
        x_p0[x_p0_Idx][off+i] = y_p1.charCodeAt(i);
      }
    

  
}

function isFatPointer__system_u2869(ti_p0) {
  var result_33557303 = false;

  BeforeRet: {
    result_33557303 = !((ConstSet1[ti_p0.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557303;

}

function nimCopyAux(dest_p0, src_p1, n_p2) {
    switch (n_p2.kind) {
    case 0:
      break;
    case 1:
            dest_p0[n_p2.offset] = nimCopy(dest_p0[n_p2.offset], src_p1[n_p2.offset], n_p2.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_p2.sons.length; i++) {
      nimCopyAux(dest_p0, src_p1, n_p2.sons[i]);
    }
    
      break;
    case 3:
            dest_p0[n_p2.offset] = nimCopy(dest_p0[n_p2.offset], src_p1[n_p2.offset], n_p2.typ);
      for (var i = 0; i < n_p2.sons.length; ++i) {
        nimCopyAux(dest_p0, src_p1, n_p2.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_p0) {
        if (a_p0 > 2147483647 || a_p0 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: [118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101], parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");

  
}

function raiseIndexError(i_p0, a_p1, b_p2) {
    var Temporary1;

    if ((b_p2 < a_p1)) {
    Temporary1 = [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,44,32,116,104,101,32,99,111,110,116,97,105,110,101,114,32,105,115,32,101,109,112,116,121];
    }
    else {
    Temporary1 = ([105,110,100,101,120,32]).concat(HEX24__systemZdollars_u8(i_p0),[32,110,111,116,32,105,110,32],HEX24__systemZdollars_u8(a_p1),[32,46,46,32],HEX24__systemZdollars_u8(b_p2));
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554449), parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addChars__stdZprivateZdigitsutils_u202(result_p0, result_p0_Idx, x_p1, start_p2, n_p3) {
    var Temporary1;

  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 44;
    F.filename = "digitsutils.nim";
    var old_301990096 = (result_p0[result_p0_Idx]).length;
    F.line = 45;
    if (result_p0[result_p0_Idx].length < (Temporary1 = chckRange(addInt(old_301990096, n_p3), 0, 2147483647), Temporary1)) { for (var i = result_p0[result_p0_Idx].length; i < Temporary1; ++i) result_p0[result_p0_Idx].push(0); }
         else {result_p0[result_p0_Idx].length = Temporary1; };
    Label2: {
      F.line = 47;
      var iHEX60gensym4_301990110 = 0;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664550 = 0;
      Label3: {
        F.line = 129;
          Label4: while (true) {
          if (!(i_553664550 < n_p3)) break Label4;
            F.line = 50;
            F.filename = "digitsutils.nim";
            iHEX60gensym4_301990110 = i_553664550;
            F.line = 47;
            result_p0[result_p0_Idx][chckIndx(addInt(old_301990096, iHEX60gensym4_301990110), 0, (result_p0[result_p0_Idx]).length - 1)] = x_p1.charCodeAt(chckIndx(addInt(start_p2, iHEX60gensym4_301990110), 0, (x_p1).length - 1));
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664550 = addInt(i_553664550, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function addChars__stdZprivateZdigitsutils_u198(result_p0, result_p0_Idx, x_p1) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 56;
    F.filename = "digitsutils.nim";
    addChars__stdZprivateZdigitsutils_u202(result_p0, result_p0_Idx, x_p1, 0, ((x_p1) == null ? 0 : (x_p1).length));
  framePtr = F.prev;

  
}

function addInt__stdZprivateZdigitsutils_u223(result_p0, result_p0_Idx, x_p1) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 112;
    F.filename = "digitsutils.nim";
    addChars__stdZprivateZdigitsutils_u198(result_p0, result_p0_Idx, ((x_p1) + ""));
  framePtr = F.prev;

  
}

function addInt__stdZprivateZdigitsutils_u241(result_p0, result_p0_Idx, x_p1) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 116;
    F.filename = "digitsutils.nim";
    addInt__stdZprivateZdigitsutils_u223(result_p0, result_p0_Idx, BigInt(x_p1));
  framePtr = F.prev;

  
}

function HEX24__systemZdollars_u8(x_p0) {
  var result_369098762 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 19;
    F.filename = "dollars.nim";
    result_369098762[0] = nimCopy(null, [], NTI33554449);
    F.line = 20;
    addInt__stdZprivateZdigitsutils_u241(result_369098762, 0, x_p0);
  framePtr = F.prev;

  return result_369098762[0];

}

function auxWriteStackTrace__system_u2084(f_p0) {
  var result_33556518 = [[]];

    var it_33556526 = f_p0;
    var i_33556527 = 0;
    var total_33556528 = 0;
    var tempFrames_33556529 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555836);
    Label1: {
        Label2: while (true) {
        if (!(!((it_33556526 == null)) && (i_33556527 <= 63))) break Label2;
          tempFrames_33556529[i_33556527].Field0 = it_33556526.procname;
          tempFrames_33556529[i_33556527].Field1 = it_33556526.line;
          tempFrames_33556529[i_33556527].Field2 = it_33556526.filename;
          i_33556527 += 1;
          total_33556528 += 1;
          it_33556526 = it_33556526.prev;
        }
    };
    Label3: {
        Label4: while (true) {
        if (!!((it_33556526 == null))) break Label4;
          total_33556528 += 1;
          it_33556526 = it_33556526.prev;
        }
    };
    result_33556518[0] = nimCopy(null, [], NTI33554449);
    if (!((total_33556528 == i_33556527))) {
    result_33556518[0].push.apply(result_33556518[0], [40]);;
    result_33556518[0].push.apply(result_33556518[0], HEX24__systemZdollars_u8((total_33556528 - i_33556527)));;
    result_33556518[0].push.apply(result_33556518[0], [32,99,97,108,108,115,32,111,109,105,116,116,101,100,41,32,46,46,46,10]);;
    }
    
    Label5: {
      var j_33556562 = 0;
      var colontmp__553664543 = 0;
      colontmp__553664543 = (i_33556527 - 1);
      var res_553664544 = colontmp__553664543;
      Label6: {
          Label7: while (true) {
          if (!(0 <= res_553664544)) break Label7;
            j_33556562 = res_553664544;
            result_33556518[0].push.apply(result_33556518[0], cstrToNimstr(tempFrames_33556529[j_33556562].Field2));;
            if ((0 < tempFrames_33556529[j_33556562].Field1)) {
            result_33556518[0].push.apply(result_33556518[0], [40]);;
            addInt__stdZprivateZdigitsutils_u241(result_33556518, 0, tempFrames_33556529[j_33556562].Field1);
            if (false) {
            result_33556518[0].push.apply(result_33556518[0], [44,32]);;
            addInt__stdZprivateZdigitsutils_u241(result_33556518, 0, 0);
            }
            
            result_33556518[0].push.apply(result_33556518[0], [41]);;
            }
            
            result_33556518[0].push.apply(result_33556518[0], [32,97,116,32]);;
            add__system_u1942(result_33556518, 0, tempFrames_33556529[j_33556562].Field0);
            result_33556518[0].push.apply(result_33556518[0], [10]);;
            res_553664544 -= 1;
          }
      };
    };

  return result_33556518[0];

}

function rawWriteStackTrace__system_u2180() {
  var result_33556613 = [];

    if (!((framePtr == null))) {
    result_33556613 = nimCopy(null, ([84,114,97,99,101,98,97,99,107,32,40,109,111,115,116,32,114,101,99,101,110,116,32,99,97,108,108,32,108,97,115,116,41,10]).concat(auxWriteStackTrace__system_u2084(framePtr)), NTI33554449);
    }
    else {
      result_33556613 = nimCopy(null, [78,111,32,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,32,97,118,97,105,108,97,98,108,101,10], NTI33554449);
    }
    

  return result_33556613;

}

function newSeq__system_u2507(len_p0) {
  var result_33556943 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 653;
    F.filename = "system.nim";
    result_33556943 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_33556943[i] = null; }  framePtr = F.prev;

  return result_33556943;

}

function unhandledException(e_p0) {
    var buf_33556658 = [[]];
    if (!(((e_p0.message).length == 0))) {
    buf_33556658[0].push.apply(buf_33556658[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556658[0].push.apply(buf_33556658[0], e_p0.message);;
    }
    else {
    buf_33556658[0].push.apply(buf_33556658[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556658[0].push.apply(buf_33556658[0], [32,91]);;
    add__system_u1942(buf_33556658, 0, e_p0.name);
    buf_33556658[0].push.apply(buf_33556658[0], [93,10]);;
    buf_33556658[0].push.apply(buf_33556658[0], rawWriteStackTrace__system_u2180());;
    var cbuf_33556659 = toJSStr(buf_33556658[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556659);
  }
  else {
    throw cbuf_33556659;
  }
  

  
}

function newSeq__pkgZkaraxZkarax_u1615(len_p0) {
  var result_1426064979 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 653;
    F.filename = "system.nim";
    result_1426064979 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_1426064979[i] = ({k: 0, parent: null, current: null, newNode: null, oldNode: null}); }  framePtr = F.prev;

  return result_1426064979;

}

function newSeq__pkgZkaraxZkarax_u1656(len_p0) {
  var result_1426065020 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 653;
    F.filename = "system.nim";
    result_1426065020 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_1426065020[i] = ({parent: null, newChild: null, pos: 0}); }  framePtr = F.prev;

  return result_1426065020;

}

function HEX3Aanonymous__pkgZkaraxZkarax_u1454() {
  var F = {procname: "dodraw.:anonymous", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 681;
    F.filename = "karax.nim";
    dodraw__pkgZkaraxZkarax_u1449(this.kxi0);
  framePtr = F.prev;

  
}

function HEX5BHEX5D__pkgZkaraxZkarax_u1466(s_p0, x_p1) {
  var result_1426064832 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 145;
    F.filename = "indices.nim";
    var a_1426064834 = x_p1.a;
    F.line = 146;
    var L_1426064840 = addInt(subInt(subInt((s_p0).length, x_p1.b), a_1426064834), 1);
    F.line = 147;
    result_1426064832 = new Array(chckRange(L_1426064840, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_1426064840, 0, 2147483647) ; ++i) { result_1426064832[i] = null; }    Label1: {
      F.line = 148;
      var i_1426064849 = 0;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664591 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553664591 < L_1426064840)) break Label3;
            F.line = 148;
            F.filename = "indices.nim";
            i_1426064849 = i_553664591;
            F.line = 148;
            result_1426064832[chckIndx(i_1426064849, 0, (result_1426064832).length - 1)] = s_p0[chckIndx(addInt(i_1426064849, a_1426064834), 0, (s_p0).length - 1)];
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664591 = addInt(i_553664591, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_1426064832;

}

function HEX2EHEX2E__stdZenumutils_u105(a_p0, b_p1) {
  var result_905969776 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 438;
    F.filename = "system.nim";
    result_905969776 = nimCopy(result_905969776, {a: a_p0, b: b_p1}, NTI905969751);
  framePtr = F.prev;

  return result_905969776;

}

function sysFatal__stdZassertions_u44(message_p1) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_p1, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}

function raiseAssert__stdZassertions_u42(msg_p0) {
  var F = {procname: "assertions.raiseAssert", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 36;
    F.filename = "assertions.nim";
    sysFatal__stdZassertions_u44(msg_p0);
  framePtr = F.prev;

  
}

function failedAssertImpl__stdZassertions_u84(msg_p0) {
  var F = {procname: "assertions.failedAssertImpl", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 41;
    F.filename = "assertions.nim";
    raiseAssert__stdZassertions_u42(msg_p0);
  framePtr = F.prev;

  
}

function valueHEX3D__pkgZkaraxZvdom_u453(n_p0, v_p1) {
  var F = {procname: "vdom.value=", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 188;
    F.filename = "vdom.nim";
    n_p0.text = v_p1;
  framePtr = F.prev;

  
}

function value__pkgZkaraxZvdom_u450(n_p0) {
  var result_1459618244 = null;

  var F = {procname: "vdom.value", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 187;
    F.filename = "vdom.nim";
    result_1459618244 = n_p0.text;
  framePtr = F.prev;

  return result_1459618244;

}

function wrapper__pkgZkaraxZkarax_u282() {
  var F = {procname: ":anonymous.wrapper", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 77;
    F.filename = "karax.nim";
    var vHEX60gensym15_1426063644 = this.ev0.target.value;
    F.line = 78;
    valueHEX3D__pkgZkaraxZvdom_u453(this.HEX3Aup.n1, vHEX60gensym15_1426063644);
    if (!(!(cmpClosures(this.HEX3Aup.action2, null)))) {
    F.line = 79;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(79, 3) `action != nil` "));
    }
    
    F.line = 80;
    this.HEX3Aup.action2(this.ev0, this.HEX3Aup.n1);
    if (!((value__pkgZkaraxZvdom_u450(this.HEX3Aup.n1) == vHEX60gensym15_1426063644))) {
    F.line = 82;
    this.ev0.target.value = value__pkgZkaraxZvdom_u450(this.HEX3Aup.n1);
    }
    
  framePtr = F.prev;

  
}

function HEX3Aanonymous__pkgZkaraxZkarax_u280(ev_p0) {
    var Temporary1;

  var F = {procname: "laterWrapper.:anonymous", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 127;
    F.filename = "karax.nim";
    var HEX3Aenv_553664641 = null;
    F.line = 127;
    HEX3Aenv_553664641 = {m_type: NTI553659644, ev0: null, HEX3Aup: null};
    F.line = 124;
    HEX3Aenv_553664641.ev0 = ev_p0;
    F.line = 124;
    HEX3Aenv_553664641.HEX3Aup = this;
    if (!((this.timer0 == null))) {
    F.line = 126;
    clearTimeout(this.timer0);
    }
    
    F.line = 127;
    Temporary1 = wrapper__pkgZkaraxZkarax_u282.bind(HEX3Aenv_553664641); Temporary1.ClP_0 = wrapper__pkgZkaraxZkarax_u282; Temporary1.ClE_0 = HEX3Aenv_553664641;
    this.timer0 = setTimeout(Temporary1, 400);
  framePtr = F.prev;

  
}

function laterWrapper__pkgZkaraxZkarax_u275() {
    var Temporary1;

  var result_1426063636 = null;

  var F = {procname: "wrapEvent.laterWrapper", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 121;
    F.filename = "karax.nim";
    var HEX3Aenv_553664640 = null;
    F.line = 121;
    HEX3Aenv_553664640 = {m_type: NTI553659642, timer0: null, n1: null, action2: null};
    F.line = 121;
    HEX3Aenv_553664640.action2 = this.action0;
    F.line = 122;
    HEX3Aenv_553664640.n1 = this.n1;
    HEX3Aenv_553664640.timer0 = null;
    F.line = 124;
    Temporary1 = HEX3Aanonymous__pkgZkaraxZkarax_u280.bind(HEX3Aenv_553664640); Temporary1.ClP_0 = HEX3Aanonymous__pkgZkaraxZkarax_u280; Temporary1.ClE_0 = HEX3Aenv_553664640;
    result_1426063636 = Temporary1;
  framePtr = F.prev;

  return result_1426063636;

}

function addEventShell__pkgZkaraxZkarax_u93(d_p0, name_p1, h_p2) {
  var F = {procname: "karax.addEventShell", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 94;
    F.filename = "karax.nim";
    d_p0.addEventListener(name_p1, h_p2, false);
    if ((d_p0.karaxEvents == null)) {
    F.line = 96;
    d_p0.karaxEvents = new Array(0);
    }
    
    F.line = 97;
    d_p0.karaxEvents.push({Field0: name_p1, Field1: h_p2});
  framePtr = F.prev;

  
}

function HEX3Aanonymous__pkgZkaraxZkarax_u246(ev_p0) {
  var F = {procname: "enterWrapper.:anonymous", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    if ((ev_p0.keyCode == 13)) {
    F.line = 77;
    F.filename = "karax.nim";
    var vHEX60gensym8_1426063609 = ev_p0.target.value;
    F.line = 78;
    valueHEX3D__pkgZkaraxZvdom_u453(this.n0, vHEX60gensym8_1426063609);
    if (!(!(cmpClosures(this.action1, null)))) {
    F.line = 79;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(79, 3) `action != nil` "));
    }
    
    F.line = 80;
    this.action1(ev_p0, this.n0);
    if (!((value__pkgZkaraxZvdom_u450(this.n0) == vHEX60gensym8_1426063609))) {
    F.line = 82;
    ev_p0.target.value = value__pkgZkaraxZvdom_u450(this.n0);
    }
    
    }
    
  framePtr = F.prev;

  
}

function enterWrapper__pkgZkaraxZkarax_u242() {
    var Temporary1;

  var result_1426063603 = null;

  var F = {procname: "wrapEvent.enterWrapper", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 115;
    F.filename = "karax.nim";
    var HEX3Aenv_553664740 = null;
    F.line = 115;
    HEX3Aenv_553664740 = {m_type: NTI553659646, n0: null, action1: null};
    F.line = 115;
    HEX3Aenv_553664740.action1 = this.action0;
    F.line = 116;
    HEX3Aenv_553664740.n0 = this.n1;
    F.line = 117;
    Temporary1 = HEX3Aanonymous__pkgZkaraxZkarax_u246.bind(HEX3Aenv_553664740); Temporary1.ClP_0 = HEX3Aanonymous__pkgZkaraxZkarax_u246; Temporary1.ClE_0 = HEX3Aenv_553664740;
    result_1426063603 = Temporary1;
  framePtr = F.prev;

  return result_1426063603;

}

function HEX3Aanonymous__pkgZkaraxZkarax_u201(ev_p0) {
  var F = {procname: "stdWrapper.:anonymous", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    if ((((this.n0.kind == 200) || (this.n0.kind == 194)) || (this.n0.kind == 196))) {
    F.line = 77;
    F.filename = "karax.nim";
    var vHEX60gensym1_1426063576 = ev_p0.target.value;
    F.line = 78;
    valueHEX3D__pkgZkaraxZvdom_u453(this.n0, vHEX60gensym1_1426063576);
    if (!(!(cmpClosures(this.action1, null)))) {
    F.line = 79;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(79, 3) `action != nil` "));
    }
    
    F.line = 80;
    this.action1(ev_p0, this.n0);
    if (!((value__pkgZkaraxZvdom_u450(this.n0) == vHEX60gensym1_1426063576))) {
    F.line = 82;
    ev_p0.target.value = value__pkgZkaraxZvdom_u450(this.n0);
    }
    
    }
    else {
      F.line = 112;
    this.action1(ev_p0, this.n0);
    }
    
  framePtr = F.prev;

  
}

function stdWrapper__pkgZkaraxZkarax_u197() {
    var Temporary1;

  var result_1426063558 = null;

  var F = {procname: "wrapEvent.stdWrapper", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 107;
    F.filename = "karax.nim";
    var HEX3Aenv_553664773 = null;
    F.line = 107;
    HEX3Aenv_553664773 = {m_type: NTI553659648, n0: null, action1: null};
    F.line = 107;
    HEX3Aenv_553664773.action1 = this.action0;
    F.line = 108;
    HEX3Aenv_553664773.n0 = this.n1;
    F.line = 109;
    Temporary1 = HEX3Aanonymous__pkgZkaraxZkarax_u201.bind(HEX3Aenv_553664773); Temporary1.ClP_0 = HEX3Aanonymous__pkgZkaraxZkarax_u201; Temporary1.ClE_0 = HEX3Aenv_553664773;
    result_1426063558 = Temporary1;
  framePtr = F.prev;

  return result_1426063558;

}

function wrapEvent__pkgZkaraxZkarax_u191(d_p0, n_p1, k_p2, action_p3) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_1426063556 = null;

  var F = {procname: "karax.wrapEvent", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 131;
    F.filename = "karax.nim";
    var HEX3Aenv_553664724 = null;
    F.line = 131;
    HEX3Aenv_553664724 = {m_type: NTI553659640, action0: null, n1: null};
    F.line = 104;
    HEX3Aenv_553664724.n1 = n_p1;
    F.line = 105;
    HEX3Aenv_553664724.action0 = action_p3;
    F.line = 129;
    switch (k_p2) {
    case 30:
      F.line = 131;
      Temporary1 = laterWrapper__pkgZkaraxZkarax_u275.bind(HEX3Aenv_553664724); Temporary1.ClP_0 = laterWrapper__pkgZkaraxZkarax_u275; Temporary1.ClE_0 = HEX3Aenv_553664724;
      result_1426063556 = Temporary1();
      F.line = 132;
      addEventShell__pkgZkaraxZkarax_u93(d_p0, "keyup", result_1426063556);
      break;
    case 29:
      F.line = 134;
      Temporary2 = enterWrapper__pkgZkaraxZkarax_u242.bind(HEX3Aenv_553664724); Temporary2.ClP_0 = enterWrapper__pkgZkaraxZkarax_u242; Temporary2.ClE_0 = HEX3Aenv_553664724;
      result_1426063556 = Temporary2();
      F.line = 135;
      addEventShell__pkgZkaraxZkarax_u93(d_p0, "keyup", result_1426063556);
      break;
    default: 
      F.line = 137;
      Temporary3 = stdWrapper__pkgZkaraxZkarax_u197.bind(HEX3Aenv_553664724); Temporary3.ClP_0 = stdWrapper__pkgZkaraxZkarax_u197; Temporary3.ClE_0 = HEX3Aenv_553664724;
      result_1426063556 = Temporary3();
      F.line = 138;
      addEventShell__pkgZkaraxZkarax_u93(d_p0, toEventName_1459618193[chckIndx(k_p2, 0, (toEventName_1459618193).length - 1)], result_1426063556);
      break;
    }
  framePtr = F.prev;

  return result_1426063556;

}

function applyEvents__pkgZkaraxZkarax_u318(n_p0) {
  var F = {procname: "karax.applyEvents", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 150;
    F.filename = "karax.nim";
    var dest_1426063680 = n_p0.dom;
    Label1: {
      F.line = 151;
      var i_1426063688 = 0;
      F.line = 126;
      F.filename = "iterators_1.nim";
      var colontmp__553664614 = 0;
      F.line = 151;
      F.filename = "karax.nim";
      colontmp__553664614 = (n_p0.events).length;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664615 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553664615 < colontmp__553664614)) break Label3;
            F.line = 151;
            F.filename = "karax.nim";
            i_1426063688 = i_553664615;
            F.line = 152;
            n_p0.events[chckIndx(i_1426063688, 0, (n_p0.events).length - 1)]["Field2"] = wrapEvent__pkgZkaraxZkarax_u191(dest_1426063680, n_p0, n_p0.events[chckIndx(i_1426063688, 0, (n_p0.events).length - 1)]["Field0"], n_p0.events[chckIndx(i_1426063688, 0, (n_p0.events).length - 1)]["Field1"]);
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664615 = addInt(i_553664615, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function applyStyle__pkgZkaraxZvstyles_u541(n_p0, s_p1) {
  var F = {procname: "vstyles.applyStyle", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vstyles.nim", line: 0};
  framePtr = F;
    F.line = 338;
    F.filename = "vstyles.nim";
    n_p0.style = {};
    Label1: {
      F.line = 339;
      var i_1526727212 = 0;
      F.line = 46;
      F.filename = "iterators_1.nim";
      var colontmp__553664839 = 0;
      F.line = 339;
      F.filename = "vstyles.nim";
      colontmp__553664839 = subInt(s_p1.length, 1);
      F.line = 68;
      F.filename = "iterators_1.nim";
      var res_553664840 = 0;
      Label2: {
        F.line = 69;
          Label3: while (true) {
          if (!(res_553664840 <= colontmp__553664839)) break Label3;
            F.line = 339;
            F.filename = "vstyles.nim";
            i_1526727212 = res_553664840;
            F.line = 340;
            n_p0.style[s_p1[i_1526727212]] = s_p1[addInt(i_1526727212, 1)];
            F.line = 74;
            F.filename = "iterators_1.nim";
            res_553664840 = addInt(res_553664840, 2);
          }
      };
    };
  framePtr = F.prev;

  
}

function toDom__pkgZkaraxZkarax_u347(n_p0, useAttachedNode_p1, kxi_p2) {
      var Temporary1;

  var result_1426063711 = null;

  var F = {procname: "karax.toDom", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (useAttachedNode_p1) {
    if (!((n_p0.dom == null))) {
    if (!((n_p0.id == null))) {
    F.line = 167;
    F.filename = "karax.nim";
    kxi_p2.byId[n_p0.id] = n_p0;
    }
    
    F.line = 168;
    result_1426063711 = n_p0.dom;
    break BeforeRet;
    }
    
    }
    
    if ((n_p0.kind == 0)) {
    F.line = 170;
    result_1426063711 = document.createTextNode(n_p0.text);
    F.line = 146;
    n_p0.dom = result_1426063711;
    if (!((n_p0.id == null))) {
    F.line = 147;
    kxi__.byId[n_p0.id] = n_p0;
    }
    
    }
    else {
    if ((n_p0.kind == 6)) {
    F.line = 173;
    result_1426063711 = document.createElement("div");
    F.line = 174;
    result_1426063711.innerHTML = n_p0.text;
    F.line = 146;
    n_p0.dom = result_1426063711;
    if (!((n_p0.id == null))) {
    F.line = 147;
    kxi__.byId[n_p0.id] = n_p0;
    }
    
    F.line = 176;
    break BeforeRet;
    }
    else {
    if ((n_p0.kind == 3)) {
    F.line = 178;
    var x_1426063751 = vcomponents_1493172246[0][n_p0.text](n_p0.kids);
    F.line = 179;
    result_1426063711 = toDom__pkgZkaraxZkarax_u347(x_1426063751, useAttachedNode_p1, kxi_p2);
    F.line = 146;
    n_p0.dom = result_1426063711;
    if (!((n_p0.id == null))) {
    F.line = 147;
    kxi__.byId[n_p0.id] = n_p0;
    }
    
    F.line = 182;
    break BeforeRet;
    }
    else {
    if ((n_p0.kind == 4)) {
    F.line = 184;
    result_1426063711 = n_p0.dom;
    if (!(!((result_1426063711 == null)))) {
    F.line = 185;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(185, 5) `result != nil` "));
    }
    
    F.line = 146;
    n_p0.dom = result_1426063711;
    if (!((n_p0.id == null))) {
    F.line = 147;
    kxi__.byId[n_p0.id] = n_p0;
    }
    
    F.line = 188;
    break BeforeRet;
    }
    else {
    if ((n_p0.kind == 5)) {
    F.line = 190;
    var x_1426063781 = n_p0;
    if (!(cmpClosures(x_1426063781.onAttachImpl, null))) {
    F.line = 191;
    x_1426063781.onAttachImpl(x_1426063781);
    }
    
    if (!(!(cmpClosures(x_1426063781.renderImpl, null)))) {
    F.line = 192;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(192, 5) `x.renderImpl != nil` "));
    }
    
    if ((x_1426063781.expanded == null)) {
    F.line = 194;
    x_1426063781.expanded = x_1426063781.renderImpl(x_1426063781);
    }
    
    if (!(!((x_1426063781.expanded == null)))) {
    F.line = 196;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(196, 5) `x.expanded != nil` "));
    }
    
    F.line = 197;
    result_1426063711 = toDom__pkgZkaraxZkarax_u347(x_1426063781.expanded, useAttachedNode_p1, kxi_p2);
    F.line = 146;
    n_p0.dom = result_1426063711;
    if (!((n_p0.id == null))) {
    F.line = 147;
    kxi__.byId[n_p0.id] = n_p0;
    }
    
    F.line = 199;
    break BeforeRet;
    }
    else {
      F.line = 202;
      if ((ConstSet2[n_p0.kind] != undefined)) {
      Temporary1 = document.createElementNS(toJSStr(svgNamespace_1459618018[0]), toTag_1459618116[chckIndx(n_p0.kind, 0, (toTag_1459618116).length - 1)]);
      }
      else {
      if ((ConstSet3[n_p0.kind] != undefined)) {
      Temporary1 = document.createElementNS(toJSStr(mathNamespace_1459618019[0]), toTag_1459618116[chckIndx(n_p0.kind, 0, (toTag_1459618116).length - 1)]);
      }
      else {
      Temporary1 = document.createElement(toTag_1459618116[chckIndx(n_p0.kind, 0, (toTag_1459618116).length - 1)]);
      }
      }
      result_1426063711 = Temporary1;
      F.line = 146;
      n_p0.dom = result_1426063711;
      if (!((n_p0.id == null))) {
      F.line = 147;
      kxi__.byId[n_p0.id] = n_p0;
      }
      
      Label2: {
        F.line = 209;
        var k_1426063828 = null;
        Label3: {
          F.line = 334;
          F.filename = "vdom.nim";
          var i_553664599 = 0;
          F.line = 126;
          F.filename = "iterators_1.nim";
          var colontmp__553664600 = 0;
          F.line = 334;
          F.filename = "vdom.nim";
          colontmp__553664600 = (n_p0.kids).length;
          F.line = 128;
          F.filename = "iterators_1.nim";
          var i_553664601 = 0;
          Label4: {
            F.line = 129;
              Label5: while (true) {
              if (!(i_553664601 < colontmp__553664600)) break Label5;
                F.line = 334;
                F.filename = "vdom.nim";
                i_553664599 = i_553664601;
                F.line = 209;
                F.filename = "karax.nim";
                k_1426063828 = n_p0.kids[chckIndx(i_553664599, 0, (n_p0.kids).length - 1)];
                F.line = 210;
                result_1426063711.appendChild(toDom__pkgZkaraxZkarax_u347(k_1426063828, useAttachedNode_p1, kxi_p2));
                F.line = 131;
                F.filename = "iterators_1.nim";
                i_553664601 = addInt(i_553664601, 1);
              }
          };
        };
      };
      if (!((n_p0.text == null))) {
      F.line = 213;
      F.filename = "karax.nim";
      result_1426063711.value = n_p0.text;
      }
      
    }
    }}}}
    if (!((n_p0.id == null))) {
    F.line = 215;
    result_1426063711.id = n_p0.id;
    }
    
    if (!((n_p0.class == null))) {
    if ((ConstSet4[n_p0.kind] != undefined)) {
    F.line = 218;
    result_1426063711.className.baseVal = n_p0.class;
    }
    else {
      F.line = 220;
    result_1426063711.className = n_p0.class;
    }
    
    }
    
    Label6: {
      F.line = 223;
      var k_1426063833 = null;
      F.line = 223;
      var v_1426063834 = null;
      Label7: {
        F.line = 337;
        F.filename = "vdom.nim";
        var i_553664609 = 0;
        F.line = 46;
        F.filename = "iterators_1.nim";
        var colontmp__553664610 = 0;
        F.line = 337;
        F.filename = "vdom.nim";
        colontmp__553664610 = subInt((n_p0.attrs).length, 2);
        F.line = 68;
        F.filename = "iterators_1.nim";
        var res_553664611 = 0;
        Label8: {
          F.line = 69;
            Label9: while (true) {
            if (!(res_553664611 <= colontmp__553664610)) break Label9;
              F.line = 337;
              F.filename = "vdom.nim";
              i_553664609 = res_553664611;
              F.line = 223;
              F.filename = "karax.nim";
              k_1426063833 = n_p0.attrs[chckIndx(i_553664609, 0, (n_p0.attrs).length - 1)];
              F.line = 223;
              v_1426063834 = n_p0.attrs[chckIndx(addInt(i_553664609, 1), 0, (n_p0.attrs).length - 1)];
              if (!((v_1426063834 == null))) {
              F.line = 225;
              result_1426063711.setAttribute(k_1426063833, v_1426063834);
              }
              
              F.line = 74;
              F.filename = "iterators_1.nim";
              res_553664611 = addInt(res_553664611, 2);
            }
        };
      };
    };
    F.line = 226;
    F.filename = "karax.nim";
    applyEvents__pkgZkaraxZkarax_u318(n_p0);
    if (((!((kxi_p2 == null)) && (n_p0 == kxi_p2.toFocusV)) && (kxi_p2.toFocus == null))) {
    F.line = 228;
    kxi_p2.toFocus = result_1426063711;
    }
    
    if (!((n_p0.style == null))) {
    F.line = 230;
    applyStyle__pkgZkaraxZvstyles_u541(result_1426063711, n_p0.style);
    F.line = 231;
    n_p0.styleVersion = (n_p0.style.__version || 0);
    }
    
  };
  framePtr = F.prev;

  return result_1426063711;

}

function replaceById__pkgZkaraxZkarax_u567(id_p0, newTree_p1) {
  var F = {procname: "karax.replaceById", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 257;
    F.filename = "karax.nim";
    var x_1426063930 = document.getElementById(id_p0);
    F.line = 258;
    x_1426063930.parentNode.replaceChild(newTree_p1, x_1426063930);
    F.line = 259;
    newTree_p1.id = id_p0;
  framePtr = F.prev;

  
}

function len__pkgZkaraxZvdom_u817(x_p0) {
  var result_1459618611 = 0;

  var F = {procname: "vdom.len", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 298;
    F.filename = "vdom.nim";
    result_1459618611 = (x_p0.kids).length;
  framePtr = F.prev;

  return result_1459618611;

}

function HEX5BHEX5D__pkgZkaraxZvdom_u824(x_p0, idx_p1) {
  var result_1459618619 = null;

  var F = {procname: "vdom.[]", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 299;
    F.filename = "vdom.nim";
    result_1459618619 = x_p0.kids[chckIndx(idx_p1, 0, (x_p0.kids).length - 1)];
  framePtr = F.prev;

  return result_1459618619;

}

function eq__pkgZkaraxZvstyles_u258(a_p0, b_p1) {
  var result_1526726917 = false;

  var F = {procname: "vstyles.eq", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vstyles.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((a_p0 == null)) {
    if ((b_p1 == null)) {
    F.line = 236;
    F.filename = "vstyles.nim";
    result_1526726917 = true;
    break BeforeRet;
    }
    else {
      F.line = 237;
      result_1526726917 = false;
      break BeforeRet;
    }
    
    }
    else {
    if ((b_p1 == null)) {
    F.line = 238;
    result_1526726917 = false;
    break BeforeRet;
    }
    }
    if (!((a_p0.length == b_p1.length))) {
    F.line = 239;
    result_1526726917 = false;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 240;
      var i_1526726952 = 0;
      F.line = 126;
      F.filename = "iterators_1.nim";
      var colontmp__553664866 = 0;
      F.line = 240;
      F.filename = "vstyles.nim";
      colontmp__553664866 = a_p0.length;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664867 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553664867 < colontmp__553664866)) break Label3;
            F.line = 240;
            F.filename = "vstyles.nim";
            i_1526726952 = i_553664867;
            if (!((a_p0[i_1526726952] == b_p1[i_1526726952]))) {
            F.line = 241;
            result_1526726917 = false;
            break BeforeRet;
            }
            
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664867 = addInt(i_553664867, 1);
          }
      };
    };
    F.line = 242;
    F.filename = "vstyles.nim";
    result_1526726917 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1526726917;

}

function versionMatch__pkgZkaraxZvstyles_u305(s_p0, version_p1) {
  var result_1526726964 = false;

  var F = {procname: "vstyles.versionMatch", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vstyles.nim", line: 0};
  framePtr = F;
    F.line = 246;
    F.filename = "vstyles.nim";
    result_1526726964 = ((s_p0 == null) || ((s_p0.__version || 0) == version_p1));
  framePtr = F.prev;

  return result_1526726964;

}

function sameAttrs__pkgZkaraxZvdom_u1019(a_p0, b_p1) {
  var result_1459618814 = false;

  var F = {procname: "vdom.sameAttrs", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((a_p0.attrs).length == (b_p1.attrs).length)) {
    F.line = 342;
    F.filename = "vdom.nim";
    result_1459618814 = true;
    Label1: {
      F.line = 343;
      var i_1459618828 = 0;
      F.line = 126;
      F.filename = "iterators_1.nim";
      var colontmp__553664870 = 0;
      F.line = 343;
      F.filename = "vdom.nim";
      colontmp__553664870 = (a_p0.attrs).length;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664871 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553664871 < colontmp__553664870)) break Label3;
            F.line = 343;
            F.filename = "vdom.nim";
            i_1459618828 = i_553664871;
            if (!((a_p0.attrs[chckIndx(i_1459618828, 0, (a_p0.attrs).length - 1)] == b_p1.attrs[chckIndx(i_1459618828, 0, (b_p1.attrs).length - 1)]))) {
            F.line = 344;
            result_1459618814 = false;
            break BeforeRet;
            }
            
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664871 = addInt(i_553664871, 1);
          }
      };
    };
    }
    
  };
  framePtr = F.prev;

  return result_1459618814;

}

function eq__pkgZkaraxZkarax_u580(a_p0, b_p1, recursive_p2) {
  var result_1426063944 = 0;

  var F = {procname: "karax.eq", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (!((a_p0.kind == b_p1.kind))) {
    F.line = 281;
    F.filename = "karax.nim";
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    if (!((a_p0.id == b_p1.id))) {
    F.line = 284;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    F.line = 285;
    result_1426063944 = 3;
    if (!((a_p0.index == b_p1.index))) {
    F.line = 288;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    if ((a_p0.kind == 0)) {
    if (!((a_p0.text == b_p1.text))) {
    F.line = 292;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    }
    else {
    if ((a_p0.kind == 3)) {
    if (!((a_p0.text == b_p1.text))) {
    F.line = 294;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    if (!((len__pkgZkaraxZvdom_u817(a_p0) == len__pkgZkaraxZvdom_u817(b_p1)))) {
    F.line = 295;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 296;
      var i_1426063961 = 0;
      F.line = 126;
      F.filename = "iterators_1.nim";
      var colontmp__553664858 = 0;
      F.line = 296;
      F.filename = "karax.nim";
      colontmp__553664858 = len__pkgZkaraxZvdom_u817(a_p0);
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664859 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553664859 < colontmp__553664858)) break Label3;
            F.line = 296;
            F.filename = "karax.nim";
            i_1426063961 = i_553664859;
            if ((eq__pkgZkaraxZkarax_u580(HEX5BHEX5D__pkgZkaraxZvdom_u824(a_p0, i_1426063961), HEX5BHEX5D__pkgZkaraxZvdom_u824(b_p1, i_1426063961), recursive_p2) == 1)) {
            F.line = 297;
            result_1426063944 = 1;
            break BeforeRet;
            }
            
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664859 = addInt(i_553664859, 1);
          }
      };
    };
    }
    else {
    if ((a_p0.kind == 4)) {
    if ((a_p0.dom == b_p1.dom)) {
    F.line = 300;
    F.filename = "karax.nim";
    result_1426063944 = 3;
    break BeforeRet;
    }
    else {
      F.line = 302;
      result_1426063944 = 1;
      break BeforeRet;
    }
    
    }
    else {
    if ((a_p0.kind == 6)) {
    if (!((a_p0.text == b_p1.text))) {
    F.line = 305;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    }
    else {
    if ((b_p1.kind == 5)) {
    if (!((a_p0.text == b_p1.text))) {
    F.line = 310;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    if (!((a_p0.key == b_p1.key))) {
    F.line = 316;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    F.line = 317;
    result_1426063944 = 0;
    break BeforeRet;
    }
    }}}}
    if (((!((a_p0.class == b_p1.class)) || !((eq__pkgZkaraxZvstyles_u258(a_p0.style, b_p1.style) && versionMatch__pkgZkaraxZvstyles_u305(a_p0.style, b_p1.styleVersion)))) || !(sameAttrs__pkgZkaraxZvdom_u1019(a_p0, b_p1)))) {
    F.line = 324;
    result_1426063944 = 2;
    break BeforeRet;
    }
    
    if (recursive_p2) {
    if (!((len__pkgZkaraxZvdom_u817(a_p0) == len__pkgZkaraxZvdom_u817(b_p1)))) {
    F.line = 328;
    result_1426063944 = 1;
    break BeforeRet;
    }
    
    Label4: {
      F.line = 329;
      var i_1426063987 = 0;
      F.line = 126;
      F.filename = "iterators_1.nim";
      var colontmp__553664862 = 0;
      F.line = 329;
      F.filename = "karax.nim";
      colontmp__553664862 = len__pkgZkaraxZvdom_u817(a_p0);
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664863 = 0;
      Label5: {
        F.line = 129;
          Label6: while (true) {
          if (!(i_553664863 < colontmp__553664862)) break Label6;
            F.line = 329;
            F.filename = "karax.nim";
            i_1426063987 = i_553664863;
            if (!((eq__pkgZkaraxZkarax_u580(HEX5BHEX5D__pkgZkaraxZvdom_u824(a_p0, i_1426063987), HEX5BHEX5D__pkgZkaraxZvdom_u824(b_p1, i_1426063987), true) == 3))) {
            F.line = 331;
            result_1426063944 = 1;
            break BeforeRet;
            }
            
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664863 = addInt(i_553664863, 1);
          }
      };
    };
    }
    
    F.line = 334;
    F.filename = "karax.nim";
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1426063944;

}

function updateStyles__pkgZkaraxZkarax_u648(newNode_p0, oldNode_p1) {
  var F = {procname: "karax.updateStyles", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    if (!((oldNode_p1.dom == null))) {
    if (!((newNode_p0.style == null))) {
    F.line = 340;
    F.filename = "karax.nim";
    applyStyle__pkgZkaraxZvstyles_u541(oldNode_p1.dom, newNode_p0.style);
    F.line = 341;
    newNode_p0.styleVersion = (newNode_p0.style.__version || 0);
    }
    else {
      F.line = 342;
      oldNode_p1.dom.style = {m_type: NTI1124073614, alignContent: null, alignItems: null, alignSelf: null, all: null, animation: null, animationDelay: null, animationDirection: null, animationDuration: null, animationFillMode: null, animationIterationCount: null, animationName: null, animationPlayState: null, animationTimingFunction: null, backdropFilter: null, backfaceVisibility: null, background: null, backgroundAttachment: null, backgroundBlendMode: null, backgroundClip: null, backgroundColor: null, backgroundImage: null, backgroundOrigin: null, backgroundPosition: null, backgroundRepeat: null, backgroundSize: null, blockSize: null, border: null, borderBlock: null, borderBlockColor: null, borderBlockEnd: null, borderBlockEndColor: null, borderBlockEndStyle: null, borderBlockEndWidth: null, borderBlockStart: null, borderBlockStartColor: null, borderBlockStartStyle: null, borderBlockStartWidth: null, borderBlockStyle: null, borderBlockWidth: null, borderBottom: null, borderBottomColor: null, borderBottomLeftRadius: null, borderBottomRightRadius: null, borderBottomStyle: null, borderBottomWidth: null, borderCollapse: null, borderColor: null, borderEndEndRadius: null, borderEndStartRadius: null, borderImage: null, borderImageOutset: null, borderImageRepeat: null, borderImageSlice: null, borderImageSource: null, borderImageWidth: null, borderInline: null, borderInlineColor: null, borderInlineEnd: null, borderInlineEndColor: null, borderInlineEndStyle: null, borderInlineEndWidth: null, borderInlineStart: null, borderInlineStartColor: null, borderInlineStartStyle: null, borderInlineStartWidth: null, borderInlineStyle: null, borderInlineWidth: null, borderLeft: null, borderLeftColor: null, borderLeftStyle: null, borderLeftWidth: null, borderRadius: null, borderRight: null, borderRightColor: null, borderRightStyle: null, borderRightWidth: null, borderSpacing: null, borderStartEndRadius: null, borderStartStartRadius: null, borderStyle: null, borderTop: null, borderTopColor: null, borderTopLeftRadius: null, borderTopRightRadius: null, borderTopStyle: null, borderTopWidth: null, borderWidth: null, bottom: null, boxDecorationBreak: null, boxShadow: null, boxSizing: null, breakAfter: null, breakBefore: null, breakInside: null, captionSide: null, caretColor: null, clear: null, clip: null, clipPath: null, color: null, colorAdjust: null, columnCount: null, columnFill: null, columnGap: null, columnRule: null, columnRuleColor: null, columnRuleStyle: null, columnRuleWidth: null, columnSpan: null, columnWidth: null, columns: null, contain: null, content: null, counterIncrement: null, counterReset: null, counterSet: null, cursor: null, direction: null, display: null, emptyCells: null, filter: null, flex: null, flexBasis: null, flexDirection: null, flexFlow: null, flexGrow: null, flexShrink: null, flexWrap: null, cssFloat: null, font: null, fontFamily: null, fontFeatureSettings: null, fontKerning: null, fontLanguageOverride: null, fontOpticalSizing: null, fontSize: null, fontSizeAdjust: null, fontStretch: null, fontStyle: null, fontSynthesis: null, fontVariant: null, fontVariantAlternates: null, fontVariantCaps: null, fontVariantEastAsian: null, fontVariantLigatures: null, fontVariantNumeric: null, fontVariantPosition: null, fontVariationSettings: null, fontWeight: null, gap: null, grid: null, gridArea: null, gridAutoColumns: null, gridAutoFlow: null, gridAutoRows: null, gridColumn: null, gridColumnEnd: null, gridColumnStart: null, gridRow: null, gridRowEnd: null, gridRowStart: null, gridTemplate: null, gridTemplateAreas: null, gridTemplateColumns: null, gridTemplateRows: null, hangingPunctuation: null, height: null, hyphens: null, imageOrientation: null, imageRendering: null, inlineSize: null, inset: null, insetBlock: null, insetBlockEnd: null, insetBlockStart: null, insetInline: null, insetInlineEnd: null, insetInlineStart: null, isolation: null, justifyContent: null, justifyItems: null, justifySelf: null, left: null, letterSpacing: null, lineBreak: null, lineHeight: null, listStyle: null, listStyleImage: null, listStylePosition: null, listStyleType: null, margin: null, marginBlock: null, marginBlockEnd: null, marginBlockStart: null, marginBottom: null, marginInline: null, marginInlineEnd: null, marginInlineStart: null, marginLeft: null, marginRight: null, marginTop: null, mask: null, maskBorder: null, maskBorderMode: null, maskBorderOutset: null, maskBorderRepeat: null, maskBorderSlice: null, maskBorderSource: null, maskBorderWidth: null, maskClip: null, maskComposite: null, maskImage: null, maskMode: null, maskOrigin: null, maskPosition: null, maskRepeat: null, maskSize: null, maskType: null, maxBlockSize: null, maxHeight: null, maxInlineSize: null, maxWidth: null, minBlockSize: null, minHeight: null, minInlineSize: null, minWidth: null, mixBlendMode: null, objectFit: null, objectPosition: null, offset: null, offsetAnchor: null, offsetDistance: null, offsetPath: null, offsetRotate: null, opacity: null, order: null, orphans: null, outline: null, outlineColor: null, outlineOffset: null, outlineStyle: null, outlineWidth: null, overflow: null, overflowAnchor: null, overflowBlock: null, overflowInline: null, overflowWrap: null, overflowX: null, overflowY: null, overscrollBehavior: null, overscrollBehaviorBlock: null, overscrollBehaviorInline: null, overscrollBehaviorX: null, overscrollBehaviorY: null, padding: null, paddingBlock: null, paddingBlockEnd: null, paddingBlockStart: null, paddingBottom: null, paddingInline: null, paddingInlineEnd: null, paddingInlineStart: null, paddingLeft: null, paddingRight: null, paddingTop: null, pageBreakAfter: null, pageBreakBefore: null, pageBreakInside: null, paintOrder: null, perspective: null, perspectiveOrigin: null, placeContent: null, placeItems: null, placeSelf: null, pointerEvents: null, position: null, quotes: null, resize: null, right: null, rotate: null, rowGap: null, scale: null, scrollBehavior: null, scrollMargin: null, scrollMarginBlock: null, scrollMarginBlockEnd: null, scrollMarginBlockStart: null, scrollMarginBottom: null, scrollMarginInline: null, scrollMarginInlineEnd: null, scrollMarginInlineStart: null, scrollMarginLeft: null, scrollMarginRight: null, scrollMarginTop: null, scrollPadding: null, scrollPaddingBlock: null, scrollPaddingBlockEnd: null, scrollPaddingBlockStart: null, scrollPaddingBottom: null, scrollPaddingInline: null, scrollPaddingInlineEnd: null, scrollPaddingInlineStart: null, scrollPaddingLeft: null, scrollPaddingRight: null, scrollPaddingTop: null, scrollSnapAlign: null, scrollSnapStop: null, scrollSnapType: null, scrollbar3dLightColor: null, scrollbarArrowColor: null, scrollbarBaseColor: null, scrollbarColor: null, scrollbarDarkshadowColor: null, scrollbarFaceColor: null, scrollbarHighlightColor: null, scrollbarShadowColor: null, scrollbarTrackColor: null, scrollbarWidth: null, shapeImageThreshold: null, shapeMargin: null, shapeOutside: null, tabSize: null, tableLayout: null, textAlign: null, textAlignLast: null, textCombineUpright: null, textDecoration: null, textDecorationColor: null, textDecorationLine: null, textDecorationSkipInk: null, textDecorationStyle: null, textDecorationThickness: null, textEmphasis: null, textEmphasisColor: null, textEmphasisPosition: null, textEmphasisStyle: null, textIndent: null, textJustify: null, textOrientation: null, textOverflow: null, textRendering: null, textShadow: null, textTransform: null, textUnderlineOffset: null, textUnderlinePosition: null, top: null, touchAction: null, transform: null, transformBox: null, transformOrigin: null, transformStyle: null, transition: null, transitionDelay: null, transitionDuration: null, transitionProperty: null, transitionTimingFunction: null, translate: null, unicodeBidi: null, verticalAlign: null, visibility: null, whiteSpace: null, widows: null, width: null, willChange: null, wordBreak: null, wordSpacing: null, writingMode: null, zIndex: null};
    }
    
    if ((ConstSet5[oldNode_p1.kind] != undefined)) {
    F.line = 344;
    oldNode_p1.dom.className.baseVal = newNode_p0.class;
    }
    else {
      F.line = 346;
    oldNode_p1.dom.className = newNode_p0.class;
    }
    
    }
    
    F.line = 347;
    oldNode_p1.style = newNode_p0.style;
    F.line = 348;
    oldNode_p1.class = newNode_p0.class;
  framePtr = F.prev;

  
}

function takeOverAttr__pkgZkaraxZvdom_u809(newNode_p0, oldNode_p1) {
  var F = {procname: "vdom.takeOverAttr", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 278;
    F.filename = "vdom.nim";
    oldNode_p1.attrs = newNode_p0.attrs;
  framePtr = F.prev;

  
}

function updateAttributes__pkgZkaraxZkarax_u1062(newNode_p0, oldNode_p1) {
  var F = {procname: "karax.updateAttributes", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    if (!((oldNode_p1.dom == null))) {
    Label1: {
      F.line = 353;
      F.filename = "karax.nim";
      var k_1426064429 = null;
      F.line = 353;
      var __1426064430 = null;
      Label2: {
        F.line = 337;
        F.filename = "vdom.nim";
        var i_553664875 = 0;
        F.line = 46;
        F.filename = "iterators_1.nim";
        var colontmp__553664876 = 0;
        F.line = 337;
        F.filename = "vdom.nim";
        colontmp__553664876 = subInt((oldNode_p1.attrs).length, 2);
        F.line = 68;
        F.filename = "iterators_1.nim";
        var res_553664877 = 0;
        Label3: {
          F.line = 69;
            Label4: while (true) {
            if (!(res_553664877 <= colontmp__553664876)) break Label4;
              F.line = 337;
              F.filename = "vdom.nim";
              i_553664875 = res_553664877;
              F.line = 353;
              F.filename = "karax.nim";
              k_1426064429 = oldNode_p1.attrs[chckIndx(i_553664875, 0, (oldNode_p1.attrs).length - 1)];
              F.line = 353;
              __1426064430 = oldNode_p1.attrs[chckIndx(addInt(i_553664875, 1), 0, (oldNode_p1.attrs).length - 1)];
              F.line = 354;
              oldNode_p1.dom.removeAttribute(k_1426064429);
              F.line = 74;
              F.filename = "iterators_1.nim";
              res_553664877 = addInt(res_553664877, 2);
            }
        };
      };
    };
    Label5: {
      F.line = 355;
      F.filename = "karax.nim";
      var k_1426064431 = null;
      F.line = 355;
      var v_1426064432 = null;
      Label6: {
        F.line = 337;
        F.filename = "vdom.nim";
        var i_553664881 = 0;
        F.line = 46;
        F.filename = "iterators_1.nim";
        var colontmp__553664882 = 0;
        F.line = 337;
        F.filename = "vdom.nim";
        colontmp__553664882 = subInt((newNode_p0.attrs).length, 2);
        F.line = 68;
        F.filename = "iterators_1.nim";
        var res_553664883 = 0;
        Label7: {
          F.line = 69;
            Label8: while (true) {
            if (!(res_553664883 <= colontmp__553664882)) break Label8;
              F.line = 337;
              F.filename = "vdom.nim";
              i_553664881 = res_553664883;
              F.line = 355;
              F.filename = "karax.nim";
              k_1426064431 = newNode_p0.attrs[chckIndx(i_553664881, 0, (newNode_p0.attrs).length - 1)];
              F.line = 355;
              v_1426064432 = newNode_p0.attrs[chckIndx(addInt(i_553664881, 1), 0, (newNode_p0.attrs).length - 1)];
              if (!((v_1426064432 == null))) {
              F.line = 357;
              oldNode_p1.dom.setAttribute(k_1426064431, v_1426064432);
              }
              
              F.line = 74;
              F.filename = "iterators_1.nim";
              res_553664883 = addInt(res_553664883, 2);
            }
        };
      };
    };
    }
    
    F.line = 358;
    F.filename = "karax.nim";
    takeOverAttr__pkgZkaraxZvdom_u809(newNode_p0, oldNode_p1);
  framePtr = F.prev;

  
}

function getAttr__pkgZkaraxZvdom_u796(n_p0, key_p1) {
  var result_1459618591 = null;

  var F = {procname: "vdom.getAttr", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    Label1: {
      F.line = 271;
      F.filename = "vdom.nim";
      var i_1459618600 = 0;
      F.line = 46;
      F.filename = "iterators_1.nim";
      var colontmp__553664886 = 0;
      F.line = 271;
      F.filename = "vdom.nim";
      colontmp__553664886 = subInt((n_p0.attrs).length, 2);
      F.line = 68;
      F.filename = "iterators_1.nim";
      var res_553664887 = 0;
      Label2: {
        F.line = 69;
          Label3: while (true) {
          if (!(res_553664887 <= colontmp__553664886)) break Label3;
            F.line = 271;
            F.filename = "vdom.nim";
            i_1459618600 = res_553664887;
            if ((n_p0.attrs[chckIndx(i_1459618600, 0, (n_p0.attrs).length - 1)] == key_p1)) {
            F.line = 272;
            result_1459618591 = n_p0.attrs[chckIndx(addInt(i_1459618600, 1), 0, (n_p0.attrs).length - 1)];
            break BeforeRet;
            }
            
            F.line = 74;
            F.filename = "iterators_1.nim";
            res_553664887 = addInt(res_553664887, 2);
          }
      };
    };
  };
  framePtr = F.prev;

  return result_1459618591;

}

function removeAllEventHandlers__pkgZkaraxZkarax_u149(d_p0) {
  var F = {procname: "karax.removeAllEventHandlers", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    if (!((d_p0.karaxEvents == null))) {
    Label1: {
      F.line = 101;
      F.filename = "karax.nim";
      var i_1426063526 = 0;
      F.line = 126;
      F.filename = "iterators_1.nim";
      var colontmp__553664890 = 0;
      F.line = 101;
      F.filename = "karax.nim";
      colontmp__553664890 = d_p0.karaxEvents.length;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664891 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553664891 < colontmp__553664890)) break Label3;
            F.line = 101;
            F.filename = "karax.nim";
            i_1426063526 = i_553664891;
            F.line = 102;
            d_p0.removeEventListener(d_p0.karaxEvents[i_1426063526]["Field0"], d_p0.karaxEvents[i_1426063526]["Field1"], false);
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664891 = addInt(i_553664891, 1);
          }
      };
    };
    }
    
  framePtr = F.prev;

  
}

function mergeEvents__pkgZkaraxZkarax_u1073(newNode_p0, oldNode_p1, kxi_p2) {
  var F = {procname: "karax.mergeEvents", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 361;
    F.filename = "karax.nim";
    var d_1426064437 = oldNode_p1.dom;
    if (!((d_1426064437 == null))) {
    F.line = 363;
    removeAllEventHandlers__pkgZkaraxZkarax_u149(d_1426064437);
    }
    
    F.line = 371;
    oldNode_p1.events = newNode_p0.events;
    F.line = 372;
    applyEvents__pkgZkaraxZkarax_u318(oldNode_p1);
  framePtr = F.prev;

  
}

function addPatch__pkgZkaraxZkarax_u1082(kxi_p0, ka_p1, parenta_p2, currenta_p3, na_p4, oldNode_p5) {
  var F = {procname: "karax.addPatch", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 389;
    F.filename = "karax.nim";
    var L_1426064449 = kxi_p0.patchLen;
    if (((kxi_p0.patches).length <= L_1426064449)) {
    F.line = 392;
    kxi_p0.patches.push({k: ka_p1, parent: parenta_p2, current: currenta_p3, newNode: na_p4, oldNode: oldNode_p5});;
    }
    else {
      F.line = 395;
      kxi_p0.patches[chckIndx(L_1426064449, 0, (kxi_p0.patches).length - 1)].k = ka_p1;
      F.line = 396;
      kxi_p0.patches[chckIndx(L_1426064449, 0, (kxi_p0.patches).length - 1)].parent = parenta_p2;
      F.line = 397;
      kxi_p0.patches[chckIndx(L_1426064449, 0, (kxi_p0.patches).length - 1)].current = currenta_p3;
      F.line = 398;
      kxi_p0.patches[chckIndx(L_1426064449, 0, (kxi_p0.patches).length - 1)].newNode = na_p4;
      F.line = 399;
      kxi_p0.patches[chckIndx(L_1426064449, 0, (kxi_p0.patches).length - 1)].oldNode = oldNode_p5;
    }
    
    F.line = 400;
    kxi_p0.patchLen = addInt(kxi_p0.patchLen, 1);
  framePtr = F.prev;

  
}

function diff__pkgZkaraxZkarax_u1246(newNode_p0, oldNode_p1, parent_p2, current_p3, kxi_p4) {
      var Temporary1;

  var F = {procname: "karax.diff", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 492;
    F.filename = "karax.nim";
    var result_1426064612 = eq__pkgZkaraxZkarax_u580(newNode_p0, oldNode_p1, false);
    F.line = 493;
    switch (result_1426064612) {
    case 0:
      F.line = 495;
      kxi_p4.components.push({oldNode: oldNode_p1, newNode: newNode_p0, parent: parent_p2, current: current_p3});;
      break;
    case 3:
    case 2:
      F.line = 500;
      newNode_p0.dom = oldNode_p1.dom;
      if ((result_1426064612 == 2)) {
      F.line = 502;
      updateStyles__pkgZkaraxZkarax_u648(newNode_p0, oldNode_p1);
      F.line = 503;
      updateAttributes__pkgZkaraxZkarax_u1062(newNode_p0, oldNode_p1);
      if ((oldNode_p1.kind == 0)) {
      F.line = 506;
      oldNode_p1.text = newNode_p0.text;
      F.line = 507;
      oldNode_p1.dom.nodeValue = newNode_p0.text;
      }
      
      if ((oldNode_p1.kind == 194)) {
      F.line = 511;
      oldNode_p1.dom.value = newNode_p0.text;
      F.line = 513;
      var checked_1426064629 = getAttr__pkgZkaraxZvdom_u796(newNode_p0, "checked");
      F.line = 514;
      if ((checked_1426064629 == null)) {
      Temporary1 = false;
      }
      else {
      Temporary1 = true;
      }
      
      oldNode_p1.dom.checked = Temporary1;
      }
      
      }
      
      if ((!(((newNode_p0.events).length == 0)) || !(((oldNode_p1.events).length == 0)))) {
      F.line = 517;
      mergeEvents__pkgZkaraxZkarax_u1073(newNode_p0, oldNode_p1, kxi_p4);
      }
      
      F.line = 519;
      var newLength_1426064636 = len__pkgZkaraxZvdom_u817(newNode_p0);
      F.line = 520;
      var oldLength_1426064637 = len__pkgZkaraxZvdom_u817(oldNode_p1);
      if (((newLength_1426064636 == 0) && (oldLength_1426064637 == 0))) {
      F.line = 521;
      break BeforeRet;
      }
      
      F.line = 522;
      var minLength_1426064638 = nimMin(newLength_1426064636, oldLength_1426064637);
      if (!((oldNode_p1.kind == newNode_p0.kind))) {
      F.line = 524;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(524, 5) `oldNode.kind == newNode.kind` "));
      }
      
      F.line = 525;
      var commonPrefix_1426064648 = 0;
      Label2: {
        F.line = 528;
          Label3: while (true) {
          if (!(commonPrefix_1426064648 < minLength_1426064638)) break Label3;
            if ((eq__pkgZkaraxZkarax_u580(HEX5BHEX5D__pkgZkaraxZvdom_u824(newNode_p0, commonPrefix_1426064648), HEX5BHEX5D__pkgZkaraxZvdom_u824(oldNode_p1, commonPrefix_1426064648), true) == 3)) {
            F.line = 530;
            addPatch__pkgZkaraxZkarax_u1082(kxi_p4, 5, null, null, HEX5BHEX5D__pkgZkaraxZvdom_u824(newNode_p0, commonPrefix_1426064648), HEX5BHEX5D__pkgZkaraxZvdom_u824(oldNode_p1, commonPrefix_1426064648));
            F.line = 531;
            commonPrefix_1426064648 = addInt(commonPrefix_1426064648, 1);
            }
            else {
              F.line = 533;
              break Label2;
            }
            
          }
      };
      F.line = 536;
      var oldPos_1426064658 = subInt(oldLength_1426064637, 1);
      F.line = 537;
      var newPos_1426064659 = subInt(newLength_1426064636, 1);
      Label4: {
        F.line = 538;
          Label5: while (true) {
          if (!((commonPrefix_1426064648 <= oldPos_1426064658) && (commonPrefix_1426064648 <= newPos_1426064659))) break Label5;
            if ((eq__pkgZkaraxZkarax_u580(HEX5BHEX5D__pkgZkaraxZvdom_u824(newNode_p0, newPos_1426064659), HEX5BHEX5D__pkgZkaraxZvdom_u824(oldNode_p1, oldPos_1426064658), true) == 3)) {
            F.line = 540;
            addPatch__pkgZkaraxZkarax_u1082(kxi_p4, 5, null, null, HEX5BHEX5D__pkgZkaraxZvdom_u824(newNode_p0, newPos_1426064659), HEX5BHEX5D__pkgZkaraxZvdom_u824(oldNode_p1, oldPos_1426064658));
            F.line = 541;
            oldPos_1426064658 = subInt(oldPos_1426064658, 1);
            F.line = 542;
            newPos_1426064659 = subInt(newPos_1426064659, 1);
            }
            else {
              F.line = 544;
              break Label4;
            }
            
          }
      };
      F.line = 546;
      var pos_1426064674 = addInt(nimMin(oldPos_1426064658, newPos_1426064659), 1);
      Label6: {
        F.line = 548;
        var i_1426064679 = 0;
        F.line = 81;
        F.filename = "iterators_1.nim";
        var colontmp__553664845 = 0;
        F.line = 548;
        F.filename = "karax.nim";
        colontmp__553664845 = subInt(pos_1426064674, 1);
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553664846 = commonPrefix_1426064648;
        Label7: {
          F.line = 97;
            Label8: while (true) {
            if (!(res_553664846 <= colontmp__553664845)) break Label8;
              F.line = 548;
              F.filename = "karax.nim";
              i_1426064679 = res_553664846;
              F.line = 549;
              diff__pkgZkaraxZkarax_u1246(HEX5BHEX5D__pkgZkaraxZvdom_u824(newNode_p0, i_1426064679), HEX5BHEX5D__pkgZkaraxZvdom_u824(oldNode_p1, i_1426064679), current_p3, HEX5BHEX5D__pkgZkaraxZvdom_u824(oldNode_p1, i_1426064679).dom, kxi_p4);
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553664846 = addInt(res_553664846, 1);
            }
        };
      };
      if ((addInt(oldPos_1426064658, 1) == oldLength_1426064637)) {
      Label9: {
        F.line = 552;
        F.filename = "karax.nim";
        var i_1426064684 = 0;
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553664849 = pos_1426064674;
        Label10: {
          F.line = 97;
            Label11: while (true) {
            if (!(res_553664849 <= newPos_1426064659)) break Label11;
              F.line = 552;
              F.filename = "karax.nim";
              i_1426064684 = res_553664849;
              F.line = 553;
              addPatch__pkgZkaraxZkarax_u1082(kxi_p4, 2, current_p3, null, HEX5BHEX5D__pkgZkaraxZvdom_u824(newNode_p0, i_1426064684), null);
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553664849 = addInt(res_553664849, 1);
            }
        };
      };
      }
      else {
        F.line = 555;
        F.filename = "karax.nim";
        var before_1426064685 = current_p3.childNodes[chckIndx(addInt(oldPos_1426064658, 1), 0, (current_p3.childNodes).length - 1)];
        Label12: {
          F.line = 556;
          var i_1426064690 = 0;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553664852 = pos_1426064674;
          Label13: {
            F.line = 97;
              Label14: while (true) {
              if (!(res_553664852 <= newPos_1426064659)) break Label14;
                F.line = 556;
                F.filename = "karax.nim";
                i_1426064690 = res_553664852;
                F.line = 557;
                addPatch__pkgZkaraxZkarax_u1082(kxi_p4, 3, current_p3, before_1426064685, HEX5BHEX5D__pkgZkaraxZvdom_u824(newNode_p0, i_1426064690), null);
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553664852 = addInt(res_553664852, 1);
              }
          };
        };
      }
      
      Label15: {
        F.line = 559;
        F.filename = "karax.nim";
        var i_1426064695 = 0;
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553664855 = pos_1426064674;
        Label16: {
          F.line = 97;
            Label17: while (true) {
            if (!(res_553664855 <= oldPos_1426064658)) break Label17;
              F.line = 559;
              F.filename = "karax.nim";
              i_1426064695 = res_553664855;
              F.line = 560;
              addPatch__pkgZkaraxZkarax_u1082(kxi__, 4, null, null, null, HEX5BHEX5D__pkgZkaraxZvdom_u824(oldNode_p1, i_1426064695));
              F.line = 562;
              addPatch__pkgZkaraxZkarax_u1082(kxi_p4, 1, current_p3, current_p3.childNodes[chckIndx(i_1426064695, 0, (current_p3.childNodes).length - 1)], null, null);
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553664855 = addInt(res_553664855, 1);
            }
        };
      };
      break;
    case 1:
      F.line = 564;
      F.filename = "karax.nim";
      addPatch__pkgZkaraxZkarax_u1082(kxi__, 4, null, null, null, oldNode_p1);
      F.line = 565;
      addPatch__pkgZkaraxZkarax_u1082(kxi_p4, 0, parent_p2, current_p3, newNode_p0, null);
      break;
    case 4:
      if (true) {
      F.line = 566;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(566, 26) `false` eq returned usenewNode"));
      }
      
      break;
    }
  };
  framePtr = F.prev;

  
}

function applyComponents__pkgZkaraxZkarax_u1360(kxi_p0) {
  var F = {procname: "karax.applyComponents", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 574;
    F.filename = "karax.nim";
    var i_1426064722 = 0;
    Label1: {
      F.line = 577;
        Label2: while (true) {
        if (!(i_1426064722 < (kxi_p0.components).length)) break Label2;
          F.line = 578;
          var x_1426064727 = kxi_p0.components[chckIndx(i_1426064722, 0, (kxi_p0.components).length - 1)].oldNode;
          F.line = 579;
          var newNode_1426064728 = kxi_p0.components[chckIndx(i_1426064722, 0, (kxi_p0.components).length - 1)].newNode;
          if ((!(cmpClosures(x_1426064727.changedImpl, null)) && x_1426064727.changedImpl(x_1426064727, newNode_1426064728))) {
          F.line = 585;
          var current_1426064733 = kxi_p0.components[chckIndx(i_1426064722, 0, (kxi_p0.components).length - 1)].current;
          F.line = 586;
          var parent_1426064734 = kxi_p0.components[chckIndx(i_1426064722, 0, (kxi_p0.components).length - 1)].parent;
          F.line = 587;
          x_1426064727.updatedImpl(x_1426064727, newNode_1426064728);
          F.line = 588;
          var oldExpanded_1426064735 = x_1426064727.expanded;
          F.line = 589;
          x_1426064727.expanded = x_1426064727.renderImpl(x_1426064727);
          F.line = 592;
          x_1426064727.renderedVersion = x_1426064727.version;
          if ((oldExpanded_1426064735 == null)) {
          F.line = 594;
          addPatch__pkgZkaraxZkarax_u1082(kxi__, 4, null, null, null, x_1426064727);
          F.line = 595;
          addPatch__pkgZkaraxZkarax_u1082(kxi_p0, 0, parent_1426064734, current_1426064733, x_1426064727.expanded, null);
          }
          else {
            F.line = 599;
            diff__pkgZkaraxZkarax_u1246(x_1426064727.expanded, oldExpanded_1426064735, parent_1426064734, current_1426064733, kxi_p0);
          }
          
          }
          
          F.line = 614;
          i_1426064722 = addInt(i_1426064722, 1);
        }
    };
    F.line = 615;
    if (kxi_p0.components.length < 0) { for (var i = kxi_p0.components.length ; i < 0 ; ++i) kxi_p0.components.push(({oldNode: null, newNode: null, parent: null, current: null})); }
               else { kxi_p0.components.length = 0; };
  framePtr = F.prev;

  
}

function reapplyEvents__pkgZkaraxZkarax_u329(n_p0) {
  var F = {procname: "karax.reapplyEvents", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 155;
    F.filename = "karax.nim";
    removeAllEventHandlers__pkgZkaraxZkarax_u149(n_p0.dom);
    F.line = 156;
    applyEvents__pkgZkaraxZkarax_u318(n_p0);
  framePtr = F.prev;

  
}

function moveDom__pkgZkaraxZkarax_u1176(dest_p0, src_p1) {
  var F = {procname: "karax.moveDom", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 414;
    F.filename = "karax.nim";
    dest_p0.dom = src_p1.dom;
    F.line = 415;
    src_p1.dom = null;
    F.line = 416;
    reapplyEvents__pkgZkaraxZkarax_u329(dest_p0);
    if (!((dest_p0.id == null))) {
    F.line = 418;
    kxi__.byId[dest_p0.id] = dest_p0;
    }
    
    if (!((len__pkgZkaraxZvdom_u817(dest_p0) == len__pkgZkaraxZvdom_u817(src_p1)))) {
    F.line = 419;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(419, 3) `dest.len == src.len` "));
    }
    
    Label1: {
      F.line = 420;
      var i_1426064554 = 0;
      F.line = 126;
      F.filename = "iterators_1.nim";
      var colontmp__553664901 = 0;
      F.line = 420;
      F.filename = "karax.nim";
      colontmp__553664901 = len__pkgZkaraxZvdom_u817(dest_p0);
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664902 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553664902 < colontmp__553664901)) break Label3;
            F.line = 420;
            F.filename = "karax.nim";
            i_1426064554 = i_553664902;
            F.line = 421;
            moveDom__pkgZkaraxZkarax_u1176(HEX5BHEX5D__pkgZkaraxZvdom_u824(dest_p0, i_1426064554), HEX5BHEX5D__pkgZkaraxZvdom_u824(src_p1, i_1426064554));
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664902 = addInt(i_553664902, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function HEX5BHEX5DHEX3D__pkgZkaraxZvdom_u828(x_p0, idx_p1, y_p2) {
  var F = {procname: "vdom.[]=", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 300;
    F.filename = "vdom.nim";
    x_p0.kids[chckIndx(idx_p1, 0, (x_p0.kids).length - 1)] = y_p2;
  framePtr = F.prev;

  
}

function applyPatch__pkgZkaraxZkarax_u1195(kxi_p0) {
  var F = {procname: "karax.applyPatch", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 424;
      F.filename = "karax.nim";
      var i_1426064561 = 0;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664895 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553664895 < kxi_p0.patchLen)) break Label3;
            F.line = 424;
            F.filename = "karax.nim";
            i_1426064561 = i_553664895;
            F.line = 425;
            var p_1426064562 = nimCopy(null, kxi_p0.patches[chckIndx(i_1426064561, 0, (kxi_p0.patches).length - 1)], NTI1426063368);
            F.line = 426;
            switch (p_1426064562.k) {
            case 0:
              F.line = 428;
              var nn_1426064563 = toDom__pkgZkaraxZkarax_u347(p_1426064562.newNode, true, kxi_p0);
              if ((p_1426064562.parent == null)) {
              F.line = 430;
              replaceById__pkgZkaraxZkarax_u567(kxi_p0.rootId, nn_1426064563);
              }
              else {
                if ((p_1426064562.current.parentNode == p_1426064562.parent)) {
                F.line = 433;
                p_1426064562.parent.replaceChild(nn_1426064563, p_1426064562.current);
                }
                else {
                  F.line = 435;
                p_1426064562.parent.appendChild(nn_1426064563);
                }
                
              }
              
              break;
            case 5:
              F.line = 437;
              moveDom__pkgZkaraxZkarax_u1176(p_1426064562.newNode, p_1426064562.oldNode);
              break;
            case 1:
              F.line = 439;
              p_1426064562.parent.removeChild(p_1426064562.current);
              break;
            case 2:
              F.line = 441;
              var nn_1426064572 = toDom__pkgZkaraxZkarax_u347(p_1426064562.newNode, true, kxi_p0);
              F.line = 442;
              p_1426064562.parent.appendChild(nn_1426064572);
              break;
            case 3:
              F.line = 444;
              var nn_1426064573 = toDom__pkgZkaraxZkarax_u347(p_1426064562.newNode, true, kxi_p0);
              F.line = 445;
              p_1426064562.parent.insertBefore(nn_1426064573, p_1426064562.current);
              break;
            case 4:
              F.line = 447;
              var n_1426064574 = p_1426064562.oldNode;
              if (!((n_1426064574.id == null))) {
              F.line = 448;
              delete kxi_p0.byId[n_1426064574.id];
              }
              
              if ((n_1426064574.kind == 5)) {
              F.line = 450;
              var x_1426064584 = n_1426064574;
              if (!(cmpClosures(x_1426064584.onDetachImpl, null))) {
              F.line = 451;
              x_1426064584.onDetachImpl(x_1426064584);
              }
              
              }
              
              if (!(kxi_p0.surpressRedraws)) {
              F.line = 453;
              n_1426064574.dom = null;
              }
              
              break;
            }
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664895 = addInt(i_553664895, 1);
          }
      };
    };
    F.line = 454;
    F.filename = "karax.nim";
    kxi_p0.patchLen = 0;
    Label4: {
      F.line = 455;
      var i_1426064593 = 0;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553664898 = 0;
      Label5: {
        F.line = 129;
          Label6: while (true) {
          if (!(i_553664898 < kxi_p0.patchLenV)) break Label6;
            F.line = 455;
            F.filename = "karax.nim";
            i_1426064593 = i_553664898;
            F.line = 456;
            var p_1426064594 = nimCopy(null, kxi_p0.patchesV[chckIndx(i_1426064593, 0, (kxi_p0.patchesV).length - 1)], NTI1426063369);
            F.line = 457;
            HEX5BHEX5DHEX3D__pkgZkaraxZvdom_u828(p_1426064594.parent, p_1426064594.pos, p_1426064594.newChild);
            if (!(!((p_1426064594.newChild.dom == null)))) {
            F.line = 458;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim(458, 5) `p.newChild.dom != nil` "));
            }
            
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553664898 = addInt(i_553664898, 1);
          }
      };
    };
    F.line = 459;
    F.filename = "karax.nim";
    kxi_p0.patchLenV = 0;
  framePtr = F.prev;

  
}

function dodraw__pkgZkaraxZkarax_u1449(kxi_p0) {
    var Temporary1;

  var F = {procname: "karax.dodraw", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 676;
    F.filename = "karax.nim";
    var HEX3Aenv_553664557 = null;
    F.line = 676;
    HEX3Aenv_553664557 = {m_type: NTI553659611, kxi0: null};
    F.line = 675;
    HEX3Aenv_553664557.kxi0 = kxi_p0;
    if ((HEX3Aenv_553664557.kxi0.renderer == null)) {
    F.line = 676;
    break BeforeRet;
    }
    
    F.line = 677;
    HEX3Aenv_553664557.kxi0.renderId = 0;
    if (HEX3Aenv_553664557.kxi0.rendering) {
    F.line = 681;
    Temporary1 = HEX3Aanonymous__pkgZkaraxZkarax_u1454.bind(HEX3Aenv_553664557); Temporary1.ClP_0 = HEX3Aanonymous__pkgZkaraxZkarax_u1454; Temporary1.ClE_0 = HEX3Aenv_553664557;
    HEX3Aenv_553664557.kxi0.renderId = window.requestAnimationFrame(Temporary1);
    F.line = 682;
    break BeforeRet;
    }
    
    F.line = 684;
    HEX3Aenv_553664557.kxi0.rendering = true;
    F.line = 686;
    var rdata_1426064815 = {hashPart: null, queryString: null};
    if ((window.location.hash.indexOf("?")>=0)) {
    F.line = 688;
    var hashSplit_1426064816 = window.location.hash.split("?");
    F.line = 689;
    rdata_1426064815.hashPart = hashSplit_1426064816[chckIndx(0, 0, (hashSplit_1426064816).length - 1)];
    F.line = 690;
    rdata_1426064815.queryString = (HEX5BHEX5D__pkgZkaraxZkarax_u1466(hashSplit_1426064816, HEX2EHEX2E__stdZenumutils_u105(1, 1)).join("?"));
    }
    else {
      F.line = 692;
      rdata_1426064815.hashPart = window.location.hash;
      F.line = 693;
      rdata_1426064815.queryString = window.location.search;
    }
    
    F.line = 695;
    var newtree_1426064850 = HEX3Aenv_553664557.kxi0.renderer(rdata_1426064815);
    F.line = 696;
    HEX3Aenv_553664557.kxi0.runCount = addInt(HEX3Aenv_553664557.kxi0.runCount, 1);
    F.line = 697;
    newtree_1426064850.id = HEX3Aenv_553664557.kxi0.rootId;
    F.line = 698;
    HEX3Aenv_553664557.kxi0.toFocus = null;
    if ((HEX3Aenv_553664557.kxi0.currentTree == null)) {
    F.line = 700;
    var asdom_1426064860 = toDom__pkgZkaraxZkarax_u347(newtree_1426064850, true, HEX3Aenv_553664557.kxi0);
    F.line = 701;
    replaceById__pkgZkaraxZkarax_u567(HEX3Aenv_553664557.kxi0.rootId, asdom_1426064860);
    }
    else {
      F.line = 705;
      var olddom_1426064861 = document.getElementById(HEX3Aenv_553664557.kxi0.rootId);
      F.line = 706;
      diff__pkgZkaraxZkarax_u1246(newtree_1426064850, HEX3Aenv_553664557.kxi0.currentTree, null, olddom_1426064861, HEX3Aenv_553664557.kxi0);
    }
    
    F.line = 710;
    applyComponents__pkgZkaraxZkarax_u1360(HEX3Aenv_553664557.kxi0);
    F.line = 715;
    applyPatch__pkgZkaraxZkarax_u1195(HEX3Aenv_553664557.kxi0);
    F.line = 716;
    HEX3Aenv_553664557.kxi0.currentTree = newtree_1426064850;
    if (!((HEX3Aenv_553664557.kxi0.postRenderCallback == null))) {
    F.line = 721;
    HEX3Aenv_553664557.kxi0.postRenderCallback(rdata_1426064815);
    }
    
    if (!((HEX3Aenv_553664557.kxi0.toFocus == null))) {
    F.line = 725;
    HEX3Aenv_553664557.kxi0.toFocus.focus();
    }
    
    F.line = 726;
    HEX3Aenv_553664557.kxi0.rendering = false;
  };
  framePtr = F.prev;

  
}

function init__pkgZkaraxZkarax_u1551(ev_p0) {
    var Temporary1;

function HEX3Aanonymous__pkgZkaraxZkarax_u1553() {
  var F = {procname: "init.:anonymous", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 747;
    F.filename = "karax.nim";
    dodraw__pkgZkaraxZkarax_u1449(kxi__);
  framePtr = F.prev;

  
}

  var F = {procname: "karax.init", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 747;
    F.filename = "karax.nim";
    Temporary1 = HEX3Aanonymous__pkgZkaraxZkarax_u1553.bind(null); Temporary1.ClP_0 = HEX3Aanonymous__pkgZkaraxZkarax_u1553; Temporary1.ClE_0 = null;
    kxi__.renderId = window.requestAnimationFrame(Temporary1);
  framePtr = F.prev;

  
}

function HEX3Aanonymous__pkgZkaraxZkarax_u1548() {
  var F = {procname: "redraw.:anonymous", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 740;
    F.filename = "karax.nim";
    dodraw__pkgZkaraxZkarax_u1449(this.kxi0);
  framePtr = F.prev;

  
}

function redraw__pkgZkaraxZkarax_u1546(kxi_p0) {
    var Temporary1;

  var F = {procname: "karax.redraw", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 739;
    F.filename = "karax.nim";
    var HEX3Aenv_553664907 = null;
    F.line = 739;
    HEX3Aenv_553664907 = {m_type: NTI553659774, kxi0: null};
    F.line = 732;
    HEX3Aenv_553664907.kxi0 = kxi_p0;
    if ((HEX3Aenv_553664907.kxi0.renderId == 0)) {
    F.line = 740;
    Temporary1 = HEX3Aanonymous__pkgZkaraxZkarax_u1548.bind(HEX3Aenv_553664907); Temporary1.ClP_0 = HEX3Aanonymous__pkgZkaraxZkarax_u1548; Temporary1.ClE_0 = HEX3Aenv_553664907;
    HEX3Aenv_553664907.kxi0.renderId = window.requestAnimationFrame(Temporary1);
    }
    
  framePtr = F.prev;

  
}

function setRenderer__pkgZkaraxZkarax_u1585(renderer_p0, root_p1, clientPostRenderCallback_p2) {
    var Temporary1;
    var Temporary2;

function HEX3Aanonymous__pkgZkaraxZkarax_u1709() {
  var F = {procname: "setRenderer.:anonymous", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 770;
    F.filename = "karax.nim";
    redraw__pkgZkaraxZkarax_u1546(kxi__);
  framePtr = F.prev;

  
}

  var result_1426064953 = null;

  var F = {procname: "karax.setRenderer", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    if ((document.getElementById(root_p1) == null)) {
    F.line = 756;
    F.filename = "karax.nim";
    var msg_1426064957 = (("Could not find a <div> with id=" + root_p1) + ". Karax needs it as its rendering target.");
    F.line = 758;
    raiseException({message: cstrToNimstr(msg_1426064957), parent: null, m_type: NTI33555171, name: null, trace: [], up: null}, "Exception");
    }
    
    F.line = 760;
    result_1426064953 = {rootId: root_p1, renderer: renderer_p0, postRenderCallback: clientPostRenderCallback_p2, patches: newSeq__pkgZkaraxZkarax_u1615(60), patchesV: newSeq__pkgZkaraxZkarax_u1656(30), components: [], surpressRedraws: false, byId: {}, orphans: {}, currentTree: null, toFocus: null, toFocusV: null, renderId: 0, rendering: false, patchLen: 0, patchLenV: 0, runCount: 0};
    F.line = 768;
    kxi__ = result_1426064953;
    F.line = 769;
    Temporary1 = init__pkgZkaraxZkarax_u1551.bind(null); Temporary1.ClP_0 = init__pkgZkaraxZkarax_u1551; Temporary1.ClE_0 = null;
    window.addEventListener("load", Temporary1, false);
    F.line = 770;
    Temporary2 = HEX3Aanonymous__pkgZkaraxZkarax_u1709.bind(null); Temporary2.ClP_0 = HEX3Aanonymous__pkgZkaraxZkarax_u1709; Temporary2.ClE_0 = null;
    window.onhashchange = Temporary2;
  framePtr = F.prev;

  return result_1426064953;

}

function wrapRenderer__pkgZkaraxZkarax_u1873(data_p0) {
  var result_1426065235 = null;

  var F = {procname: "setRenderer.wrapRenderer", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 775;
    F.filename = "karax.nim";
    result_1426065235 = this.renderer0();
  framePtr = F.prev;

  return result_1426065235;

}

function wrapPostRender__pkgZkaraxZkarax_u1876(data_p0) {
  var F = {procname: "setRenderer.wrapPostRender", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    if (!(cmpClosures(this.clientPostRenderCallback1, null))) {
    F.line = 777;
    F.filename = "karax.nim";
    this.clientPostRenderCallback1();
    }
    
  framePtr = F.prev;

  
}

function setRenderer__pkgZkaraxZkarax_u1866(renderer_p0, root_p1, clientPostRenderCallback_p2) {
    var Temporary1;
    var Temporary2;

  var result_1426065232 = null;

  var F = {procname: "karax.setRenderer", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 778;
    F.filename = "karax.nim";
    var HEX3Aenv_553664508 = null;
    F.line = 778;
    HEX3Aenv_553664508 = {m_type: NTI553659579, renderer0: null, clientPostRenderCallback1: null};
    F.line = 772;
    HEX3Aenv_553664508.renderer0 = renderer_p0;
    F.line = 773;
    HEX3Aenv_553664508.clientPostRenderCallback1 = clientPostRenderCallback_p2;
    F.line = 774;
    Temporary1 = wrapRenderer__pkgZkaraxZkarax_u1873.bind(HEX3Aenv_553664508); Temporary1.ClP_0 = wrapRenderer__pkgZkaraxZkarax_u1873; Temporary1.ClE_0 = HEX3Aenv_553664508;
    Temporary2 = wrapPostRender__pkgZkaraxZkarax_u1876.bind(HEX3Aenv_553664508); Temporary2.ClP_0 = wrapPostRender__pkgZkaraxZkarax_u1876; Temporary2.ClE_0 = HEX3Aenv_553664508;
    result_1426065232 = setRenderer__pkgZkaraxZkarax_u1585(Temporary1, root_p1, Temporary2);
  framePtr = F.prev;

  return result_1426065232;

}

function newVNode__pkgZkaraxZvdom_u915(kind_p0) {
  var result_1459618709 = null;

  var F = {procname: "vdom.newVNode", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 311;
    F.filename = "vdom.nim";
    result_1459618709 = {kind: kind_p0, index: (-1), m_type: NTI1459617886, id: null, class: null, text: null, kids: [], attrs: [], events: [], style: null, styleVersion: 0, dom: null};
  framePtr = F.prev;

  return result_1459618709;

}

function add__pkgZkaraxZvdom_u832(parent_p0, kid_p1) {
  var F = {procname: "vdom.add", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 305;
    F.filename = "vdom.nim";
    parent_p0.kids.push(kid_p1);;
  framePtr = F.prev;

  
}

function tree__pkgZkaraxZvdom_u918(kind_p0, kids_p1) {
  var result_1459618713 = null;

  var F = {procname: "vdom.tree", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 314;
    F.filename = "vdom.nim";
    result_1459618713 = newVNode__pkgZkaraxZvdom_u915(kind_p0);
    Label1: {
      F.line = 315;
      var k_1459618726 = null;
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553664955 = 0;
      Label2: {
        F.line = 19;
          Label3: while (true) {
          if (!(i_553664955 < (kids_p1).length)) break Label3;
            F.line = 315;
            F.filename = "vdom.nim";
            k_1459618726 = kids_p1[chckIndx(i_553664955, 0, (kids_p1).length - 1)];
            F.line = 315;
            add__pkgZkaraxZvdom_u832(result_1459618713, k_1459618726);
            F.line = 13;
            F.filename = "iterators.nim";
            i_553664955 += 1;
          }
      };
    };
  framePtr = F.prev;

  return result_1459618713;

}

function setAttr__pkgZkaraxZvdom_u747(n_p0, key_p1, val_p2) {
  var F = {procname: "vdom.setAttr", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((n_p0.attrs).length == 0)) {
    F.line = 248;
    F.filename = "vdom.nim";
    n_p0.attrs = nimCopy(null, [key_p1, val_p2], NTI1459618074);
    }
    else {
      Label1: {
        F.line = 250;
        var i_1459618559 = 0;
        F.line = 46;
        F.filename = "iterators_1.nim";
        var colontmp__553664958 = 0;
        F.line = 250;
        F.filename = "vdom.nim";
        colontmp__553664958 = subInt((n_p0.attrs).length, 2);
        F.line = 68;
        F.filename = "iterators_1.nim";
        var res_553664959 = 0;
        Label2: {
          F.line = 69;
            Label3: while (true) {
            if (!(res_553664959 <= colontmp__553664958)) break Label3;
              F.line = 250;
              F.filename = "vdom.nim";
              i_1459618559 = res_553664959;
              if ((n_p0.attrs[chckIndx(i_1459618559, 0, (n_p0.attrs).length - 1)] == key_p1)) {
              F.line = 252;
              n_p0.attrs[chckIndx(addInt(i_1459618559, 1), 0, (n_p0.attrs).length - 1)] = val_p2;
              F.line = 253;
              break BeforeRet;
              }
              
              F.line = 74;
              F.filename = "iterators_1.nim";
              res_553664959 = addInt(res_553664959, 2);
            }
        };
      };
      F.line = 254;
      F.filename = "vdom.nim";
      n_p0.attrs.push(key_p1);;
      F.line = 255;
      n_p0.attrs.push(val_p2);;
    }
    
  };
  framePtr = F.prev;

  
}

function setAttr__pkgZkaraxZvdom_u792(n_p0, key_p1, val_p2) {
    var Temporary1;

  var F = {procname: "vdom.setAttr", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 259;
    F.filename = "vdom.nim";
    if (val_p2) {
    Temporary1 = "";
    }
    else {
    Temporary1 = null;
    }
    
    setAttr__pkgZkaraxZvdom_u747(n_p0, key_p1, Temporary1);
  framePtr = F.prev;

  
}

function text__pkgZkaraxZvdom_u986(s_p0) {
  var result_1459618780 = null;

  var F = {procname: "vdom.text", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 323;
    F.filename = "vdom.nim";
    result_1459618780 = {kind: 0, text: toJSStr(s_p0), index: (-1), m_type: NTI1459617886, id: null, class: null, kids: [], attrs: [], events: [], style: null, styleVersion: 0, dom: null};
  framePtr = F.prev;

  return result_1459618780;

}

function addEventListener__pkgZkaraxZvdom_u1037(n_p0, event_p1, handler_p2) {
  var F = {procname: "vdom.addEventListener", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 347;
    F.filename = "vdom.nim";
    n_p0.events.push({Field0: event_p1, Field1: handler_p2, Field2: null});;
  framePtr = F.prev;

  
}

function wrapper__pkgZkaraxZkarax_u1964(ev_p0, n_p1) {
  var F = {procname: "addEventHandler.wrapper", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 816;
    F.filename = "karax.nim";
    this.action0(ev_p0, n_p1);
    if (!(this.kxi1.surpressRedraws)) {
    F.line = 817;
    redraw__pkgZkaraxZkarax_u1546(this.kxi1);
    }
    
  framePtr = F.prev;

  
}

function addEventHandler__pkgZkaraxZkarax_u1959(n_p0, k_p1, action_p2, kxi_p3) {
    var Temporary1;

  var F = {procname: "karax.addEventHandler", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 818;
    F.filename = "karax.nim";
    var HEX3Aenv_553664965 = null;
    F.line = 818;
    HEX3Aenv_553664965 = {m_type: NTI553659815, action0: null, kxi1: null};
    F.line = 808;
    HEX3Aenv_553664965.action0 = action_p2;
    F.line = 809;
    HEX3Aenv_553664965.kxi1 = kxi_p3;
    F.line = 818;
    Temporary1 = wrapper__pkgZkaraxZkarax_u1964.bind(HEX3Aenv_553664965); Temporary1.ClP_0 = wrapper__pkgZkaraxZkarax_u1964; Temporary1.ClE_0 = HEX3Aenv_553664965;
    addEventListener__pkgZkaraxZvdom_u1037(n_p0, k_p1, Temporary1);
  framePtr = F.prev;

  
}

function wrapper__pkgZkaraxZkarax_u1973(ev_p0, n_p1) {
  var F = {procname: "addEventHandler.wrapper", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 828;
    F.filename = "karax.nim";
    this.action0();
    if (!(this.kxi1.surpressRedraws)) {
    F.line = 829;
    redraw__pkgZkaraxZkarax_u1546(this.kxi1);
    }
    
  framePtr = F.prev;

  
}

function addEventHandler__pkgZkaraxZkarax_u1967(n_p0, k_p1, action_p2, kxi_p3) {
    var Temporary1;

  var F = {procname: "karax.addEventHandler", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 830;
    F.filename = "karax.nim";
    var HEX3Aenv_553665002 = null;
    F.line = 830;
    HEX3Aenv_553665002 = {m_type: NTI553659835, action0: null, kxi1: null};
    F.line = 820;
    HEX3Aenv_553665002.action0 = action_p2;
    F.line = 821;
    HEX3Aenv_553665002.kxi1 = kxi_p3;
    F.line = 830;
    Temporary1 = wrapper__pkgZkaraxZkarax_u1973.bind(HEX3Aenv_553665002); Temporary1.ClP_0 = wrapper__pkgZkaraxZkarax_u1973; Temporary1.ClE_0 = HEX3Aenv_553665002;
    addEventListener__pkgZkaraxZvdom_u1037(n_p0, k_p1, Temporary1);
  framePtr = F.prev;

  
}

function clearTerminal__lisp_u12() {
  var F = {procname: "lisp.clearTerminal", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 62;
    F.filename = "lisp.nim";
          console.clear();
      term.clear();
    
  framePtr = F.prev;

  
}

function nsuContinuesWith(s_p0, substr_p1, start_p2) {
  var result_738198999 = false;

  var F = {procname: "strutils.continuesWith", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1692;
    F.filename = "strutils.nim";
    result_738198999 = false;
    F.line = 1693;
    var i_738199000 = 0;
    Label1: {
      F.line = 1694;
        Label2: while (true) {
        if (!true) break Label2;
          if (((substr_p1).length <= i_738199000)) {
          F.line = 1695;
          result_738198999 = true;
          break BeforeRet;
          }
          
          if ((((s_p0).length <= addInt(i_738199000, start_p2)) || !((s_p0[chckIndx(addInt(i_738199000, start_p2), 0, (s_p0).length - 1)] == substr_p1[chckIndx(i_738199000, 0, (substr_p1).length - 1)])))) {
          F.line = 1696;
          result_738198999 = false;
          break BeforeRet;
          }
          
          F.line = 1697;
          i_738199000 = addInt(i_738199000, 1);
        }
    };
  };
  framePtr = F.prev;

  return result_738198999;

}

function multiReplace__pureZstrutils_u1930(s_p0, replacements_p1) {
                      var Temporary10;

  var result_738199437 = [];

  var F = {procname: "strutils.multiReplace", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2312;
    F.filename = "strutils.nim";
    result_738199437 = nimCopy(null, mnewString(0), NTI33554449);
    F.line = 2313;
    var i_738199438 = 0;
    F.line = 2314;
    var fastChk_738199439 = nimCopy(null, ConstSet6, NTI738198881);
    Label1: {
      F.line = 2315;
      var sub_738199453 = [];
      F.line = 2315;
      var by_738199454 = [];
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553665043 = 0;
      Label2: {
        F.line = 19;
          Label3: while (true) {
          if (!(i_553665043 < (replacements_p1).length)) break Label3;
            F.line = 2315;
            F.filename = "strutils.nim";
            sub_738199453 = replacements_p1[chckIndx(i_553665043, 0, (replacements_p1).length - 1)]["Field0"];
            F.line = 2315;
            by_738199454 = replacements_p1[chckIndx(i_553665043, 0, (replacements_p1).length - 1)]["Field1"];
            if ((0 < (sub_738199453).length)) {
            F.line = 2318;
            fastChk_738199439[sub_738199453[chckIndx(0, 0, (sub_738199453).length - 1)]] = true;
            }
            
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665043 += 1;
          }
      };
    };
    Label4: {
      F.line = 2319;
      F.filename = "strutils.nim";
        Label5: while (true) {
        if (!(i_738199438 < (s_p0).length)) break Label5;
          Label6: {
            if ((fastChk_738199439[s_p0[chckIndx(i_738199438, 0, (s_p0).length - 1)]] != undefined)) {
            Label7: {
              F.line = 2323;
              var sub_738199467 = [];
              F.line = 2323;
              var by_738199468 = [];
              F.line = 18;
              F.filename = "iterators.nim";
              var i_553665047 = 0;
              Label8: {
                F.line = 19;
                  Label9: while (true) {
                  if (!(i_553665047 < (replacements_p1).length)) break Label9;
                    F.line = 2323;
                    F.filename = "strutils.nim";
                    sub_738199467 = replacements_p1[chckIndx(i_553665047, 0, (replacements_p1).length - 1)]["Field0"];
                    F.line = 2323;
                    by_738199468 = replacements_p1[chckIndx(i_553665047, 0, (replacements_p1).length - 1)]["Field1"];
                      if (!(0 < (sub_738199467).length)) Temporary10 = false; else {                        Temporary10 = nsuContinuesWith(s_p0, sub_738199467, chckRange(i_738199438, 0, 2147483647));                      }                    if (Temporary10) {
                    F.line = 2325;
                    result_738199437.push.apply(result_738199437, by_738199468);;
                    F.line = 2326;
                    i_738199438 = addInt(i_738199438, (sub_738199467).length);
                    F.line = 2327;
                    break Label6;
                    }
                    
                    F.line = 13;
                    F.filename = "iterators.nim";
                    i_553665047 += 1;
                  }
              };
            };
            }
            
            F.line = 2330;
            F.filename = "strutils.nim";
            addChar(result_738199437, s_p0[chckIndx(i_738199438, 0, (s_p0).length - 1)]);;
            F.line = 2331;
            i_738199438 = addInt(i_738199438, 1);
          };
        }
    };
  framePtr = F.prev;

  return result_738199437;

}

function print__lisp_u13(s_p0) {
  var F = {procname: "lisp.print", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 68;
    F.filename = "lisp.nim";
    rawEcho(s_p0);
    F.line = 70;
    var cs_553648143 = toJSStr(multiReplace__pureZstrutils_u1930(s_p0, [nimCopy(null, {Field0: [13], Field1: []}, NTI553648138), nimCopy(null, {Field0: [10], Field1: [13,10]}, NTI553648138)]));
    F.line = 71;
    term.write(cs_553648143);
    F.line = 72;
    term.write("\r\n");
  framePtr = F.prev;

  
}

function styled__lisp_u15853(s_p0, color_p1) {
  var result_553663984 = [];

  var F = {procname: "lisp.styled", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2234;
    F.filename = "lisp.nim";
    result_553663984 = nimCopy(null, ([27,91]).concat(color_p1,[109],s_p0,[27,91,48,109]), NTI33554449);
  framePtr = F.prev;

  return result_553663984;

}

function HEX5BHEX5D__lisp_u8998(s_p0, i_p1) {
  var result_553657130 = null;
  var result_553657130_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_553657130 = s_p0; result_553657130_Idx = chckIndx(subInt((s_p0).length, i_p1), 0, (s_p0).length - 1);
  framePtr = F.prev;

  return [result_553657130, result_553657130_Idx];

}

function delete__lisp_u9180(x_p0, x_p0_Idx, i_p1) {
  var F = {procname: "delete.delete", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    if (((x_p0[x_p0_Idx]).length - 1 < i_p1)) {
    F.line = 2032;
    F.filename = "system.nim";
    raiseException({message: ([105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,39]).concat(HEX24__systemZdollars_u8(i_p1),[39,32,60,32,39],HEX24__systemZdollars_u8((x_p0[x_p0_Idx]).length),[39,32,102,97,105,108,101,100]), m_type: NTI134217749, parent: null, name: null, trace: [], up: null}, "IndexDefect");
    }
    
    F.line = 2043;
    x_p0[x_p0_Idx].splice(i_p1, 1);
  framePtr = F.prev;

  
}

function pop__lisp_u8100(s_p0, s_p0_Idx) {
  var result_553656231 = null;

  var F = {procname: "pop.pop", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1791;
    F.filename = "system.nim";
    var L_553656235 = subInt((s_p0[s_p0_Idx]).length, 1);
    F.line = 1796;
    result_553656231 = s_p0[s_p0_Idx][chckIndx(L_553656235, 0, (s_p0[s_p0_Idx]).length - 1)];
    F.line = 1797;
    if (s_p0[s_p0_Idx].length < chckRange(L_553656235, 0, 2147483647)) { for (var i = s_p0[s_p0_Idx].length ; i < chckRange(L_553656235, 0, 2147483647) ; ++i) s_p0[s_p0_Idx].push(null); }
               else { s_p0[s_p0_Idx].length = chckRange(L_553656235, 0, 2147483647); };
  framePtr = F.prev;

  return result_553656231;

}

function add__lisp_u8865(x_p0, x_p0_Idx, y_p1) {
    var Temporary1;

  var F = {procname: "add.add", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1204;
    F.filename = "system.nim";
    var xl_553657000 = (x_p0[x_p0_Idx]).length;
    F.line = 1205;
    if (x_p0[x_p0_Idx].length < (Temporary1 = chckRange(addInt(xl_553657000, (y_p1).length), 0, 2147483647), Temporary1)) { for (var i = x_p0[x_p0_Idx].length ; i < Temporary1 ; ++i) x_p0[x_p0_Idx].push(null); }
               else { x_p0[x_p0_Idx].length = Temporary1; };
    Label2: {
      F.line = 1206;
      var i_553657015 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665061 = 0;
      F.line = 1206;
      F.filename = "system.nim";
      colontmp__553665061 = (y_p1).length - 1;
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665062 = 0;
      Label3: {
        F.line = 97;
          Label4: while (true) {
          if (!(res_553665062 <= colontmp__553665061)) break Label4;
            F.line = 1206;
            F.filename = "system.nim";
            i_553657015 = res_553665062;
            F.line = 1206;
            x_p0[x_p0_Idx][chckIndx(addInt(xl_553657000, i_553657015), 0, (x_p0[x_p0_Idx]).length - 1)] = y_p1[chckIndx(i_553657015, 0, (y_p1).length - 1)];
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665062 = addInt(res_553665062, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function postProcessing__lisp_u8847(root_p0) {
          var Temporary3;
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;
            var Temporary9;
            var Temporary10;
            var Temporary11;
            var Temporary12;
            var Temporary13;
            var Temporary14;
          var Temporary15;
          var Temporary16;
          var Temporary17;
          var Temporary18;
          var Temporary19;
          var Temporary20;
          var Temporary21;

  var F = {procname: "lisp.postProcessing", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 1010;
    F.filename = "lisp.nim";
    var stack_553656981 = [[root_p0]];
    Label1: {
      F.line = 1011;
        Label2: while (true) {
        if (!(0 < (stack_553656981[0]).length)) break Label2;
          F.line = 1012;
          var n_553656988 = pop__lisp_u8100(stack_553656981, 0);
          if ((n_553656988.kind == 1)) {
          F.line = 1014;
          var Temporary3 = n_553656988;
          if (ConstSet40[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
          add__lisp_u8865(stack_553656981, 0, Temporary3.kids);
            var Temporary4 = n_553656988;
            if (ConstSet41[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
          if (((Temporary4.kids).length == 3)) {
            var Temporary5 = n_553656988;
            if (ConstSet42[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
          if (((Temporary6 = Temporary5.kids, Temporary6)[chckIndx(0, 0, (Temporary6).length - 1)].kind == 3)) {
            var Temporary7 = n_553656988;
            if (ConstSet45[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
            var Temporary9 = (Temporary8 = Temporary7.kids, Temporary8)[chckIndx(0, 0, (Temporary8).length - 1)];
            if (ConstSet44[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
          if ((ConstSet43[Temporary9.keyword] != undefined)) {
          if (true) {
          F.line = 282;
          var inst_553657029 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1018, Field2: 13};
          F.line = 283;
          raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657029.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_553656988.line),makeNimstrLit("): Binary operator must be used like this: (a + b) instead of (+ a b)")));
          }
          
          }
          
          }
          else {
            var Temporary10 = n_553656988;
            if (ConstSet46[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
          if (((Temporary11 = Temporary10.kids, Temporary11)[chckIndx(1, 0, (Temporary11).length - 1)].kind == 3)) {
            var Temporary12 = n_553656988;
            if (ConstSet49[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI553648176)); }
            var Temporary14 = (Temporary13 = Temporary12.kids, Temporary13)[chckIndx(1, 0, (Temporary13).length - 1)];
            if (ConstSet48[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648176)); }
          if ((ConstSet47[Temporary14.keyword] != undefined)) {
          var Temporary15 = n_553656988;
          if (ConstSet50[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI553648176)); }
          F.line = 1021;
          var Temporary16 = n_553656988;
          if (ConstSet51[Temporary16.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary16.kind, NTI553648176)); }
          var Temporary18 = n_553656988;
          if (ConstSet52[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI553648176)); }
          var Temporary20 = n_553656988;
          if (ConstSet53[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI553648176)); }
          Temporary15.kids = nimCopy(null, [(Temporary17 = Temporary16.kids, Temporary17)[chckIndx(1, 0, (Temporary17).length - 1)], (Temporary19 = Temporary18.kids, Temporary19)[chckIndx(0, 0, (Temporary19).length - 1)], (Temporary21 = Temporary20.kids, Temporary21)[chckIndx(2, 0, (Temporary21).length - 1)]], NTI553654345);
          }
          
          }
          }
          }
          
          }
          
        }
    };
  framePtr = F.prev;

  
}

function buildAst__lisp_u8946(tokens_p0) {
              var Temporary4;
              var Temporary5;
              var Temporary6;
              var Temporary7;
              var Temporary8;
              var Temporary9;
              var Temporary10;
                var Temporary11;
              var Temporary12;
              var Temporary13;
              var Temporary14;
              var Temporary15;
              var Temporary16;
              var Temporary17;
              var Temporary18;
              var Temporary19;
              var Temporary20;
              var Temporary21;
              var Temporary22;
              var Temporary23;
              var Temporary24;
              var Temporary25;
              var Temporary26;
              var Temporary27;
              var Temporary28;
              var Temporary29;
              var Temporary30;
              var Temporary31;
              var Temporary32;
              var Temporary33;
              var Temporary34;
              var Temporary35;
              var Temporary36;

  var result_553657076 = null;

  var F = {procname: "lisp.buildAst", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 1024;
    F.filename = "lisp.nim";
    result_553657076 = {kind: 1, line: 1, kids: [{kind: 3, keyword: 8, line: 1, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null}], listType: null, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
    F.line = 1026;
    var stack_553657085 = [[result_553657076]];
    F.line = 1027;
    var currentTags_553657086 = {};
    Label1: {
      F.line = 1029;
      var t_553657100 = null;
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553665052 = 0;
      Label2: {
        F.line = 19;
          Label3: while (true) {
          if (!(i_553665052 < (tokens_p0).length)) break Label3;
            F.line = 1029;
            F.filename = "lisp.nim";
            t_553657100 = tokens_p0[chckIndx(i_553665052, 0, (tokens_p0).length - 1)];
            if (!((0 < (stack_553657085[0]).length))) {
            F.line = 282;
            var inst_553657105 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1030, Field2: 5};
            F.line = 283;
            raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657105.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(t_553657100.line),[41,58,32,85,110,109,97,116,99,104,101,100,32,99,108,111,115,105,110,103,32,112,97,114,101,110,116,104,101,115,105,115]));
            }
            
            F.line = 1046;
            switch (t_553657100.kind) {
            case 12:
              F.line = 1033;
              var Temporary4 = t_553657100;
              if (ConstSet7[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'member\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648173)); }
              var nHEX60gensym425_553657111 = {kind: 19, member: nimCopy(null, Temporary4.member, NTI33554449), line: 0, tags: {}, enumType: null, className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym425_553657111.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym425.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym425_553657111.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym425.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym425_553657111.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym425_553657111.tags = nimCopy(nHEX60gensym425_553657111.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet8, NTI553654382);
              F.line = 1042;
              var Temporary6 = (Temporary5 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary5)[0][Temporary5[1]];
              if (ConstSet9[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
              Temporary6.kids.push(nHEX60gensym425_553657111);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym425_553657111);;
              }
              
              break;
            case 11:
              F.line = 1033;
              var nHEX60gensym431_553657143 = {kind: 15, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym431_553657143.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym431.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym431_553657143.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym431.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym431_553657143.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym431_553657143.tags = nimCopy(nHEX60gensym431_553657143.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet10, NTI553654382);
              F.line = 1042;
              var Temporary8 = (Temporary7 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary7)[0][Temporary7[1]];
              if (ConstSet11[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
              Temporary8.kids.push(nHEX60gensym431_553657143);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym431_553657143);;
              }
              
              break;
            case 10:
              F.line = 1033;
              var nHEX60gensym437_553657170 = {kind: 14, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym437_553657170.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym437.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym437_553657170.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym437.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym437_553657170.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym437_553657170.tags = nimCopy(nHEX60gensym437_553657170.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet12, NTI553654382);
              F.line = 1042;
              var Temporary10 = (Temporary9 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary9)[0][Temporary9[1]];
              if (ConstSet13[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
              Temporary10.kids.push(nHEX60gensym437_553657170);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym437_553657170);;
              }
              
              break;
            case 9:
                var Temporary11 = t_553657100;
                if (ConstSet14[Temporary11.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tag\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary11.kind, NTI553648173)); }
              if (!(!((currentTags_553657086[Temporary11.tag] != undefined)))) {
              F.line = 282;
              var inst_553657204 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1058, Field2: 7};
              F.line = 283;
              var Temporary12 = t_553657100;
              if (ConstSet15[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tag\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI553648173)); }
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657204.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(t_553657100.line),[41,58,32,84,97,103,32,100,101,102,105,110,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,32,102,111,114,32,116,104,101,32,115,97,109,101,32,110,111,100,101,58,32],reprEnum(Temporary12.tag, NTI553648169)));
              }
              
              F.line = 1059;
              var Temporary13 = t_553657100;
              if (ConstSet16[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tag\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI553648173)); }
              currentTags_553657086[Temporary13.tag] = true;
              break;
            case 8:
              F.line = 1033;
              var Temporary14 = t_553657100;
              if (ConstSet17[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'dot\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648173)); }
              var nHEX60gensym445_553657210 = {kind: 10, dot: nimCopy(null, Temporary14.dot, NTI33554449), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym445_553657210.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym445.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym445_553657210.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym445.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym445_553657210.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym445_553657210.tags = nimCopy(nHEX60gensym445_553657210.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet18, NTI553654382);
              F.line = 1042;
              var Temporary16 = (Temporary15 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary15)[0][Temporary15[1]];
              if (ConstSet19[Temporary16.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary16.kind, NTI553648176)); }
              Temporary16.kids.push(nHEX60gensym445_553657210);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym445_553657210);;
              }
              
              break;
            case 7:
              F.line = 1033;
              var Temporary17 = t_553657100;
              if (ConstSet20[Temporary17.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicType\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary17.kind, NTI553648173)); }
              var nHEX60gensym451_553657237 = {kind: 5, atomicType: Temporary17.atomicType, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym451_553657237.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym451.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym451_553657237.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym451.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym451_553657237.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym451_553657237.tags = nimCopy(nHEX60gensym451_553657237.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet21, NTI553654382);
              F.line = 1042;
              var Temporary19 = (Temporary18 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary18)[0][Temporary18[1]];
              if (ConstSet22[Temporary19.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary19.kind, NTI553648176)); }
              Temporary19.kids.push(nHEX60gensym451_553657237);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym451_553657237);;
              }
              
              break;
            case 3:
              F.line = 1033;
              var nHEX60gensym457_553657274 = {kind: 1, kids: [], listType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym457_553657274.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym457.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym457_553657274.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym457.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym457_553657274.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym457_553657274.tags = nimCopy(nHEX60gensym457_553657274.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet23, NTI553654382);
              F.line = 1042;
              var Temporary21 = (Temporary20 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary20)[0][Temporary20[1]];
              if (ConstSet24[Temporary21.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary21.kind, NTI553648176)); }
              Temporary21.kids.push(nHEX60gensym457_553657274);;
              if (true) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym457_553657274);;
              }
              
              break;
            case 4:
              if (!((0 < (stack_553657085[0]).length))) {
              F.line = 282;
              var inst_553657304 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1071, Field2: 7};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657304.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(t_553657100.line),[41,58,32,85,110,109,97,116,99,104,101,100,32,99,108,111,115,105,110,103,32,112,97,114,101,110,116,104,101,115,105,115]));
              }
              
              F.line = 1072;
              delete__lisp_u9180(stack_553657085, 0, chckRange((stack_553657085[0]).length - 1, 0, 2147483647));
              break;
            case 0:
              F.line = 1033;
              var Temporary22 = t_553657100;
              if (ConstSet25[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI553648173)); }
              var nHEX60gensym467_553657337 = {kind: 0, sym: nimCopy(null, Temporary22.sym, NTI33554449), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym467_553657337.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym467.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym467_553657337.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym467.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym467_553657337.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym467_553657337.tags = nimCopy(nHEX60gensym467_553657337.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet26, NTI553654382);
              F.line = 1042;
              var Temporary24 = (Temporary23 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary23)[0][Temporary23[1]];
              if (ConstSet27[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI553648176)); }
              Temporary24.kids.push(nHEX60gensym467_553657337);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym467_553657337);;
              }
              
              break;
            case 1:
              F.line = 1033;
              var Temporary25 = t_553657100;
              if (ConstSet28[Temporary25.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary25.kind, NTI553648173)); }
              var nHEX60gensym473_553657364 = {kind: 9, atomicKind: 0, num: Temporary25.num, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym473_553657364.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym473.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym473_553657364.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym473.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym473_553657364.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym473_553657364.tags = nimCopy(nHEX60gensym473_553657364.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet29, NTI553654382);
              F.line = 1042;
              var Temporary27 = (Temporary26 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary26)[0][Temporary26[1]];
              if (ConstSet30[Temporary27.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary27.kind, NTI553648176)); }
              Temporary27.kids.push(nHEX60gensym473_553657364);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym473_553657364);;
              }
              
              break;
            case 2:
              F.line = 1033;
              var Temporary28 = t_553657100;
              if (ConstSet31[Temporary28.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary28.kind, NTI553648173)); }
              var nHEX60gensym479_553657391 = {kind: 9, atomicKind: 1, str: nimCopy(null, Temporary28.str, NTI33554449), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, num: 0.0, boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym479_553657391.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym479.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym479_553657391.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym479.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym479_553657391.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym479_553657391.tags = nimCopy(nHEX60gensym479_553657391.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet32, NTI553654382);
              F.line = 1042;
              var Temporary30 = (Temporary29 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary29)[0][Temporary29[1]];
              if (ConstSet33[Temporary30.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary30.kind, NTI553648176)); }
              Temporary30.kids.push(nHEX60gensym479_553657391);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym479_553657391);;
              }
              
              break;
            case 5:
              F.line = 1033;
              var Temporary31 = t_553657100;
              if (ConstSet34[Temporary31.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary31.kind, NTI553648173)); }
              var nHEX60gensym485_553657418 = {kind: 3, keyword: Temporary31.keyword, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym485_553657418.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym485.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym485_553657418.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym485.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym485_553657418.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym485_553657418.tags = nimCopy(nHEX60gensym485_553657418.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet35, NTI553654382);
              F.line = 1042;
              var Temporary33 = (Temporary32 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary32)[0][Temporary32[1]];
              if (ConstSet36[Temporary33.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary33.kind, NTI553648176)); }
              Temporary33.kids.push(nHEX60gensym485_553657418);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym485_553657418);;
              }
              
              break;
            case 6:
              F.line = 1033;
              var Temporary34 = t_553657100;
              if (ConstSet37[Temporary34.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolVal\' is not accessible for type \'Token\' using \'kind = "), reprDiscriminant(Temporary34.kind, NTI553648173)); }
              var nHEX60gensym491_553657445 = {kind: 9, atomicKind: 2, boolean: Temporary34.boolVal, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, num: 0.0, str: [], sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
              if (!((nHEX60gensym491_553657445.line == 0))) {
              F.line = 1034;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1034, 7) `n`gensym491.line == 0` "));
              }
              
              if (!((SetCard(nHEX60gensym491_553657445.tags) == 0))) {
              F.line = 1035;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1035, 7) `card(n`gensym491.tags) == 0` "));
              }
              
              F.line = 1037;
              nHEX60gensym491_553657445.line = t_553657100.line;
              F.line = 1039;
              nHEX60gensym491_553657445.tags = nimCopy(nHEX60gensym491_553657445.tags, currentTags_553657086, NTI553648191);
              F.line = 1040;
              currentTags_553657086 = nimCopy(currentTags_553657086, ConstSet38, NTI553654382);
              F.line = 1042;
              var Temporary36 = (Temporary35 = HEX5BHEX5D__lisp_u8998(stack_553657085[0], 1), Temporary35)[0][Temporary35[1]];
              if (ConstSet39[Temporary36.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary36.kind, NTI553648176)); }
              Temporary36.kids.push(nHEX60gensym491_553657445);;
              if (false) {
              F.line = 1044;
              stack_553657085[0].push(nHEX60gensym491_553657445);;
              }
              
              break;
            }
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665052 += 1;
          }
      };
    };
    if (!(((stack_553657085[0]).length == 1))) {
    F.line = 282;
    F.filename = "lisp.nim";
    var inst_553657475 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1094, Field2: 11};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657475.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(tokens_p0[chckIndx(0, 0, (tokens_p0).length - 1)].line),[41,58,32,85,110,109,97,116,99,104,101,100,32,111,112,101,110,105,110,103,32,112,97,114,101,110,116,104,101,115,105,115]));
    }
    
    F.line = 1097;
    postProcessing__lisp_u8847(result_553657076);
  framePtr = F.prev;

  return result_553657076;

}

function skipUntil__pureZparseutils_u181(s_p0, until_p1) {
  var result_754974904 = 0;

  var F = {procname: "parseutils.skipUntil", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 310;
    F.filename = "parseutils.nim";
    result_754974904 = 0;
    Label1: {
      F.line = 311;
        Label2: while (true) {
        if (!((result_754974904 < (s_p0).length) && !((until_p1[s_p0[chckIndx(result_754974904, 0, (s_p0).length - 1)]] != undefined)))) break Label2;
          F.line = 311;
          result_754974904 = addInt(result_754974904, 1);
        }
    };
  framePtr = F.prev;

  return result_754974904;

}

function skipUntil__pureZparseutils_u865(s_p0, until_p1, start_p2) {
  var result_754975589 = 0;

  var F = {procname: "parseutils.skipUntil", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 910;
    F.filename = "parseutils.nim";
    result_754975589 = skipUntil__pureZparseutils_u181((s_p0.slice(start_p2, (s_p0).length - 1 + 1)), until_p1);
  framePtr = F.prev;

  return result_754975589;

}

function fastSubstr__pureZparseutils_u225(s_p0, token_p1, token_p1_Idx, length_p2) {
  var F = {procname: "parseutils.fastSubstr", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 336;
    F.filename = "parseutils.nim";
    if (token_p1[token_p1_Idx].length < chckRange(length_p2, 0, 2147483647)) { for (var i = token_p1[token_p1_Idx].length; i < chckRange(length_p2, 0, 2147483647); ++i) token_p1[token_p1_Idx].push(0); }
         else {token_p1[token_p1_Idx].length = chckRange(length_p2, 0, 2147483647); };
    Label1: {
      F.line = 337;
      var i_754974953 = 0;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553665069 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553665069 < length_p2)) break Label3;
            F.line = 337;
            F.filename = "parseutils.nim";
            i_754974953 = i_553665069;
            F.line = 337;
            token_p1[token_p1_Idx][chckIndx(i_754974953, 0, (token_p1[token_p1_Idx]).length - 1)] = s_p0[chckIndx(i_754974953, 0, (s_p0).length - 1)];
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553665069 = addInt(i_553665069, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function parseWhile__pureZparseutils_u293(s_p0, token_p1, token_p1_Idx, validChars_p2) {
  var result_754975017 = 0;

  var F = {procname: "parseutils.parseWhile", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 411;
    F.filename = "parseutils.nim";
    var i_754975018 = 0;
    Label1: {
      F.line = 412;
        Label2: while (true) {
        if (!((i_754975018 < (s_p0).length) && (validChars_p2[s_p0[chckIndx(i_754975018, 0, (s_p0).length - 1)]] != undefined))) break Label2;
          F.line = 412;
          i_754975018 = addInt(i_754975018, 1);
        }
    };
    F.line = 413;
    result_754975017 = i_754975018;
    F.line = 414;
    fastSubstr__pureZparseutils_u225(s_p0, token_p1, token_p1_Idx, result_754975017);
  framePtr = F.prev;

  return result_754975017;

}

function parseWhile__pureZparseutils_u898(s_p0, token_p1, token_p1_Idx, validChars_p2, start_p3) {
  var result_754975623 = 0;

  var F = {procname: "parseutils.parseWhile", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 984;
    F.filename = "parseutils.nim";
    result_754975623 = parseWhile__pureZparseutils_u293((s_p0.slice(start_p3, (s_p0).length - 1 + 1)), token_p1, token_p1_Idx, validChars_p2);
  framePtr = F.prev;

  return result_754975623;

}

function find__stdZenumutils_u55(a_p0, item_p1) {
  var result_905969724 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1760;
    F.filename = "system.nim";
    result_905969724 = 0;
    Label1: {
      F.line = 1761;
      var i_905969728 = [];
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553654023 = 0;
      Label2: {
        F.line = 19;
          Label3: while (true) {
          if (!(i_553654023 < (a_p0).length)) break Label3;
            F.line = 1761;
            F.filename = "system.nim";
            i_905969728 = a_p0[chckIndx(i_553654023, 0, (a_p0).length - 1)];
            if (eqStrings(i_905969728, item_p1)) {
            F.line = 1762;
            break BeforeRet;
            }
            
            F.line = 1763;
            result_905969724 = addInt(result_905969724, 1);
            F.line = 13;
            F.filename = "iterators.nim";
            i_553654023 += 1;
          }
      };
    };
    F.line = 1764;
    F.filename = "system.nim";
    result_905969724 = (-1);
  };
  framePtr = F.prev;

  return result_905969724;

}

function contains__stdZenumutils_u50(a_p0, item_p1) {
  var result_905969718 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1778;
    F.filename = "system.nim";
    result_905969718 = (0 <= find__stdZenumutils_u55(a_p0, item_p1));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_905969718;

}

function nimIdentNormalize__pureZstrutils_u122(s_p0) {
  var result_738197628 = [];

  var F = {procname: "strutils.nimIdentNormalize", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 298;
    F.filename = "strutils.nim";
    result_738197628 = nimCopy(null, mnewString(chckRange((s_p0).length, 0, 2147483647)), NTI33554449);
    if (((s_p0).length == 0)) {
    F.line = 300;
    break BeforeRet;
    }
    
    F.line = 301;
    result_738197628[chckIndx(0, 0, (result_738197628).length - 1)] = s_p0[chckIndx(0, 0, (s_p0).length - 1)];
    F.line = 302;
    var j_738197629 = 1;
    Label1: {
      F.line = 303;
      var i_738197634 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553654018 = 0;
      F.line = 303;
      F.filename = "strutils.nim";
      colontmp__553654018 = subInt((s_p0).length, 1);
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553654019 = 1;
      Label2: {
        F.line = 97;
          Label3: while (true) {
          if (!(res_553654019 <= colontmp__553654018)) break Label3;
            F.line = 303;
            F.filename = "strutils.nim";
            i_738197634 = res_553654019;
            if ((ConstSet57[s_p0[chckIndx(i_738197634, 0, (s_p0).length - 1)]] != undefined)) {
            F.line = 305;
            result_738197628[chckIndx(j_738197629, 0, (result_738197628).length - 1)] = chckRange(addInt(s_p0[chckIndx(i_738197634, 0, (s_p0).length - 1)], 32), 0, 255);
            F.line = 306;
            j_738197629 = addInt(j_738197629, 1);
            }
            else {
            if (!((s_p0[chckIndx(i_738197634, 0, (s_p0).length - 1)] == 95))) {
            F.line = 308;
            result_738197628[chckIndx(j_738197629, 0, (result_738197628).length - 1)] = s_p0[chckIndx(i_738197634, 0, (s_p0).length - 1)];
            F.line = 309;
            j_738197629 = addInt(j_738197629, 1);
            }
            }
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553654019 = addInt(res_553654019, 1);
          }
      };
    };
    if (!((j_738197629 == (s_p0).length))) {
    F.line = 310;
    F.filename = "strutils.nim";
    if (result_738197628.length < chckRange(j_738197629, 0, 2147483647)) { for (var i = result_738197628.length; i < chckRange(j_738197629, 0, 2147483647); ++i) result_738197628.push(0); }
         else {result_738197628.length = chckRange(j_738197629, 0, 2147483647); };
    }
    
  };
  framePtr = F.prev;

  return result_738197628;

}

function parseEnum__lisp_u5849(s_p0) {
    var Temporary1;

  var result_553653980 = 0;

  var F = {procname: "parseEnum.parseEnum", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1306;
    F.filename = "strutils.nim";
    F.line = 1323;
    switch (toJSStr(nimIdentNormalize__pureZstrutils_u122(s_p0))) {
    case "unquote":
      Temporary1 = 0;
      break;
    case "unquote-splicing":
      Temporary1 = 1;
      break;
    default: 
      F.line = 77;
      F.filename = "enumutils.nim";
      raiseException({message: ([73,110,118,97,108,105,100,32,101,110,117,109,32,118,97,108,117,101,58,32]).concat(s_p0), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_553653980 = Temporary1;
  framePtr = F.prev;

  return result_553653980;

}

function parseUntil__pureZparseutils_u234(s_p0, token_p1, token_p1_Idx, until_p2) {
  var result_754974958 = 0;

  var F = {procname: "parseutils.parseUntil", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 351;
    F.filename = "parseutils.nim";
    var i_754974959 = 0;
    Label1: {
      F.line = 352;
        Label2: while (true) {
        if (!((i_754974959 < (s_p0).length) && !((until_p2[s_p0[chckIndx(i_754974959, 0, (s_p0).length - 1)]] != undefined)))) break Label2;
          F.line = 352;
          i_754974959 = addInt(i_754974959, 1);
        }
    };
    F.line = 353;
    result_754974958 = i_754974959;
    F.line = 354;
    fastSubstr__pureZparseutils_u225(s_p0, token_p1, token_p1_Idx, result_754974958);
  framePtr = F.prev;

  return result_754974958;

}

function parseUntil__pureZparseutils_u880(s_p0, token_p1, token_p1_Idx, until_p2, start_p3) {
  var result_754975605 = 0;

  var F = {procname: "parseutils.parseUntil", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 941;
    F.filename = "parseutils.nim";
    result_754975605 = parseUntil__pureZparseutils_u234((s_p0.slice(start_p3, (s_p0).length - 1 + 1)), token_p1, token_p1_Idx, until_p2);
  framePtr = F.prev;

  return result_754975605;

}

function parseFloatNative__system_u3030(a_p0) {
  var result_33557464 = 0.0;

  var F = {procname: "system.parseFloatNative", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/jssys.nim", line: 0};
  framePtr = F;
    F.line = 694;
    F.filename = "jssys.nim";
    var str_33557465 = [];
    Label1: {
      F.line = 695;
      var x_33557479 = 0;
      F.line = 28;
      F.filename = "iterators.nim";
      var i_553665080 = 0;
      Label2: {
        F.line = 29;
          Label3: while (true) {
          if (!(i_553665080 < (a_p0).length)) break Label3;
            F.line = 695;
            F.filename = "jssys.nim";
            x_33557479 = a_p0[i_553665080];
            F.line = 696;
            addChar(str_33557465, x_33557479);;
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665080 += 1;
          }
      };
    };
    F.line = 698;
    F.filename = "jssys.nim";
    var cstr_33557480 = toJSStr(str_33557465);
    F.line = 700;
      result_33557464 = Number(cstr_33557480);
  
  framePtr = F.prev;

  return result_33557464;

}

function npuParseFloat(s_p0, number_p1, number_p1_Idx) {
  var result_754975260 = 0;

  var F = {procname: "parseutils.parseFloat", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 606;
    F.filename = "parseutils.nim";
    var bf_754975261 = [0.0];
    F.line = 607;
    result_754975260 = nimParseBiggestFloat(s_p0, bf_754975261, 0);
    if (!((result_754975260 == 0))) {
    F.line = 609;
    number_p1[number_p1_Idx] = bf_754975261[0];
    }
    
  framePtr = F.prev;

  return result_754975260;

}

function parseFloat__pureZparseutils_u940(s_p0, number_p1, number_p1_Idx, start_p2) {
  var result_754975664 = 0;

  var F = {procname: "parseutils.parseFloat", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 1075;
    F.filename = "parseutils.nim";
    result_754975664 = npuParseFloat((s_p0.slice(start_p2, (s_p0).length - 1 + 1)), number_p1, number_p1_Idx);
  framePtr = F.prev;

  return result_754975664;

}

function nsuParseFloat(s_p0) {
  var result_738198382 = [0.0];

  var F = {procname: "strutils.parseFloat", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1198;
    F.filename = "strutils.nim";
    result_738198382[0] = 0.0;
    F.line = 1199;
    var L_738198383 = parseFloat__pureZparseutils_u940(s_p0, result_738198382, 0, 0);
    if ((!((L_738198383 == (s_p0).length)) || (L_738198383 == 0))) {
    F.line = 1201;
    raiseException({message: ([105,110,118,97,108,105,100,32,102,108,111,97,116,58,32]).concat(s_p0), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_738198382[0];

}

function find__lisp_u5973(a_p0, item_p1) {
  var result_553654106 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1760;
    F.filename = "system.nim";
    result_553654106 = 0;
    Label1: {
      F.line = 1761;
      var i_553654110 = 0;
      F.line = 28;
      F.filename = "iterators.nim";
      var i_553665083 = 0;
      Label2: {
        F.line = 29;
          Label3: while (true) {
          if (!(i_553665083 < (a_p0).length)) break Label3;
            F.line = 1761;
            F.filename = "system.nim";
            i_553654110 = a_p0[chckIndx(i_553665083, 0, (a_p0).length - 1)];
            if ((i_553654110 == item_p1)) {
            F.line = 1762;
            break BeforeRet;
            }
            
            F.line = 1763;
            result_553654106 = addInt(result_553654106, 1);
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665083 += 1;
          }
      };
    };
    F.line = 1764;
    F.filename = "system.nim";
    result_553654106 = (-1);
  };
  framePtr = F.prev;

  return result_553654106;

}

function contains__lisp_u5968(a_p0, item_p1) {
  var result_553654100 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1778;
    F.filename = "system.nim";
    result_553654100 = (0 <= find__lisp_u5973(a_p0, item_p1));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_553654100;

}

function parseEnum__lisp_u6025(s_p0) {
    var Temporary1;

  var result_553654156 = 0;

  var F = {procname: "parseEnum.parseEnum", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1306;
    F.filename = "strutils.nim";
    F.line = 1323;
    switch (toJSStr(nimIdentNormalize__pureZstrutils_u122(s_p0))) {
    case "number":
      Temporary1 = 0;
      break;
    case "string":
      Temporary1 = 1;
      break;
    case "bool":
      Temporary1 = 2;
      break;
    default: 
      F.line = 77;
      F.filename = "enumutils.nim";
      raiseException({message: ([73,110,118,97,108,105,100,32,101,110,117,109,32,118,97,108,117,101,58,32]).concat(s_p0), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_553654156 = Temporary1;
  framePtr = F.prev;

  return result_553654156;

}

function parseEnum__lisp_u6070(s_p0) {
    var Temporary1;

  var result_553654201 = 0;

  var F = {procname: "parseEnum.parseEnum", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1306;
    F.filename = "strutils.nim";
    F.line = 1323;
    switch (toJSStr(nimIdentNormalize__pureZstrutils_u122(s_p0))) {
    case "quote":
      Temporary1 = 0;
      break;
    case "eval":
      Temporary1 = 1;
      break;
    case ":=":
      Temporary1 = 2;
      break;
    case "if":
      Temporary1 = 3;
      break;
    case "+":
      Temporary1 = 4;
      break;
    case "\\":
      Temporary1 = 5;
      break;
    case "echo":
      Temporary1 = 6;
      break;
    case "repr":
      Temporary1 = 7;
      break;
    case "block":
      Temporary1 = 8;
      break;
    case "table":
      Temporary1 = 9;
      break;
    case "must-equal":
      Temporary1 = 10;
      break;
    case "object-type":
      Temporary1 = 11;
      break;
    case "=":
      Temporary1 = 12;
      break;
    case "str-add":
      Temporary1 = 13;
      break;
    case "high":
      Temporary1 = 14;
      break;
    case "low":
      Temporary1 = 15;
      break;
    case "..":
      Temporary1 = 16;
      break;
    case "expect":
      Temporary1 = 17;
      break;
    case "to-str":
      Temporary1 = 18;
      break;
    case "is-list":
      Temporary1 = 19;
      break;
    case "==":
      Temporary1 = 20;
      break;
    case "!=":
      Temporary1 = 21;
      break;
    case "not":
      Temporary1 = 22;
      break;
    case "empty?":
      Temporary1 = 23;
      break;
    case "array-get":
      Temporary1 = 24;
      break;
    case "filter-array":
      Temporary1 = 25;
      break;
    case "-":
      Temporary1 = 26;
      break;
    case "for":
      Temporary1 = 27;
      break;
    case "len":
      Temporary1 = 28;
      break;
    case "+=":
      Temporary1 = 29;
      break;
    case "-=":
      Temporary1 = 30;
      break;
    case "is-str":
      Temporary1 = 31;
      break;
    case "class":
      Temporary1 = 32;
      break;
    case "return":
      Temporary1 = 33;
      break;
    case "or":
      Temporary1 = 34;
      break;
    case "and":
      Temporary1 = 35;
      break;
    case "contains":
      Temporary1 = 36;
      break;
    case "template":
      Temporary1 = 37;
      break;
    case "while":
      Temporary1 = 38;
      break;
    case "<=":
      Temporary1 = 39;
      break;
    case ">=":
      Temporary1 = 40;
      break;
    case "<":
      Temporary1 = 41;
      break;
    case ">":
      Temporary1 = 42;
      break;
    case "add":
      Temporary1 = 43;
      break;
    case "enum-type":
      Temporary1 = 44;
      break;
    case "try":
      Temporary1 = 45;
      break;
    case "except":
      Temporary1 = 46;
      break;
    case "finally":
      Temporary1 = 47;
      break;
    case "table-type":
      Temporary1 = 48;
      break;
    case "array-type":
      Temporary1 = 49;
      break;
    case "case":
      Temporary1 = 50;
      break;
    case "table-set!":
      Temporary1 = 51;
      break;
    case "table-get":
      Temporary1 = 52;
      break;
    case "table-has-key":
      Temporary1 = 53;
      break;
    case "continue":
      Temporary1 = 54;
      break;
    case "break":
      Temporary1 = 55;
      break;
    case "join-lists":
      Temporary1 = 56;
      break;
    default: 
      F.line = 77;
      F.filename = "enumutils.nim";
      raiseException({message: ([73,110,118,97,108,105,100,32,101,110,117,109,32,118,97,108,117,101,58,32]).concat(s_p0), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_553654201 = Temporary1;
  framePtr = F.prev;

  return result_553654201;

}

function tokenize__lisp_u5532(s_p0) {
  var result_553653662 = [];

  var F = {procname: "lisp.tokenize", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 548;
    F.filename = "lisp.nim";
    var i_553653805 = 0;
    F.line = 549;
    var line_553653806 = 1;
    Label1: {
      F.line = 554;
        Label2: while (true) {
        if (!(i_553653805 <= (s_p0).length - 1)) break Label2;
          F.line = 555;
          switch (s_p0[chckIndx(i_553653805, 0, (s_p0).length - 1)]) {
          case 35:
          case 59:
            F.line = 557;
            i_553653805 = addInt(i_553653805, skipUntil__pureZparseutils_u865(s_p0, ConstSet54, i_553653805));
            F.line = 558;
            i_553653805 = addInt(i_553653805, 1);
            F.line = 559;
            line_553653806 = addInt(line_553653806, 1);
            break;
          case 10:
          case 13:
            F.line = 562;
            i_553653805 = addInt(i_553653805, 1);
            F.line = 563;
            line_553653806 = addInt(line_553653806, 1);
            break;
          case 9:
          case 11:
          case 12:
          case 32:
            F.line = 566;
            i_553653805 = addInt(i_553653805, 1);
            break;
          case 40:
            F.line = 569;
            i_553653805 = addInt(i_553653805, 1);
            F.line = 570;
            result_553653662.push({kind: 3, line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, boolVal: false, atomicType: 0, tag: 0, member: []});;
            break;
          case 41:
            F.line = 573;
            i_553653805 = addInt(i_553653805, 1);
            F.line = 574;
            result_553653662.push({kind: 4, line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, boolVal: false, atomicType: 0, tag: 0, member: []});;
            break;
          case 64:
            F.line = 577;
            i_553653805 = addInt(i_553653805, 1);
            F.line = 578;
            var str_553653865 = [[]];
            F.line = 579;
            i_553653805 = addInt(i_553653805, parseWhile__pureZparseutils_u898(s_p0, str_553653865, 0, ConstSet55, i_553653805));
            F.line = 580;
            result_553653662.push({kind: 12, member: nimCopy(null, str_553653865[0], NTI33554449), line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, boolVal: false, atomicType: 0, tag: 0});;
            break;
          case 94:
            F.line = 583;
            i_553653805 = addInt(i_553653805, 1);
            F.line = 584;
            var str_553653879 = [[]];
            F.line = 585;
            i_553653805 = addInt(i_553653805, parseWhile__pureZparseutils_u898(s_p0, str_553653879, 0, ConstSet56, i_553653805));
            if (!(contains__stdZenumutils_u50(tags_553653954, str_553653879[0]))) {
            F.line = 588;
            failedAssertImpl__stdZassertions_u84((makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(588, 7) `contains(tags, str)` Invalid tag: ")).concat(str_553653879[0],[32,97,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(line_553653806)));
            }
            
            F.line = 590;
            result_553653662.push({kind: 9, tag: parseEnum__lisp_u5849(str_553653879[0]), line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, boolVal: false, atomicType: 0, member: []});;
            break;
          case 34:
            F.line = 593;
            i_553653805 = addInt(i_553653805, 1);
            F.line = 594;
            var str_553654035 = [];
            Label3: {
              F.line = 596;
                Label4: while (true) {
                if (!true) break Label4;
                  F.line = 597;
                  var tmp_553654036 = [[]];
                  F.line = 598;
                  i_553653805 = addInt(i_553653805, parseUntil__pureZparseutils_u880(s_p0, tmp_553654036, 0, ConstSet58, i_553653805));
                  if ((s_p0[chckIndx(i_553653805, 0, (s_p0).length - 1)] == 92)) {
                  F.line = 601;
                  i_553653805 = addInt(i_553653805, 1);
                  F.line = 602;
                  switch (s_p0[chckIndx(i_553653805, 0, (s_p0).length - 1)]) {
                  case 34:
                    F.line = 603;
                    addChar(tmp_553654036[0], 34);;
                    break;
                  case 110:
                    F.line = 604;
                    addChar(tmp_553654036[0], 10);;
                    break;
                  case 116:
                    F.line = 605;
                    addChar(tmp_553654036[0], 9);;
                    break;
                  default: 
                    F.line = 606;
                    raiseAssert__stdZassertions_u42(([73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,58,32]).concat(nimCharToStr(s_p0[chckIndx(i_553653805, 0, (s_p0).length - 1)])));
                    break;
                  }
                  F.line = 607;
                  i_553653805 = addInt(i_553653805, 1);
                  }
                  
                  F.line = 609;
                  str_553654035.push.apply(str_553654035, tmp_553654036[0]);;
                  if ((s_p0[chckIndx(i_553653805, 0, (s_p0).length - 1)] == 34)) {
                  F.line = 612;
                  i_553653805 = addInt(i_553653805, 1);
                  F.line = 613;
                  break Label3;
                  }
                  
                }
            };
            F.line = 615;
            result_553653662.push({kind: 2, str: nimCopy(null, str_553654035, NTI33554449), line: line_553653806, dot: [], sym: [], num: 0.0, keyword: 0, boolVal: false, atomicType: 0, tag: 0, member: []});;
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            F.line = 618;
            var tmp_553654060 = [[]];
            F.line = 619;
            i_553653805 = addInt(i_553653805, parseWhile__pureZparseutils_u898(s_p0, tmp_553654060, 0, ConstSet59, i_553653805));
            F.line = 620;
            result_553653662.push({kind: 1, num: nsuParseFloat(tmp_553654060[0]), line: line_553653806, dot: [], sym: [], str: [], keyword: 0, boolVal: false, atomicType: 0, tag: 0, member: []});;
            break;
          default: 
            if (!((ConstSet67[s_p0[chckIndx(i_553653805, 0, (s_p0).length - 1)]] != undefined))) {
            F.line = 623;
            failedAssertImpl__stdZassertions_u84((makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(623, 7) `s[i] in symbolCharacters` ")).concat(([69,114,114,111,114,32,111,110,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(line_553653806),[58,32,85,110,101,120,112,101,99,116,101,100,32,99,104,97,114,97,99,116,101,114,58,32],nimCharToStr(s_p0[chckIndx(i_553653805, 0, (s_p0).length - 1)]))));
            }
            
            F.line = 626;
            var tmp_553654082 = [[]];
            F.line = 627;
            i_553653805 = addInt(i_553653805, parseWhile__pureZparseutils_u898(s_p0, tmp_553654082, 0, ConstSet68, i_553653805));
            if (!((0 < (tmp_553654082[0]).length))) {
            F.line = 629;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(629, 7) `\x0A0 < len(tmp)` "));
            }
            
            if ((contains__lisp_u5968(tmp_553654082[0], 46) && !((tmp_553654082[0][chckIndx(0, 0, (tmp_553654082[0]).length - 1)] == 46)))) {
            F.line = 632;
            result_553653662.push({kind: 8, dot: nimCopy(null, tmp_553654082[0], NTI33554449), line: 0, sym: [], num: 0.0, str: [], keyword: 0, boolVal: false, atomicType: 0, tag: 0, member: []});;
            }
            else {
            if (eqStrings(tmp_553654082[0], [116,114,117,101])) {
            F.line = 635;
            result_553653662.push({kind: 6, boolVal: true, line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, atomicType: 0, tag: 0, member: []});;
            }
            else {
            if (eqStrings(tmp_553654082[0], [102,97,108,115,101])) {
            F.line = 638;
            result_553653662.push({kind: 6, boolVal: false, line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, atomicType: 0, tag: 0, member: []});;
            }
            else {
            if (eqStrings(tmp_553654082[0], [97,110,121])) {
            F.line = 644;
            result_553653662.push({kind: 10, line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, boolVal: false, atomicType: 0, tag: 0, member: []});;
            }
            else {
            if (eqStrings(tmp_553654082[0], [118,111,105,100])) {
            F.line = 647;
            result_553653662.push({kind: 11, line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, boolVal: false, atomicType: 0, tag: 0, member: []});;
            }
            else {
            if (contains__stdZenumutils_u50(atomicTypes_553653804, tmp_553654082[0])) {
            F.line = 650;
            result_553653662.push({kind: 7, atomicType: parseEnum__lisp_u6025(tmp_553654082[0]), line: line_553653806, dot: [], sym: [], num: 0.0, str: [], keyword: 0, boolVal: false, tag: 0, member: []});;
            }
            else {
            if (contains__stdZenumutils_u50(keywords_553653733, tmp_553654082[0])) {
            F.line = 653;
            result_553653662.push({kind: 5, keyword: parseEnum__lisp_u6070(tmp_553654082[0]), line: line_553653806, dot: [], sym: [], num: 0.0, str: [], boolVal: false, atomicType: 0, tag: 0, member: []});;
            }
            else {
              F.line = 655;
            result_553653662.push({kind: 0, sym: nimCopy(null, tmp_553654082[0], NTI33554449), line: line_553653806, dot: [], num: 0.0, str: [], keyword: 0, boolVal: false, atomicType: 0, tag: 0, member: []});;
            }
            }}}}}}
            break;
          }
        }
    };
  framePtr = F.prev;

  return result_553653662;

}

function newSeq__lisp_u16016(len_p0) {
  var result_553664148 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 653;
    F.filename = "system.nim";
    result_553664148 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_553664148[i] = null; }  framePtr = F.prev;

  return result_553664148;

}

function lenU__pureZhashes_u484(s_p0) {
  var result_1006633446 = 0n;

  var F = {procname: "hashes.lenU", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 413;
    F.filename = "hashes.nim";
    result_1006633446 = BigInt.asUintN(64, BigInt((s_p0).length));
  framePtr = F.prev;

  return result_1006633446;

}

function load8e__pureZhashes_u444(s_p0, o_p1) {
  var result_1006633407 = 0n;

  var F = {procname: "hashes.load8e", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 395;
    F.filename = "hashes.nim";
    result_1006633407 = (((((((BigInt.asUintN(64, BigInt(s_p0[chckIndx(addInt(o_p1, 7), 0, (s_p0).length - 1)]) << BigInt(56)) | BigInt.asUintN(64, BigInt(s_p0[chckIndx(addInt(o_p1, 6), 0, (s_p0).length - 1)]) << BigInt(48))) | BigInt.asUintN(64, BigInt(s_p0[chckIndx(addInt(o_p1, 5), 0, (s_p0).length - 1)]) << BigInt(40))) | BigInt.asUintN(64, BigInt(s_p0[chckIndx(addInt(o_p1, 4), 0, (s_p0).length - 1)]) << BigInt(32))) | BigInt.asUintN(64, BigInt(s_p0[chckIndx(addInt(o_p1, 3), 0, (s_p0).length - 1)]) << BigInt(24))) | BigInt.asUintN(64, BigInt(s_p0[chckIndx(addInt(o_p1, 2), 0, (s_p0).length - 1)]) << BigInt(16))) | BigInt.asUintN(64, BigInt(s_p0[chckIndx(addInt(o_p1, 1), 0, (s_p0).length - 1)]) << BigInt(8))) | BigInt(s_p0[chckIndx(addInt(o_p1, 0), 0, (s_p0).length - 1)]));
  framePtr = F.prev;

  return result_1006633407;

}

function load8__pureZhashes_u480(s_p0, o_p1) {
  var result_1006633443 = 0n;

  var F = {procname: "hashes.load8", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 411;
    F.filename = "hashes.nim";
    result_1006633443 = load8e__pureZhashes_u444(s_p0, o_p1);
  framePtr = F.prev;

  return result_1006633443;

}

function rotR__pureZhashes_u497(v_p0, bits_p1) {
  var result_1006633460 = 0n;

  var F = {procname: "hashes.rotR", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 418;
    F.filename = "hashes.nim";
    result_1006633460 = ((v_p0 >> BigInt(bits_p1)) | BigInt.asUintN(64, v_p0 << BigInt(subInt(64, bits_p1))));
  framePtr = F.prev;

  return result_1006633460;

}

function len16__pureZhashes_u509(u_p0, v_p1, mul_p2) {
  var result_1006633473 = 0n;

  var F = {procname: "hashes.len16", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 421;
    F.filename = "hashes.nim";
    F.line = 421;
    var a_1006633474 = BigInt.asUintN(64, ((u_p0 ^ v_p1) * mul_p2));
    F.line = 422;
    a_1006633474 = (a_1006633474 ^ (a_1006633474 >> BigInt(47)));
    F.line = 423;
    var b_1006633479 = BigInt.asUintN(64, ((v_p1 ^ a_1006633474) * mul_p2));
    F.line = 424;
    b_1006633479 = (b_1006633479 ^ (b_1006633479 >> BigInt(47)));
    result_1006633473 = BigInt.asUintN(64, (b_1006633479 * mul_p2));
  framePtr = F.prev;

  return result_1006633473;

}

function load4e__pureZhashes_u428(s_p0, o_p1) {
  var result_1006633391 = 0;

  var F = {procname: "hashes.load4e", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 389;
    F.filename = "hashes.nim";
    result_1006633391 = (((((((((s_p0[chckIndx(addInt(o_p1, 3), 0, (s_p0).length - 1)] >>> 0) << 24) >>> 0) | (((s_p0[chckIndx(addInt(o_p1, 2), 0, (s_p0).length - 1)] >>> 0) << 16) >>> 0)) >>> 0) | (((s_p0[chckIndx(addInt(o_p1, 1), 0, (s_p0).length - 1)] >>> 0) << 8) >>> 0)) >>> 0) | (s_p0[chckIndx(addInt(o_p1, 0), 0, (s_p0).length - 1)] >>> 0)) >>> 0);
  framePtr = F.prev;

  return result_1006633391;

}

function load4__pureZhashes_u476(s_p0, o_p1) {
  var result_1006633439 = 0;

  var F = {procname: "hashes.load4", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 403;
    F.filename = "hashes.nim";
    result_1006633439 = load4e__pureZhashes_u428(s_p0, o_p1);
  framePtr = F.prev;

  return result_1006633439;

}

function shiftMix__pureZhashes_u490(v_p0) {
  var result_1006633452 = 0n;

  var F = {procname: "hashes.shiftMix", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 415;
    F.filename = "hashes.nim";
    result_1006633452 = (v_p0 ^ (v_p0 >> BigInt(47)));
  framePtr = F.prev;

  return result_1006633452;

}

function len0_16__pureZhashes_u524(s_p0) {
    var Temporary1;

  var result_1006633486 = 0n;

  var F = {procname: "hashes.len0_16", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 428;
    F.filename = "hashes.nim";
    if ((8 <= (s_p0).length)) {
    F.line = 429;
    var mul_1006633490 = BigInt.asUintN(64, (11160318154034397263n + BigInt.asUintN(64, (2n * lenU__pureZhashes_u484(s_p0)))));
    F.line = 430;
    var a_1006633491 = BigInt.asUintN(64, (load8__pureZhashes_u480(s_p0, 0) + 11160318154034397263n));
    F.line = 431;
    var b_1006633495 = load8__pureZhashes_u480(s_p0, subInt((s_p0).length, 8));
    F.line = 432;
    var c_1006633496 = BigInt.asUintN(64, (BigInt.asUintN(64, (rotR__pureZhashes_u497(b_1006633495, 37) * mul_1006633490)) + a_1006633491));
    F.line = 433;
    var d_1006633497 = BigInt.asUintN(64, (BigInt.asUintN(64, (rotR__pureZhashes_u497(a_1006633491, 25) + b_1006633495)) * mul_1006633490));
    Temporary1 = len16__pureZhashes_u509(c_1006633496, d_1006633497, mul_1006633490);
    }
    else {
    if ((4 <= (s_p0).length)) {
    F.line = 436;
    var mul_1006633501 = BigInt.asUintN(64, (11160318154034397263n + BigInt.asUintN(64, (2n * lenU__pureZhashes_u484(s_p0)))));
    F.line = 437;
    var a_1006633502 = BigInt(load4__pureZhashes_u476(s_p0, 0));
    Temporary1 = len16__pureZhashes_u509(BigInt.asUintN(64, (lenU__pureZhashes_u484(s_p0) + BigInt.asUintN(64, a_1006633502 << BigInt(3)))), BigInt(load4__pureZhashes_u476(s_p0, subInt((s_p0).length, 4))), mul_1006633501);
    }
    else {
    if ((0 < (s_p0).length)) {
    F.line = 440;
    var a_1006633513 = (s_p0[chckIndx(0, 0, (s_p0).length - 1)] >>> 0);
    F.line = 441;
    var b_1006633521 = (s_p0[chckIndx(((s_p0).length >> 1), 0, (s_p0).length - 1)] >>> 0);
    F.line = 442;
    var c_1006633525 = (s_p0[chckIndx(subInt((s_p0).length, 1), 0, (s_p0).length - 1)] >>> 0);
    F.line = 443;
    var y_1006633530 = ((a_1006633513 + ((b_1006633521 << 8) >>> 0)) >>> 0);
    F.line = 444;
    var z_1006633535 = BigInt.asUintN(64, (lenU__pureZhashes_u484(s_p0) + BigInt(((c_1006633525 << 2) >>> 0))));
    Temporary1 = BigInt.asUintN(64, (shiftMix__pureZhashes_u490((BigInt.asUintN(64, (BigInt(y_1006633530) * 11160318154034397263n)) ^ BigInt.asUintN(64, (z_1006633535 * 14097894508562428199n)))) * 11160318154034397263n));
    }
    else {
    Temporary1 = 11160318154034397263n;
    }
    }}
    result_1006633486 = Temporary1;
  framePtr = F.prev;

  return result_1006633486;

}

function len17_32__pureZhashes_u576(s_p0) {
  var result_1006633538 = 0n;

  var F = {procname: "hashes.len17_32", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 449;
    F.filename = "hashes.nim";
    F.line = 449;
    var mul_1006633539 = BigInt.asUintN(64, (11160318154034397263n + BigInt.asUintN(64, (2n * lenU__pureZhashes_u484(s_p0)))));
    F.line = 450;
    var a_1006633540 = BigInt.asUintN(64, (load8__pureZhashes_u480(s_p0, 0) * 13011662864482103923n));
    F.line = 451;
    var b_1006633541 = load8__pureZhashes_u480(s_p0, 8);
    F.line = 452;
    var c_1006633545 = BigInt.asUintN(64, (load8__pureZhashes_u480(s_p0, subInt((s_p0).length, 8)) * mul_1006633539));
    F.line = 453;
    var d_1006633549 = BigInt.asUintN(64, (load8__pureZhashes_u480(s_p0, subInt((s_p0).length, 16)) * 11160318154034397263n));
    result_1006633538 = len16__pureZhashes_u509(BigInt.asUintN(64, (BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (a_1006633540 + b_1006633541)), 43) + rotR__pureZhashes_u497(c_1006633545, 30))) + d_1006633549)), BigInt.asUintN(64, (BigInt.asUintN(64, (a_1006633540 + rotR__pureZhashes_u497(BigInt.asUintN(64, (b_1006633541 + 11160318154034397263n)), 18))) + c_1006633545)), mul_1006633539);
  framePtr = F.prev;

  return result_1006633538;

}

function len33_64__pureZhashes_u590(s_p0) {
  var result_1006633552 = 0n;

  var F = {procname: "hashes.len33_64", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 457;
    F.filename = "hashes.nim";
    F.line = 457;
    var mul_1006633553 = BigInt.asUintN(64, (11160318154034397263n + BigInt.asUintN(64, (2n * lenU__pureZhashes_u484(s_p0)))));
    F.line = 458;
    var a_1006633554 = BigInt.asUintN(64, (load8__pureZhashes_u480(s_p0, 0) * 11160318154034397263n));
    F.line = 459;
    var b_1006633555 = load8__pureZhashes_u480(s_p0, 8);
    F.line = 460;
    var c_1006633559 = BigInt.asUintN(64, (load8__pureZhashes_u480(s_p0, subInt((s_p0).length, 8)) * mul_1006633553));
    F.line = 461;
    var d_1006633563 = BigInt.asUintN(64, (load8__pureZhashes_u480(s_p0, subInt((s_p0).length, 16)) * 11160318154034397263n));
    F.line = 462;
    var y_1006633564 = BigInt.asUintN(64, (BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (a_1006633554 + b_1006633555)), 43) + rotR__pureZhashes_u497(c_1006633559, 30))) + d_1006633563));
    F.line = 463;
    var z_1006633565 = len16__pureZhashes_u509(y_1006633564, BigInt.asUintN(64, (BigInt.asUintN(64, (a_1006633554 + rotR__pureZhashes_u497(BigInt.asUintN(64, (b_1006633555 + 11160318154034397263n)), 18))) + c_1006633559)), mul_1006633553);
    F.line = 464;
    var e_1006633566 = BigInt.asUintN(64, (load8__pureZhashes_u480(s_p0, 16) * mul_1006633553));
    F.line = 465;
    var f_1006633567 = load8__pureZhashes_u480(s_p0, 24);
    F.line = 466;
    var g_1006633571 = BigInt.asUintN(64, (BigInt.asUintN(64, (y_1006633564 + load8__pureZhashes_u480(s_p0, subInt((s_p0).length, 32)))) * mul_1006633553));
    F.line = 467;
    var h_1006633575 = BigInt.asUintN(64, (BigInt.asUintN(64, (z_1006633565 + load8__pureZhashes_u480(s_p0, subInt((s_p0).length, 24)))) * mul_1006633553));
    result_1006633552 = len16__pureZhashes_u509(BigInt.asUintN(64, (BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (e_1006633566 + f_1006633567)), 43) + rotR__pureZhashes_u497(g_1006633571, 30))) + h_1006633575)), BigInt.asUintN(64, (BigInt.asUintN(64, (e_1006633566 + rotR__pureZhashes_u497(BigInt.asUintN(64, (f_1006633567 + a_1006633554)), 18))) + g_1006633571)), mul_1006633553);
  framePtr = F.prev;

  return result_1006633552;

}

function raiseDivByZero() {
    raiseException({message: [100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111], parent: null, m_type: NTI134217742, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function weakLen32withSeeds2__pureZhashes_u621(w_p0, x_p1, y_p2, z_p3, a_p4, b_p5) {
  var result_1006633588 = {Field0: 0n, Field1: 0n};

  var F = {procname: "hashes.weakLen32withSeeds2", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 473;
    F.filename = "hashes.nim";
    var a_1006633589 = BigInt.asUintN(64, (a_p4 + w_p0));
    F.line = 474;
    var b_1006633590 = rotR__pureZhashes_u497(BigInt.asUintN(64, (BigInt.asUintN(64, (b_p5 + a_1006633589)) + z_p3)), 21);
    F.line = 475;
    var c_1006633591 = a_1006633589;
    F.line = 476;
    a_1006633589 = BigInt.asUintN(64, a_1006633589 + BigInt(x_p1));
    F.line = 477;
    a_1006633589 = BigInt.asUintN(64, a_1006633589 + BigInt(y_p2));
    F.line = 478;
    b_1006633590 = BigInt.asUintN(64, b_1006633590 + BigInt(rotR__pureZhashes_u497(a_1006633589, 44)));
    F.line = 479;
    result_1006633588["Field0"] = BigInt.asUintN(64, (a_1006633589 + z_p3));
    F.line = 480;
    result_1006633588["Field1"] = BigInt.asUintN(64, (b_1006633590 + c_1006633591));
  framePtr = F.prev;

  return result_1006633588;

}

function weakLen32withSeeds__pureZhashes_u644(s_p0, o_p1, a_p2, b_p3) {
  var result_1006633609 = {Field0: 0n, Field1: 0n};

  var F = {procname: "hashes.weakLen32withSeeds", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 483;
    F.filename = "hashes.nim";
    result_1006633609 = nimCopy(result_1006633609, weakLen32withSeeds2__pureZhashes_u621(load8__pureZhashes_u480(s_p0, o_p1), load8__pureZhashes_u480(s_p0, addInt(o_p1, 8)), load8__pureZhashes_u480(s_p0, addInt(o_p1, 16)), load8__pureZhashes_u480(s_p0, addInt(o_p1, 24)), a_p2, b_p3), NTI1006633308);
  framePtr = F.prev;

  return result_1006633609;

}

function hashFarm__pureZhashes_u667(s_p0) {
  var result_1006633629 = 0n;

  var F = {procname: "hashes.hashFarm", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 487;
    F.filename = "hashes.nim";
    if (((s_p0).length <= 16)) {
    F.line = 487;
    result_1006633629 = len0_16__pureZhashes_u524(s_p0);
    break BeforeRet;
    }
    
    if (((s_p0).length <= 32)) {
    F.line = 488;
    result_1006633629 = len17_32__pureZhashes_u576(s_p0);
    break BeforeRet;
    }
    
    if (((s_p0).length <= 64)) {
    F.line = 489;
    result_1006633629 = len33_64__pureZhashes_u590(s_p0);
    break BeforeRet;
    }
    
    F.line = 492;
    var o_1006633640 = 0;
    F.line = 493;
    var x_1006633641 = 81n;
    F.line = 494;
    var y_1006633642 = 2480279821605975764n;
    F.line = 495;
    var z_1006633643 = BigInt.asUintN(64, (shiftMix__pureZhashes_u490(BigInt.asUintN(64, (BigInt.asUintN(64, (y_1006633642 * 11160318154034397263n)) + 113n))) * 11160318154034397263n));
    F.line = 496;
    var v_1006633649 = nimCopy(null, {Field0: 0n, Field1: 0n}, NTI1006633308);
    F.line = 496;
    var w_1006633654 = nimCopy(null, {Field0: 0n, Field1: 0n}, NTI1006633308);
    F.line = 497;
    x_1006633641 = BigInt.asUintN(64, (BigInt.asUintN(64, (x_1006633641 * 11160318154034397263n)) + load8__pureZhashes_u480(s_p0, 0)));
    F.line = 498;
    var eos_1006633658 = mulInt(divInt(subInt((s_p0).length, 1), 64), 64);
    F.line = 499;
    var last64_1006633662 = subInt(addInt(eos_1006633658, (subInt((s_p0).length, 1) & 63)), 63);
    Label1: {
      F.line = 500;
        Label2: while (true) {
        if (!true) break Label2;
          F.line = 501;
          x_1006633641 = BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (BigInt.asUintN(64, (BigInt.asUintN(64, (x_1006633641 + y_1006633642)) + v_1006633649["Field0"])) + load8__pureZhashes_u480(s_p0, addInt(o_1006633640, 8)))), 37) * 13011662864482103923n));
          F.line = 502;
          y_1006633642 = BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (BigInt.asUintN(64, (y_1006633642 + v_1006633649["Field1"])) + load8__pureZhashes_u480(s_p0, addInt(o_1006633640, 48)))), 42) * 13011662864482103923n));
          F.line = 503;
          x_1006633641 = (x_1006633641 ^ w_1006633654["Field1"]);
          F.line = 504;
          y_1006633642 = BigInt.asUintN(64, y_1006633642 + BigInt(BigInt.asUintN(64, (v_1006633649["Field0"] + load8__pureZhashes_u480(s_p0, addInt(o_1006633640, 40))))));
          F.line = 505;
          z_1006633643 = BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (z_1006633643 + w_1006633654["Field0"])), 33) * 13011662864482103923n));
          F.line = 506;
          v_1006633649 = nimCopy(v_1006633649, weakLen32withSeeds__pureZhashes_u644(s_p0, addInt(o_1006633640, 0), BigInt.asUintN(64, (v_1006633649["Field1"] * 13011662864482103923n)), BigInt.asUintN(64, (x_1006633641 + w_1006633654["Field0"]))), NTI1006633308);
          F.line = 507;
          w_1006633654 = nimCopy(w_1006633654, weakLen32withSeeds__pureZhashes_u644(s_p0, addInt(o_1006633640, 32), BigInt.asUintN(64, (z_1006633643 + w_1006633654["Field1"])), BigInt.asUintN(64, (y_1006633642 + load8__pureZhashes_u480(s_p0, addInt(o_1006633640, 16))))), NTI1006633308);
          F.line = 508;
          F.line = 508;
          var HEX3Atmp_553665151 = z_1006633643;
          F.line = 508;
          z_1006633643 = x_1006633641;
          F.line = 508;
          x_1006633641 = HEX3Atmp_553665151;
          F.line = 509;
          o_1006633640 = addInt(o_1006633640, 64);
          if ((o_1006633640 == eos_1006633658)) {
          F.line = 510;
          break Label1;
          }
          
        }
    };
    F.line = 511;
    var mul_1006633680 = BigInt.asUintN(64, (13011662864482103923n + BigInt.asUintN(64, (z_1006633643 & 255n) << BigInt(1))));
    F.line = 512;
    o_1006633640 = last64_1006633662;
    F.line = 513;
    w_1006633654["Field0"] = BigInt.asUintN(64, w_1006633654["Field0"] + BigInt((BigInt.asUintN(64, (lenU__pureZhashes_u484(s_p0) - 1n)) & 63n)));
    F.line = 514;
    v_1006633649["Field0"] = BigInt.asUintN(64, v_1006633649["Field0"] + BigInt(w_1006633654["Field0"]));
    F.line = 515;
    w_1006633654["Field0"] = BigInt.asUintN(64, w_1006633654["Field0"] + BigInt(v_1006633649["Field0"]));
    F.line = 516;
    x_1006633641 = BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (BigInt.asUintN(64, (BigInt.asUintN(64, (x_1006633641 + y_1006633642)) + v_1006633649["Field0"])) + load8__pureZhashes_u480(s_p0, addInt(o_1006633640, 8)))), 37) * mul_1006633680));
    F.line = 517;
    y_1006633642 = BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (BigInt.asUintN(64, (y_1006633642 + v_1006633649["Field1"])) + load8__pureZhashes_u480(s_p0, addInt(o_1006633640, 48)))), 42) * mul_1006633680));
    F.line = 518;
    x_1006633641 = (x_1006633641 ^ BigInt.asUintN(64, (w_1006633654["Field1"] * 9n)));
    F.line = 519;
    y_1006633642 = BigInt.asUintN(64, y_1006633642 + BigInt(BigInt.asUintN(64, (BigInt.asUintN(64, (v_1006633649["Field0"] * 9n)) + load8__pureZhashes_u480(s_p0, addInt(o_1006633640, 40))))));
    F.line = 520;
    z_1006633643 = BigInt.asUintN(64, (rotR__pureZhashes_u497(BigInt.asUintN(64, (z_1006633643 + w_1006633654["Field0"])), 33) * mul_1006633680));
    F.line = 521;
    v_1006633649 = nimCopy(v_1006633649, weakLen32withSeeds__pureZhashes_u644(s_p0, addInt(o_1006633640, 0), BigInt.asUintN(64, (v_1006633649["Field1"] * mul_1006633680)), BigInt.asUintN(64, (x_1006633641 + w_1006633654["Field0"]))), NTI1006633308);
    F.line = 522;
    w_1006633654 = nimCopy(w_1006633654, weakLen32withSeeds__pureZhashes_u644(s_p0, addInt(o_1006633640, 32), BigInt.asUintN(64, (z_1006633643 + w_1006633654["Field1"])), BigInt.asUintN(64, (y_1006633642 + load8__pureZhashes_u480(s_p0, addInt(o_1006633640, 16))))), NTI1006633308);
    F.line = 523;
    F.line = 523;
    var HEX3Atmp_553665152 = z_1006633643;
    F.line = 523;
    z_1006633643 = x_1006633641;
    F.line = 523;
    x_1006633641 = HEX3Atmp_553665152;
    result_1006633629 = len16__pureZhashes_u509(BigInt.asUintN(64, (BigInt.asUintN(64, (len16__pureZhashes_u509(v_1006633649["Field0"], w_1006633654["Field0"], mul_1006633680) + BigInt.asUintN(64, (shiftMix__pureZhashes_u490(y_1006633642) * 14097894508562428199n)))) + z_1006633643)), BigInt.asUintN(64, (len16__pureZhashes_u509(v_1006633649["Field1"], w_1006633654["Field1"], mul_1006633680) + x_1006633641)), mul_1006633680);
  };
  framePtr = F.prev;

  return result_1006633629;

}

function hash__pureZhashes_u743(x_p0) {
  var result_1006633705 = 0;

  var F = {procname: "hashes.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 542;
    F.filename = "hashes.nim";
    result_1006633705 = Number(BigInt.asIntN(32, hashFarm__pureZhashes_u667((x_p0.slice(0, (x_p0).length - 1 + 1)))));
  framePtr = F.prev;

  return result_1006633705;

}

function isFilled__pureZcollectionsZtables_u31(hcode_p0) {
  var result_989855777 = false;

  var F = {procname: "tables.isFilled", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 27;
    F.filename = "hashcommon.nim";
    result_989855777 = !((hcode_p0 == 0));
  framePtr = F.prev;

  return result_989855777;

}

function nextTry__pureZcollectionsZtables_u34(h_p0, maxHash_p1) {
  var result_989855781 = 0;

  var F = {procname: "tables.nextTry", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "hashcommon.nim";
    result_989855781 = (addInt(h_p0, 1) & maxHash_p1);
  framePtr = F.prev;

  return result_989855781;

}

function rawGet__lisp_u2096(t_p0, key_p1, hc_p2, hc_p2_Idx) {
  var result_553650230 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 59;
    F.filename = "hashcommon.nim";
    hc_p2[hc_p2_Idx] = hash__pureZhashes_u743(key_p1);
    if ((hc_p2[hc_p2_Idx] == 0)) {
    F.line = 64;
    hc_p2[hc_p2_Idx] = 314159265;
    }
    
    if (((t_p0.data).length == 0)) {
    F.line = 43;
    result_553650230 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_553650281 = (hc_p2[hc_p2_Idx] & (t_p0.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled__pureZcollectionsZtables_u31(t_p0.data[chckIndx(h_553650281, 0, (t_p0.data).length - 1)].Field0)) break Label2;
          if (((t_p0.data[chckIndx(h_553650281, 0, (t_p0.data).length - 1)].Field0 == hc_p2[hc_p2_Idx]) && eqStrings(t_p0.data[chckIndx(h_553650281, 0, (t_p0.data).length - 1)].Field1, key_p1))) {
          F.line = 51;
          result_553650230 = h_553650281;
          break BeforeRet;
          }
          
          F.line = 52;
          h_553650281 = nextTry__pureZcollectionsZtables_u34(h_553650281, (t_p0.data).length - 1);
        }
    };
    F.line = 53;
    result_553650230 = subInt((-1), h_553650281);
  };
  framePtr = F.prev;

  return result_553650230;

}

function getOrDefault__lisp_u2366(t_p0, key_p1) {
  var result_553650499 = null;

  var F = {procname: "getOrDefault.getOrDefault", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 419;
    F.filename = "tables.nim";
    result_553650499 = null;
    F.line = 200;
    F.filename = "tableimpl.nim";
    var hcHEX60gensym110_553650506 = [0];
    F.line = 201;
    var indexHEX60gensym110_553650513 = rawGet__lisp_u2096(t_p0, key_p1, hcHEX60gensym110_553650506, 0);
    if ((0 <= indexHEX60gensym110_553650513)) {
    F.line = 202;
    result_553650499 = t_p0.data[chckIndx(indexHEX60gensym110_553650513, 0, (t_p0.data).length - 1)].Field2;
    }
    
  framePtr = F.prev;

  return result_553650499;

}

function substrEq__pureZstrutils_u255(s_p0, pos_p1, substr_p2) {
    var Temporary1;

  var result_738197763 = false;

  var F = {procname: "strutils.substrEq", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 370;
    F.filename = "strutils.nim";
    F.line = 370;
    var length_738197764 = (substr_p2).length;
    if ((0 < length_738197764)) {
    F.line = 372;
    var i_738197765 = 0;
    Label2: {
      F.line = 373;
        Label3: while (true) {
        if (!(((i_738197765 < length_738197764) && (addInt(pos_p1, i_738197765) < (s_p0).length)) && (s_p0[chckIndx(addInt(pos_p1, i_738197765), 0, (s_p0).length - 1)] == substr_p2[chckIndx(i_738197765, 0, (substr_p2).length - 1)]))) break Label3;
          F.line = 374;
          i_738197765 = addInt(i_738197765, 1);
        }
    };
    Temporary1 = (i_738197765 == length_738197764);
    }
    else {
    Temporary1 = false;
    }
    
    result_738197763 = Temporary1;
  framePtr = F.prev;

  return result_738197763;

}

function substr__system_u3700(s_p0, first_p1, last_p2) {
  var result_33558136 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2797;
    F.filename = "system.nim";
    var first_33558137 = nimMax(first_p1, 0);
    F.line = 2798;
    var L_33558138 = nimMax(addInt(subInt(nimMin(last_p2, (s_p0).length - 1), first_33558137), 1), 0);
    F.line = 2799;
    result_33558136 = nimCopy(null, mnewString(chckRange(L_33558138, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 2800;
      var i_33558143 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553663960 = 0;
      F.line = 2800;
      F.filename = "system.nim";
      colontmp__553663960 = subInt(L_33558138, 1);
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553663961 = 0;
      Label2: {
        F.line = 97;
          Label3: while (true) {
          if (!(res_553663961 <= colontmp__553663960)) break Label3;
            F.line = 2800;
            F.filename = "system.nim";
            i_33558143 = res_553663961;
            F.line = 2801;
            result_33558136[chckIndx(i_33558143, 0, (result_33558136).length - 1)] = s_p0[chckIndx(addInt(i_33558143, first_33558137), 0, (s_p0).length - 1)];
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553663961 = addInt(res_553663961, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_33558136;

}

function hasKey__lisp_u2089(t_p0, key_p1) {
  var result_553650222 = false;

  var F = {procname: "hasKey.hasKey", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 370;
    F.filename = "tables.nim";
    var hc_553650223 = [0];
    F.line = 371;
    result_553650222 = (0 <= rawGet__lisp_u2096(t_p0, key_p1, hc_553650223, 0));
  framePtr = F.prev;

  return result_553650222;

}

function raiseKeyError__lisp_u5395(key_p0) {
  var F = {procname: "raiseKeyError.raiseKeyError", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 232;
    F.filename = "tables.nim";
    raiseException({message: ([107,101,121,32,110,111,116,32,102,111,117,110,100,58,32]).concat(key_p0), parent: null, m_type: NTI134217747, name: null, trace: [], up: null}, "KeyError");
  framePtr = F.prev;

  
}

function HEX5BHEX5D__lisp_u5332(t_p0, key_p1) {
  var result_553653465 = null;
  var result_553653465_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 240;
    F.filename = "tables.nim";
    var hcHEX60gensym22_553653466 = [0];
    F.line = 241;
    var indexHEX60gensym22_553653473 = rawGet__lisp_u2096(t_p0, key_p1, hcHEX60gensym22_553653466, 0);
    if ((0 <= indexHEX60gensym22_553653473)) {
    F.line = 242;
    result_553653465 = t_p0.data[chckIndx(indexHEX60gensym22_553653473, 0, (t_p0.data).length - 1)]; result_553653465_Idx = "Field2";
    }
    else {
      F.line = 244;
    raiseKeyError__lisp_u5395(key_p1);
    }
    
  framePtr = F.prev;

  return [result_553653465, result_553653465_Idx];

}

function evalSymbol__lisp_u5228(st_p0, n_p1) {
              var Temporary4;
            var Temporary5;
            var Temporary6;
    var Temporary7;
    var Temporary8;

  var result_553653359 = null;

  var F = {procname: "lisp.evalSymbol", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 510;
      F.filename = "lisp.nim";
      var i_553653368 = 0;
      F.line = 6;
      F.filename = "iterators_1.nim";
      var colontmp__553665155 = 0;
      F.line = 510;
      F.filename = "lisp.nim";
      colontmp__553665155 = (st_p0.stacks).length - 1;
      F.line = 33;
      F.filename = "iterators_1.nim";
      var res_553665156 = colontmp__553665155;
      Label2: {
        F.line = 34;
          Label3: while (true) {
          if (!(0 <= res_553665156)) break Label3;
            F.line = 510;
            F.filename = "lisp.nim";
            i_553653368 = res_553665156;
            F.line = 511;
            var s_553653369 = st_p0.stacks[chckIndx(i_553653368, 0, (st_p0.stacks).length - 1)];
              var Temporary4 = n_p1;
              if (ConstSet73[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
            if (hasKey__lisp_u2089(s_553653369.symbols, Temporary4.sym)) {
            F.line = 513;
            var Temporary5 = n_p1;
            if (ConstSet74[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
            result_553653359 = (Temporary6 = HEX5BHEX5D__lisp_u5332(s_553653369.symbols, Temporary5.sym), Temporary6)[0][Temporary6[1]];
            F.line = 514;
            break Label1;
            }
            
            F.line = 39;
            F.filename = "iterators_1.nim";
            res_553665156 = subInt(res_553665156, 1);
          }
      };
    };
    if (!(!((result_553653359 == null)))) {
    F.line = 282;
    F.filename = "lisp.nim";
    var inst_553653583 = {Field0: [108,105,115,112,46,110,105,109], Field1: 516, Field2: 3};
    F.line = 283;
    var Temporary7 = n_p1;
    if (ConstSet75[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553653583.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,83,121,109,98,111,108,32,110,111,116,32,102,111,117,110,100,58,32],Temporary7.sym));
    }
    
    if (!(!((result_553653359.kind == 0)))) {
    F.line = 282;
    var inst_553653589 = {Field0: [108,105,115,112,46,110,105,109], Field1: 517, Field2: 3};
    F.line = 283;
    var Temporary8 = n_p1;
    if (ConstSet76[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553653589.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,83,121,109,98,111,108,32,99,97,110,110,111,116,32,112,111,105,110,116,32,116,111,32,97,110,111,116,104,101,114,32,115,121,109,98,111,108,58,32],Temporary8.sym));
    }
    
    F.line = 519;
    result_553653359.line = n_p1.line;
  framePtr = F.prev;

  return result_553653359;

}

function initReprClosure__system_u3290(cl_p0) {
  var F = {procname: "system.initReprClosure", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 113;
    F.filename = "reprjs.nim";
    cl_p0.recDepth = (-1);
    F.line = 114;
    cl_p0.indent = 0;
  framePtr = F.prev;

  
}

function reprInt(x_p0) {
  var result_33557593 = [];

  var F = {procname: "system.reprInt", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 16;
    F.filename = "reprjs.nim";
    result_33557593 = nimCopy(null, HEX24__systemZdollars_u8(x_p0), NTI33554449);
  framePtr = F.prev;

  return result_33557593;

}

function HEX24__systemZdollars_u11(x_p0) {
  var result_369098765 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 24;
    F.filename = "dollars.nim";
    result_369098765[0] = nimCopy(null, [], NTI33554449);
    F.line = 25;
    addInt__stdZprivateZdigitsutils_u223(result_369098765, 0, x_p0);
  framePtr = F.prev;

  return result_369098765[0];

}

function reprInt(x_p0) {
  var result_33557587 = [];

  var F = {procname: "system.reprInt", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 14;
    F.filename = "reprjs.nim";
    result_33557587 = nimCopy(null, HEX24__systemZdollars_u11(x_p0), NTI33554449);
  framePtr = F.prev;

  return result_33557587;

}

function addInt__stdZprivateZdigitsutils_u192(result_p0, result_p0_Idx, x_p1) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 90;
    F.filename = "digitsutils.nim";
    addChars__stdZprivateZdigitsutils_u198(result_p0, result_p0_Idx, ((x_p1) + ""));
  framePtr = F.prev;

  
}

function HEX24__systemZdollars_u14(x_p0) {
  var result_369098768 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 29;
    F.filename = "dollars.nim";
    result_369098768[0] = nimCopy(null, [], NTI33554449);
    F.line = 30;
    addInt__stdZprivateZdigitsutils_u192(result_369098768, 0, x_p0);
  framePtr = F.prev;

  return result_369098768[0];

}

function reprInt(x_p0) {
  var result_33557590 = [];

  var F = {procname: "system.reprInt", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 15;
    F.filename = "reprjs.nim";
    result_33557590 = nimCopy(null, HEX24__systemZdollars_u14(x_p0), NTI33554449);
  framePtr = F.prev;

  return result_33557590;

}

function reprChar(x_p0) {
  var result_33557667 = [];

  var F = {procname: "system.reprChar", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 41;
    F.filename = "reprjs.nim";
    result_33557667 = nimCopy(null, [39], NTI33554449);
    F.line = 42;
    switch (x_p0) {
    case 34:
      F.line = 43;
      result_33557667.push.apply(result_33557667, [92,34]);;
      break;
    case 92:
      F.line = 44;
      result_33557667.push.apply(result_33557667, [92,92]);;
      break;
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      F.line = 45;
      result_33557667.push.apply(result_33557667, ([92]).concat(reprInt(x_p0)));;
      break;
    default: 
      F.line = 46;
      addChar(result_33557667, x_p0);;
      break;
    }
    F.line = 47;
    result_33557667.push.apply(result_33557667, [39]);;
  framePtr = F.prev;

  return result_33557667;

}

function reprBool(x_p0) {
  var result_33557622 = [];

  var F = {procname: "system.reprBool", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    if (x_p0) {
    F.line = 26;
    F.filename = "reprjs.nim";
    result_33557622 = nimCopy(null, [116,114,117,101], NTI33554449);
    }
    else {
      F.line = 27;
      result_33557622 = nimCopy(null, [102,97,108,115,101], NTI33554449);
    }
    
  framePtr = F.prev;

  return result_33557622;

}

function nimFloatToString__stdZformatfloat_u130(a_p0) {
  var result_385876100 = null;

  var F = {procname: "formatfloat.nimFloatToString", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/formatfloat.nim", line: 0};
  framePtr = F;
    F.line = 107;
    F.filename = "formatfloat.nim";
          function nimOnlyDigitsOrMinus(n) {
        return n.toString().match(/^-?\d+$/);
      }
      if (Number.isSafeInteger(a_p0))
        result_385876100 = a_p0 === 0 && 1 / a_p0 < 0 ? "-0.0" : a_p0+".0";
      else {
        result_385876100 = a_p0+"";
        if(nimOnlyDigitsOrMinus(result_385876100)){
          result_385876100 = a_p0+".0";
        }
      }
    
  framePtr = F.prev;

  return result_385876100;

}

function addFloat__system_u3169(result_p0, result_p0_Idx, x_p1) {
  var F = {procname: "addFloat.addFloat", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/formatfloat.nim", line: 0};
  framePtr = F;
    F.line = 137;
    F.filename = "formatfloat.nim";
    add__system_u1942(result_p0, result_p0_Idx, nimFloatToString__stdZformatfloat_u130(x_p1));
  framePtr = F.prev;

  
}

function HEX24__system_u3165(x_p0) {
  var result_33557600 = [[]];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 14;
    F.filename = "dollars.nim";
    result_33557600[0] = nimCopy(null, [], NTI33554449);
    F.line = 15;
    addFloat__system_u3169(result_33557600, 0, x_p0);
  framePtr = F.prev;

  return result_33557600[0];

}

function reprFloat(x_p0) {
  var result_33557596 = [];

  var F = {procname: "system.reprFloat", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 17;
    F.filename = "reprjs.nim";
    result_33557596 = nimCopy(null, HEX24__system_u3165(x_p0), NTI33554449);
  framePtr = F.prev;

  return result_33557596;

}

function reprStrAux__system_u3249(result_p0, result_p0_Idx, s_p1, len_p2) {
  var F = {procname: "reprStrAux.reprStrAux", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 50;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [34]);;
    Label1: {
      F.line = 51;
      var i_33557690 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665230 = 0;
      F.line = 51;
      F.filename = "reprjs.nim";
      colontmp__553665230 = (len_p2 - 1);
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665231 = 0;
      Label2: {
        F.line = 97;
          Label3: while (true) {
          if (!(res_553665231 <= colontmp__553665230)) break Label3;
            F.line = 51;
            F.filename = "reprjs.nim";
            i_33557690 = res_553665231;
            F.line = 52;
            var c_33557691 = s_p1[i_33557690];
            F.line = 53;
            switch (c_33557691) {
            case 34:
              F.line = 54;
              result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [92,34]);;
              break;
            case 92:
              F.line = 55;
              result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [92,92]);;
              break;
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
              F.line = 58;
              result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], ([92]).concat(reprInt(c_33557691)));;
              break;
            default: 
              F.line = 60;
              addChar(result_p0[result_p0_Idx], c_33557691);;
              break;
            }
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665231 += 1;
          }
      };
    };
    F.line = 61;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [34]);;
  framePtr = F.prev;

  
}

function reprStr(s_p0) {
  var result_33557680 = [[]];

  var F = {procname: "system.reprStr", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 64;
    F.filename = "reprjs.nim";
    reprStrAux__system_u3249(result_33557680, 0, s_p0, (s_p0).length);
  framePtr = F.prev;

  return result_33557680[0];

}

function reprStrAux__system_u3360(result_p0, result_p0_Idx, s_p1, len_p2) {
  var F = {procname: "reprStrAux.reprStrAux", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 50;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [34]);;
    Label1: {
      F.line = 51;
      var i_33557801 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665234 = 0;
      F.line = 51;
      F.filename = "reprjs.nim";
      colontmp__553665234 = (len_p2 - 1);
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665235 = 0;
      Label2: {
        F.line = 97;
          Label3: while (true) {
          if (!(res_553665235 <= colontmp__553665234)) break Label3;
            F.line = 51;
            F.filename = "reprjs.nim";
            i_33557801 = res_553665235;
            F.line = 52;
            var c_33557802 = s_p1.charCodeAt(i_33557801);
            F.line = 53;
            switch (c_33557802) {
            case 34:
              F.line = 54;
              result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [92,34]);;
              break;
            case 92:
              F.line = 55;
              result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [92,92]);;
              break;
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
              F.line = 58;
              result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], ([92]).concat(reprInt(c_33557802)));;
              break;
            default: 
              F.line = 60;
              addChar(result_p0[result_p0_Idx], c_33557802);;
              break;
            }
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665235 += 1;
          }
      };
    };
    F.line = 61;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [34]);;
  framePtr = F.prev;

  
}

function addSetElem__system_u3263(result_p0, result_p0_Idx, elem_p1, typ_p2) {
  var F = {procname: "system.addSetElem", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 68;
    F.filename = "reprjs.nim";
    switch (typ_p2.kind) {
    case 14:
      F.line = 69;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprEnum(elem_p1, typ_p2));;
      break;
    case 1:
      F.line = 70;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprBool((!!(elem_p1))));;
      break;
    case 2:
      F.line = 71;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprChar(elem_p1));;
      break;
    case 20:
      F.line = 72;
      addSetElem__system_u3263(result_p0, result_p0_Idx, elem_p1, typ_p2.base);
      break;
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 41:
    case 42:
      F.line = 73;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprInt(elem_p1));;
      break;
    default: 
      F.line = 75;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [32,40,105,110,118,97,108,105,100,32,100,97,116,97,33,41]);;
      break;
    }
  framePtr = F.prev;

  
}

function reprSetAux__system_u3277(result_p0, result_p0_Idx, s_p1, typ_p2) {
  var F = {procname: "system.reprSetAux", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 94;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [123]);;
    F.line = 95;
    var first_33557713 = true;
    Label1: {
      F.line = 96;
      var el_33557714 = 0;
      F.line = 81;
      var len_553665239 = 0;
      F.line = 82;
      var yieldRes_553665240 = 0;
      F.line = 83;
      var i_553665241 = 0;
      F.line = 84;
        var setObjKeys = Object.getOwnPropertyNames(s_p1);
  len_553665239 = setObjKeys.length;
  
      Label2: {
        F.line = 88;
          Label3: while (true) {
          if (!(i_553665241 < len_553665239)) break Label3;
            F.line = 89;
            yieldRes_553665240 = parseInt(setObjKeys[i_553665241],10);

            F.line = 96;
            el_33557714 = yieldRes_553665240;
            if (first_33557713) {
            F.line = 98;
            first_33557713 = false;
            }
            else {
              F.line = 100;
            result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [44,32]);;
            }
            
            F.line = 101;
            addSetElem__system_u3263(result_p0, result_p0_Idx, el_33557714, typ_p2.base);
            F.line = 91;
            i_553665241 += 1;
          }
      };
    };
    F.line = 102;
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [125]);;
  framePtr = F.prev;

  
}

function reprSet(e_p0, typ_p1) {
  var result_33557718 = [[]];

  var F = {procname: "system.reprSet", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 105;
    F.filename = "reprjs.nim";
    reprSetAux__system_u3277(result_33557718, 0, e_p0, typ_p1);
  framePtr = F.prev;

  return result_33557718[0];

}

function reprRecordAux__system_u3325(result_p0, result_p0_Idx, o_p1, o_p1_Idx, typ_p2, cl_p3) {
  var F = {procname: "system.reprRecordAux", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 157;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [91]);;
    F.line = 159;
    var first_33557762 = true;
    F.line = 160;
    var val_33557763 = o_p1, val_33557763_Idx = o_p1_Idx;
    if ((typ_p2.node.len == 0)) {
    F.line = 163;
    var key_33557764 = typ_p2.node.name;
    F.line = 164;
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], (cstrToNimstr(key_33557764)).concat([32,61,32]));;
    F.line = 165;
    val_33557763 = o_p1[key_33557764];

    F.line = 166;
    reprAux__system_u3292(result_p0, result_p0_Idx, val_33557763, val_33557763_Idx, typ_p2.node.typ, cl_p3);
    }
    else {
      Label1: {
        F.line = 169;
        var i_33557769 = 0;
        F.line = 81;
        F.filename = "iterators_1.nim";
        var colontmp__553665244 = 0;
        F.line = 169;
        F.filename = "reprjs.nim";
        colontmp__553665244 = (typ_p2.node.len - 1);
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553665245 = 0;
        Label2: {
          F.line = 97;
            Label3: while (true) {
            if (!(res_553665245 <= colontmp__553665244)) break Label3;
              F.line = 169;
              F.filename = "reprjs.nim";
              i_33557769 = res_553665245;
              if (first_33557762) {
              F.line = 170;
              first_33557762 = false;
              }
              else {
                F.line = 171;
              result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [44,10]);;
              }
              
              F.line = 173;
              var key_33557770 = typ_p2.node.sons[i_33557769].name;
              F.line = 174;
              result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], (cstrToNimstr(key_33557770)).concat([32,61,32]));;
              F.line = 175;
              val_33557763 = o_p1[key_33557770];

              F.line = 176;
              reprAux__system_u3292(result_p0, result_p0_Idx, val_33557763, val_33557763_Idx, typ_p2.node.sons[i_33557769].typ, cl_p3);
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553665245 += 1;
            }
        };
      };
    }
    
    F.line = 177;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [93]);;
  framePtr = F.prev;

  
}

function reprRecord(o_p0, o_p0_Idx, typ_p1, cl_p2) {
  var result_33557775 = [[]];

  var F = {procname: "system.reprRecord", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 180;
    F.filename = "reprjs.nim";
    reprRecordAux__system_u3325(result_33557775, 0, o_p0, o_p0_Idx, typ_p1, cl_p2);
  framePtr = F.prev;

  return result_33557775[0];

}

function reprArray(a_p0, a_p0_Idx, typ_p1, cl_p2) {
    var Temporary1;

  var result_33557733 = [[]];

  var F = {procname: "system.reprArray", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 121;
    F.filename = "reprjs.nim";
    if ((typ_p1.kind == 24)) {
    Temporary1 = [64,91];
    }
    else {
    Temporary1 = [91];
    }
    
    result_33557733[0] = nimCopy(null, Temporary1, NTI33554449);
    F.line = 122;
    var len_33557738 = 0;
    F.line = 124;
    len_33557738 = a_p0.length;

    F.line = 125;
    var dereffed_33557739 = a_p0, dereffed_33557739_Idx = a_p0_Idx;
    Label2: {
      F.line = 126;
      var i_33557744 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665248 = 0;
      F.line = 126;
      F.filename = "reprjs.nim";
      colontmp__553665248 = (len_33557738 - 1);
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665249 = 0;
      Label3: {
        F.line = 97;
          Label4: while (true) {
          if (!(res_553665249 <= colontmp__553665248)) break Label4;
            F.line = 126;
            F.filename = "reprjs.nim";
            i_33557744 = res_553665249;
            if ((0 < i_33557744)) {
            F.line = 128;
            result_33557733[0].push.apply(result_33557733[0], [44,32]);;
            }
            
            F.line = 130;
                dereffed_33557739_Idx = i_33557744;
    dereffed_33557739 = a_p0[dereffed_33557739_Idx];
    
            F.line = 134;
            reprAux__system_u3292(result_33557733, 0, dereffed_33557739, dereffed_33557739_Idx, typ_p1.base, cl_p2);
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665249 += 1;
          }
      };
    };
    F.line = 136;
    F.filename = "reprjs.nim";
    result_33557733[0].push.apply(result_33557733[0], [93]);;
  framePtr = F.prev;

  return result_33557733[0];

}

function reprPointer(p_p0, p_p0_Idx) {
  var result_33557618 = [];

  var F = {procname: "system.reprPointer", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 21;
    F.filename = "reprjs.nim";
    var tmp_33557619 = 0;
    F.line = 22;
    tmp_33557619 = p_p0_Idx || 0;
    F.line = 23;
    result_33557618 = nimCopy(null, HEX24__systemZdollars_u8(tmp_33557619), NTI33554449);
  framePtr = F.prev;

  return result_33557618;

}

function isPointedToNil__system_u3313(p_p0, p_p0_Idx) {
  var result_33557747 = false;

  var F = {procname: "system.isPointedToNil", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 139;
    F.filename = "reprjs.nim";
    if (p_p0 === null) {result_33557747 = true;}

  framePtr = F.prev;

  return result_33557747;

}

function reprRef__system_u3316(result_p0, result_p0_Idx, p_p1, p_p1_Idx, typ_p2, cl_p3) {
  var F = {procname: "system.reprRef", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (isPointedToNil__system_u3313(p_p1, p_p1_Idx)) {
    F.line = 144;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [110,105,108]);;
    F.line = 145;
    break BeforeRet;
    }
    
    F.line = 146;
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], ([114,101,102,32]).concat(reprPointer(p_p1, p_p1_Idx)));;
    F.line = 147;
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [32,45,45,62,32]);;
    if (!((typ_p2.base.kind == 16))) {
    F.line = 149;
        if (p_p1 != null && p_p1.length > 0) {
      p_p1 = p_p1[p_p1_Idx];
    }
    
    }
    
    F.line = 154;
    reprAux__system_u3292(result_p0, result_p0_Idx, p_p1, p_p1_Idx, typ_p2.base, cl_p3);
  };
  framePtr = F.prev;

  
}

function reprJsonStringify(p_p0) {
  var result_33557778 = [];

  var F = {procname: "system.reprJsonStringify", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 186;
    F.filename = "reprjs.nim";
    var tmp_33557779 = null;
    F.line = 187;
    tmp_33557779 = JSON.stringify(p_p0);

    F.line = 188;
    result_33557778 = nimCopy(null, cstrToNimstr(tmp_33557779), NTI33554449);
  framePtr = F.prev;

  return result_33557778;

}

function reprAux__system_u3292(result_p0, result_p0_Idx, p_p1, p_p1_Idx, typ_p2, cl_p3) {
  var F = {procname: "system.reprAux", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/reprjs.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((cl_p3.recDepth == 0)) {
    F.line = 193;
    F.filename = "reprjs.nim";
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [46,46,46]);;
    F.line = 194;
    break BeforeRet;
    }
    
    F.line = 195;
    cl_p3.recDepth -= 1;
    F.line = 196;
    switch (typ_p2.kind) {
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
      F.line = 198;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprInt(p_p1, p_p1_Idx));;
      break;
    case 35:
      F.line = 200;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprInt(p_p1, p_p1_Idx));;
      break;
    case 44:
      F.line = 202;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprInt(p_p1, p_p1_Idx));;
      break;
    case 2:
      F.line = 204;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprChar(p_p1, p_p1_Idx));;
      break;
    case 1:
      F.line = 206;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprBool(p_p1, p_p1_Idx));;
      break;
    case 36:
    case 37:
    case 38:
    case 39:
      F.line = 208;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprFloat(p_p1, p_p1_Idx));;
      break;
    case 28:
      F.line = 210;
      var fp_33557790 = 0;
      F.line = 211;
      fp_33557790 = p_p1;

      F.line = 212;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprStr(p_p1, p_p1_Idx));;
      break;
    case 29:
      F.line = 214;
      var fp_33557791 = null;
      F.line = 215;
      fp_33557791 = p_p1;

      if ((fp_33557791 == null)) {
      F.line = 217;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [110,105,108]);;
      }
      else {
        F.line = 219;
      reprStrAux__system_u3360(result_p0, result_p0_Idx, fp_33557791, ((fp_33557791) == null ? 0 : (fp_33557791).length));
      }
      
      break;
    case 14:
    case 15:
      F.line = 221;
      var fp_33557806 = 0;
      F.line = 222;
      fp_33557806 = p_p1;

      F.line = 223;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprEnum(fp_33557806, typ_p2));;
      break;
    case 19:
      F.line = 225;
      var fp_33557807 = 0;
      F.line = 226;
      fp_33557807 = p_p1;

      F.line = 227;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprSet(fp_33557807, typ_p2));;
      break;
    case 20:
      F.line = 228;
      reprAux__system_u3292(result_p0, result_p0_Idx, p_p1, p_p1_Idx, typ_p2.base, cl_p3);
      break;
    case 17:
    case 18:
      F.line = 230;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprRecord(p_p1, p_p1_Idx, typ_p2, cl_p3));;
      break;
    case 16:
    case 4:
    case 24:
      F.line = 232;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprArray(p_p1, p_p1_Idx, typ_p2, cl_p3));;
      break;
    case 26:
      F.line = 234;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprPointer(p_p1, p_p1_Idx));;
      break;
    case 21:
    case 22:
      F.line = 236;
      reprRef__system_u3316(result_p0, result_p0_Idx, p_p1, p_p1_Idx, typ_p2, cl_p3);
      break;
    case 25:
      if (isPointedToNil__system_u3313(p_p1, p_p1_Idx)) {
      F.line = 239;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], [110,105,108]);;
      }
      else {
        F.line = 241;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], reprPointer(p_p1, p_p1_Idx));;
      }
      
      break;
    default: 
      F.line = 243;
      result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], ([40,105,110,118,97,108,105,100,32,100,97,116,97,33,41]).concat(reprJsonStringify(p_p1, p_p1_Idx)));;
      break;
    }
    F.line = 244;
    cl_p3.recDepth += 1;
  };
  framePtr = F.prev;

  
}

function HEX3DHEX3D__lisp_u1535(x_p0, y_p1) {
  var result_553649667 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/comparisons.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 326;
    F.filename = "comparisons.nim";
    var sameObject_553649675 = false;
    F.line = 327;
    sameObject_553649675 = x_p0 === y_p1;
    if (sameObject_553649675) {
    F.line = 328;
    result_553649667 = true;
    break BeforeRet;
    }
    
    if (!(((x_p0).length == (y_p1).length))) {
    F.line = 331;
    result_553649667 = false;
    break BeforeRet;
    }
    
    Label1: {
      F.line = 333;
      var i_553649689 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665252 = 0;
      F.line = 333;
      F.filename = "comparisons.nim";
      colontmp__553665252 = subInt((x_p0).length, 1);
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665253 = 0;
      Label2: {
        F.line = 97;
          Label3: while (true) {
          if (!(res_553665253 <= colontmp__553665252)) break Label3;
            F.line = 333;
            F.filename = "comparisons.nim";
            i_553649689 = res_553665253;
            if (!(HEX3DHEX3D__lisp_u1499(x_p0[chckIndx(i_553649689, 0, (x_p0).length - 1)], y_p1[chckIndx(i_553649689, 0, (y_p1).length - 1)]))) {
            F.line = 335;
            result_553649667 = false;
            break BeforeRet;
            }
            
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665253 = addInt(res_553665253, 1);
          }
      };
    };
    F.line = 337;
    F.filename = "comparisons.nim";
    result_553649667 = true;
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_553649667;

}

function len__lisp_u1038(t_p0) {
  var result_553649170 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 495;
    F.filename = "tables.nim";
    result_553649170 = t_p0.counter;
  framePtr = F.prev;

  return result_553649170;

}

function HEX21HEX26__pureZhashes_u4(h_p0, val_p1) {
  var result_1006632967 = 0;

  var F = {procname: "hashes.!&", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "hashes.nim";
    var h_1006632968 = Number(BigInt.asUintN(32, BigInt(h_p0)));
    F.line = 84;
    var val_1006632969 = Number(BigInt.asUintN(32, BigInt(val_p1)));
    F.line = 85;
    var res_1006632970 = ((h_1006632968 + val_1006632969) >>> 0);
    F.line = 86;
    res_1006632970 = ((res_1006632970 + ((res_1006632970 << 10) >>> 0)) >>> 0);
    F.line = 87;
    res_1006632970 = ((res_1006632970 ^ (res_1006632970 >>> 6)) >>> 0);
    F.line = 88;
    result_1006632967 = Number(BigInt.asIntN(32, BigInt(res_1006632970)));
  framePtr = F.prev;

  return result_1006632967;

}

function hasJsBigInt__stdZprivateZjsutils_u43() {
  var result_855638060 = false;

    result_855638060 = typeof BigInt != 'undefined';

  return result_855638060;

}

function hiXorLoJs__pureZhashes_u86(a_p0, b_p1) {
  var result_1006633049 = 0n;

  var F = {procname: "hashes.hiXorLoJs", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 141;
    F.filename = "hashes.nim";
    var prod_1006633050 = (a_p0 * b_p1);
    F.line = 142;
    var mask_1006633051 = BigInt("0xffffffffffffffff");
    F.line = 143;
    result_1006633049 = ((prod_1006633050 >> BigInt("64")) ^ (prod_1006633050 & mask_1006633051));
  framePtr = F.prev;

  return result_1006633049;

}

function hashWangYi1__pureZhashes_u194(x_p0) {
  var result_1006633157 = 0;

  var F = {procname: "hashWangYi1.hashWangYi1", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    if (hasJsBigInt__stdZprivateZjsutils_u43()) {
    F.line = 183;
    F.filename = "hashes.nim";
    F.line = 147;
    var P0HEX60gensym4_1006633171 = BigInt("0xa0761d6478bd642f");
    F.line = 148;
    var P1HEX60gensym4_1006633172 = BigInt("0xe7037ed1a0b428db");
    F.line = 149;
    var P58HEX60gensym4_1006633173 = BigInt("0xeb44accab455d16d");
    F.line = 150;
    var resHEX60gensym4_1006633174 = hiXorLoJs__pureZhashes_u86(hiXorLoJs__pureZhashes_u86(P0HEX60gensym4_1006633171, (BigInt(x_p0) ^ P1HEX60gensym4_1006633172)), P58HEX60gensym4_1006633173);
    result_1006633157 = Number((() => { const i = resHEX60gensym4_1006633174, b = 32; return BigInt.asIntN(b, i) })());
    }
    else {
      F.line = 185;
      result_1006633157 = (Number(BigInt.asIntN(32, x_p0)) & Number(BigInt.asIntN(32, 4294967295n)));
    }
    
  framePtr = F.prev;

  return result_1006633157;

}

function hash__lisp_u379(x_p0) {
  var result_553648510 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 215;
    F.filename = "hashes.nim";
    result_553648510 = hashWangYi1__pureZhashes_u194(BigInt.asUintN(64, BigInt(x_p0)));
  framePtr = F.prev;

  return result_553648510;

}

function HEX21HEX24__pureZhashes_u19(h_p0) {
  var result_1006632981 = 0;

  var F = {procname: "hashes.!$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 94;
    F.filename = "hashes.nim";
    var h_1006632982 = Number(BigInt.asUintN(32, BigInt(h_p0)));
    F.line = 95;
    var res_1006632987 = ((h_1006632982 + ((h_1006632982 << 3) >>> 0)) >>> 0);
    F.line = 96;
    res_1006632987 = ((res_1006632987 ^ (res_1006632987 >>> 11)) >>> 0);
    F.line = 97;
    res_1006632987 = ((res_1006632987 + ((res_1006632987 << 15) >>> 0)) >>> 0);
    F.line = 98;
    result_1006632981 = Number(BigInt.asIntN(32, BigInt(res_1006632987)));
  framePtr = F.prev;

  return result_1006632981;

}

function hash__lisp_u335(x_p0) {
  var result_553648466 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 774;
    F.filename = "hashes.nim";
    result_553648466 = 0;
    Label1: {
      F.line = 775;
      var it_553648506 = 0;
      F.line = 62;
      F.filename = "iterators.nim";
      var i_553665264 = 0;
      Label2: {
        F.line = 63;
          Label3: while (true) {
          if (!(i_553665264 <= 1)) break Label3;
            if ((x_p0[chckRange(i_553665264, 0, 1)] != undefined)) {
            F.line = 775;
            F.filename = "hashes.nim";
            it_553648506 = chckRange(i_553665264, 0, 1);
            F.line = 776;
            result_553648466 = HEX21HEX26__pureZhashes_u4(result_553648466, hash__lisp_u379(it_553648506));
            }
            
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665264 += 1;
          }
      };
    };
    F.line = 777;
    F.filename = "hashes.nim";
    result_553648466 = HEX21HEX24__pureZhashes_u19(result_553648466);
  framePtr = F.prev;

  return result_553648466;

}

function hash__lisp_u408(x_p0) {
  var result_553648539 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 215;
    F.filename = "hashes.nim";
    result_553648539 = hashWangYi1__pureZhashes_u194(BigInt.asUintN(64, BigInt(x_p0)));
  framePtr = F.prev;

  return result_553648539;

}

function len__lisp_u498(t_p0) {
  var result_553648630 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 495;
    F.filename = "tables.nim";
    result_553648630 = t_p0.counter;
  framePtr = F.prev;

  return result_553648630;

}

function hash__lisp_u773(x_p0) {
  var result_553648904 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 712;
    F.filename = "hashes.nim";
    result_553648904 = 0;
    if (true) {
    F.line = 714;
    result_553648904 = HEX21HEX26__pureZhashes_u4(result_553648904, hash__pureZhashes_u743(x_p0["Field0"]));
    }
    
    if (true) {
    F.line = 714;
    result_553648904 = HEX21HEX26__pureZhashes_u4(result_553648904, hash__lisp_u313(x_p0["Field1"]));
    }
    
    F.line = 715;
    result_553648904 = HEX21HEX24__pureZhashes_u19(result_553648904);
  framePtr = F.prev;

  return result_553648904;

}

function hash__lisp_u449(s_p0) {
  var result_553648581 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 2958;
      F.filename = "tables.nim";
      var p_553648900 = {Field0: [], Field1: null};
      F.line = 705;
      var L_553665267 = len__lisp_u498(s_p0);
      Label2: {
        F.line = 706;
        var h_553665269 = 0;
        F.line = 81;
        F.filename = "iterators_1.nim";
        var colontmp__553665270 = 0;
        F.line = 706;
        F.filename = "tables.nim";
        colontmp__553665270 = (s_p0.data).length - 1;
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553665271 = 0;
        Label3: {
          F.line = 97;
            Label4: while (true) {
            if (!(res_553665271 <= colontmp__553665270)) break Label4;
              F.line = 706;
              F.filename = "tables.nim";
              h_553665269 = res_553665271;
              if (isFilled__pureZcollectionsZtables_u31(s_p0.data[chckIndx(h_553665269, 0, (s_p0.data).length - 1)].Field0)) {
              F.line = 2958;
              p_553648900 = nimCopy(p_553648900, {Field0: nimCopy(null, s_p0.data[chckIndx(h_553665269, 0, (s_p0.data).length - 1)].Field1, NTI33554449), Field1: s_p0.data[chckIndx(h_553665269, 0, (s_p0.data).length - 1)].Field2}, NTI553648414);
              F.line = 2959;
              result_553648581 = (result_553648581 ^ hash__lisp_u773(p_553648900));
              if (!((len__lisp_u498(s_p0) == L_553665267))) {
              F.line = 709;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553665271 = addInt(res_553665271, 1);
            }
        };
      };
    };
    F.line = 2960;
    F.filename = "tables.nim";
    result_553648581 = HEX21HEX24__pureZhashes_u19(result_553648581);
  framePtr = F.prev;

  return result_553648581;

}

function hash__lisp_u880(x_p0) {
  var result_553649011 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 215;
    F.filename = "hashes.nim";
    result_553649011 = hashWangYi1__pureZhashes_u194(BigInt.asUintN(64, BigInt(x_p0)));
  framePtr = F.prev;

  return result_553649011;

}

function hash__lisp_u893(x_p0) {
  var result_553649024 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 215;
    F.filename = "hashes.nim";
    result_553649024 = hashWangYi1__pureZhashes_u194(BigInt.asUintN(64, BigInt(x_p0)));
  framePtr = F.prev;

  return result_553649024;

}

function hasBigUint64Array__stdZprivateZjsutils_u45() {
  var result_855638062 = false;

    result_855638062 = typeof BigUint64Array != 'undefined';

  return result_855638062;

}

function hash__pureZhashes_u219(x_p0) {
    var Temporary1;

  var result_1006633181 = 0;

  var F = {procname: "hashes.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 275;
    F.filename = "hashes.nim";
    var y_1006633182 = (x_p0 + 0.0);
    F.line = 283;
    F.line = 147;
    var P0HEX60gensym8_1006633227 = BigInt("0xa0761d6478bd642f");
    F.line = 148;
    var P1HEX60gensym8_1006633228 = BigInt("0xe7037ed1a0b428db");
    F.line = 149;
    var P58HEX60gensym8_1006633229 = BigInt("0xeb44accab455d16d");
    F.line = 150;
    F.line = 155;
    var xHEX60gensym7_1006633208 = new ArrayBuffer(8);
    F.line = 156;
    var yHEX60gensym7_1006633209 = new Float64Array(xHEX60gensym7_1006633208);
    if (hasBigUint64Array__stdZprivateZjsutils_u45()) {
    F.line = 158;
    var zHEX60gensym7_1006633210 = new BigUint64Array(xHEX60gensym7_1006633208);
    F.line = 159;
    yHEX60gensym7_1006633209[0] = y_1006633182;
    Temporary1 = zHEX60gensym7_1006633210[0];
    }
    else {
      F.line = 162;
      var zHEX60gensym7_1006633211 = new Uint32Array(xHEX60gensym7_1006633208);
      F.line = 163;
      yHEX60gensym7_1006633209[0] = y_1006633182;
    Temporary1 = (BigInt(zHEX60gensym7_1006633211[0]) + (BigInt(zHEX60gensym7_1006633211[1]) << BigInt(32)));
    }
    
    var resHEX60gensym8_1006633230 = hiXorLoJs__pureZhashes_u86(hiXorLoJs__pureZhashes_u86(P0HEX60gensym8_1006633227, (Temporary1 ^ P1HEX60gensym8_1006633228)), P58HEX60gensym8_1006633229);
    result_1006633181 = Number((() => { const i = resHEX60gensym8_1006633230, b = 32; return BigInt.asIntN(b, i) })());
  framePtr = F.prev;

  return result_1006633181;

}

function hash__lisp_u910(x_p0) {
  var result_553649041 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 215;
    F.filename = "hashes.nim";
    result_553649041 = hashWangYi1__pureZhashes_u194(BigInt.asUintN(64, BigInt((x_p0 ? 1 : 0))));
  framePtr = F.prev;

  return result_553649041;

}

function hash__lisp_u929(x_p0) {
  var result_553649060 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 734;
    F.filename = "hashes.nim";
    result_553649060 = 0;
    Label1: {
      F.line = 735;
      var a_553649074 = null;
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553665275 = 0;
      Label2: {
        F.line = 19;
          Label3: while (true) {
          if (!(i_553665275 < (x_p0).length)) break Label3;
            F.line = 735;
            F.filename = "hashes.nim";
            a_553649074 = x_p0[chckIndx(i_553665275, 0, (x_p0).length - 1)];
            F.line = 736;
            result_553649060 = HEX21HEX26__pureZhashes_u4(result_553649060, hash__lisp_u313(a_553649074));
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665275 += 1;
          }
      };
    };
    F.line = 737;
    F.filename = "hashes.nim";
    result_553649060 = HEX21HEX24__pureZhashes_u19(result_553649060);
  framePtr = F.prev;

  return result_553649060;

}

function hash__lisp_u1297(x_p0) {
  var result_553649428 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 712;
    F.filename = "hashes.nim";
    result_553649428 = 0;
    if (true) {
    F.line = 714;
    result_553649428 = HEX21HEX26__pureZhashes_u4(result_553649428, hash__lisp_u313(x_p0["Field0"]));
    }
    
    if (true) {
    F.line = 714;
    result_553649428 = HEX21HEX26__pureZhashes_u4(result_553649428, hash__lisp_u313(x_p0["Field1"]));
    }
    
    F.line = 715;
    result_553649428 = HEX21HEX24__pureZhashes_u19(result_553649428);
  framePtr = F.prev;

  return result_553649428;

}

function hash__lisp_u989(s_p0) {
  var result_553649121 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 2958;
      F.filename = "tables.nim";
      var p_553649424 = {Field0: null, Field1: null};
      F.line = 705;
      var L_553665278 = len__lisp_u1038(s_p0);
      Label2: {
        F.line = 706;
        var h_553665280 = 0;
        F.line = 81;
        F.filename = "iterators_1.nim";
        var colontmp__553665281 = 0;
        F.line = 706;
        F.filename = "tables.nim";
        colontmp__553665281 = (s_p0.data).length - 1;
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553665282 = 0;
        Label3: {
          F.line = 97;
            Label4: while (true) {
            if (!(res_553665282 <= colontmp__553665281)) break Label4;
              F.line = 706;
              F.filename = "tables.nim";
              h_553665280 = res_553665282;
              if (isFilled__pureZcollectionsZtables_u31(s_p0.data[chckIndx(h_553665280, 0, (s_p0.data).length - 1)].Field0)) {
              F.line = 2958;
              p_553649424 = nimCopy(p_553649424, {Field0: s_p0.data[chckIndx(h_553665280, 0, (s_p0.data).length - 1)].Field1, Field1: s_p0.data[chckIndx(h_553665280, 0, (s_p0.data).length - 1)].Field2}, NTI553648863);
              F.line = 2959;
              result_553649121 = (result_553649121 ^ hash__lisp_u1297(p_553649424));
              if (!((len__lisp_u1038(s_p0) == L_553665278))) {
              F.line = 709;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553665282 = addInt(res_553665282, 1);
            }
        };
      };
    };
    F.line = 2960;
    F.filename = "tables.nim";
    result_553649121 = HEX21HEX24__pureZhashes_u19(result_553649121);
  framePtr = F.prev;

  return result_553649121;

}

function hash__lisp_u1330(x_p0) {
  var result_553649461 = 0;

  var F = {procname: "hash.hash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 734;
    F.filename = "hashes.nim";
    result_553649461 = 0;
    Label1: {
      F.line = 735;
      var a_553649465 = [];
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553665285 = 0;
      Label2: {
        F.line = 19;
          Label3: while (true) {
          if (!(i_553665285 < (x_p0).length)) break Label3;
            F.line = 735;
            F.filename = "hashes.nim";
            a_553649465 = x_p0[chckIndx(i_553665285, 0, (x_p0).length - 1)];
            F.line = 736;
            result_553649461 = HEX21HEX26__pureZhashes_u4(result_553649461, hash__pureZhashes_u743(a_553649465));
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665285 += 1;
          }
      };
    };
    F.line = 737;
    F.filename = "hashes.nim";
    result_553649461 = HEX21HEX24__pureZhashes_u19(result_553649461);
  framePtr = F.prev;

  return result_553649461;

}

function hash__lisp_u313(n_p0) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;
        var Temporary7;
      var Temporary8;
      var Temporary9;
      var Temporary10;
      var Temporary11;
      var Temporary12;
      var Temporary13;
      var Temporary14;
        var Temporary15;
        var Temporary16;
        var Temporary17;
      var Temporary18;
      var Temporary19;
      var Temporary20;
        var Temporary21;
      var Temporary22;
      var Temporary23;
        var Temporary24;
      var Temporary25;
      var Temporary26;
      var Temporary27;
        var Temporary28;
      var Temporary29;
        var Temporary30;
      var Temporary31;
        var Temporary32;
      var Temporary33;
      var Temporary34;
        var Temporary35;
      var Temporary36;
      var Temporary37;
        var Temporary38;
      var Temporary39;
      var Temporary40;
      var Temporary41;
        var Temporary42;
      var Temporary43;
        var Temporary44;
      var Temporary45;
        var Temporary46;
      var Temporary47;

  var result_553648443 = 0;

  var F = {procname: "lisp.hash", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!((n_p0 == null)))) {
    F.line = 304;
    F.filename = "lisp.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(304, 3) `not isNil(n)` Attempting to hash a nil node"));
    }
    
    if (!(!((n_p0.kind == 0)))) {
    F.line = 282;
    var inst_553648457 = {Field0: [108,105,115,112,46,110,105,109], Field1: 305, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553648457.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32,67,97,110,110,111,116,32,104,97,115,104,32,97,32,115,121,109,98,111,108]));
    }
    
    if (true) {
    }
    
    if (true) {
    F.line = 316;
    result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u335(n_p0.tags));
    }
    
    if (true) {
    }
    
    if (true) {
    F.line = 316;
    result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u408(n_p0.kind));
    }
    
    F.line = 306;
    switch (n_p0.kind) {
    case 19:
      if (true) {
      F.line = 316;
      var Temporary1 = n_p0;
      if (ConstSet84[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'member\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__pureZhashes_u743(Temporary1.member));
      }
      
      break;
    case 17:
      if (true) {
      F.line = 316;
      var Temporary2 = n_p0;
      if (ConstSet85[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'className\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__pureZhashes_u743(Temporary2.className));
      }
      
      if (true) {
        var Temporary3 = n_p0;
        if (ConstSet86[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
      if (!((Temporary3.classParent == null))) {
      F.line = 314;
      var Temporary4 = n_p0;
      if (ConstSet87[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary4.classParent));
      }
      
      }
      
      if (true) {
      F.line = 316;
      var Temporary5 = n_p0;
      if (ConstSet88[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u449(Temporary5.classFields));
      }
      
      if (true) {
      F.line = 316;
      var Temporary6 = n_p0;
      if (ConstSet89[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u449(Temporary6.classMethods));
      }
      
      break;
    case 18:
      if (true) {
        var Temporary7 = n_p0;
        if (ConstSet90[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
      if (!((Temporary7.classObjType == null))) {
      F.line = 314;
      var Temporary8 = n_p0;
      if (ConstSet91[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary8.classObjType));
      }
      
      }
      
      if (true) {
      F.line = 316;
      var Temporary9 = n_p0;
      if (ConstSet92[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u449(Temporary9.classObjFields));
      }
      
      if (true) {
      F.line = 316;
      var Temporary10 = n_p0;
      if (ConstSet93[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u449(Temporary10.classObjMethods));
      }
      
      break;
    case 14:
    case 15:
    case 16:
      break;
    case 10:
      if (true) {
      F.line = 316;
      var Temporary11 = n_p0;
      if (ConstSet94[Temporary11.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'dot\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary11.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__pureZhashes_u743(Temporary11.dot));
      }
      
      break;
    case 3:
      if (true) {
      F.line = 316;
      var Temporary12 = n_p0;
      if (ConstSet95[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u880(Temporary12.keyword));
      }
      
      break;
    case 9:
      if (true) {
      F.line = 316;
      var Temporary13 = n_p0;
      if (ConstSet96[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u893(Temporary13.atomicKind));
      }
      
      F.line = 306;
      var Temporary14 = n_p0;
      if (ConstSet97[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648176)); }
      switch (Temporary14.atomicKind) {
      case 0:
        if (true) {
        F.line = 316;
        var Temporary15 = n_p0;
        if (ConstSet98[Temporary15.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary15.atomicKind, NTI553648175)); }
        result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__pureZhashes_u219(Temporary15.num));
        }
        
        break;
      case 1:
        if (true) {
        F.line = 316;
        var Temporary16 = n_p0;
        if (ConstSet99[Temporary16.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary16.atomicKind, NTI553648175)); }
        result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__pureZhashes_u743(Temporary16.str));
        }
        
        break;
      case 2:
        if (true) {
        F.line = 316;
        var Temporary17 = n_p0;
        if (ConstSet100[Temporary17.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary17.atomicKind, NTI553648175)); }
        result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u910(Temporary17.boolean));
        }
        
        break;
      }
      break;
    case 0:
      if (true) {
      F.line = 316;
      var Temporary18 = n_p0;
      if (ConstSet101[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__pureZhashes_u743(Temporary18.sym));
      }
      
      break;
    case 5:
      if (true) {
      F.line = 316;
      var Temporary19 = n_p0;
      if (ConstSet102[Temporary19.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary19.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u893(Temporary19.atomicType));
      }
      
      break;
    case 1:
      if (true) {
      F.line = 316;
      var Temporary20 = n_p0;
      if (ConstSet103[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u929(Temporary20.kids));
      }
      
      if (true) {
        var Temporary21 = n_p0;
        if (ConstSet104[Temporary21.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'listType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary21.kind, NTI553648176)); }
      if (!((Temporary21.listType == null))) {
      F.line = 314;
      var Temporary22 = n_p0;
      if (ConstSet105[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'listType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary22.listType));
      }
      
      }
      
      break;
    case 4:
      if (true) {
      F.line = 316;
      var Temporary23 = n_p0;
      if (ConstSet106[Temporary23.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary23.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u989(Temporary23.tableVal));
      }
      
      if (true) {
        var Temporary24 = n_p0;
        if (ConstSet107[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI553648176)); }
      if (!((Temporary24.tableType == null))) {
      F.line = 314;
      var Temporary25 = n_p0;
      if (ConstSet108[Temporary25.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary25.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary25.tableType));
      }
      
      }
      
      break;
    case 2:
      if (true) {
      F.line = 316;
      var Temporary26 = n_p0;
      if (ConstSet109[Temporary26.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary26.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u1330(Temporary26.funcParams));
      }
      
      if (true) {
      F.line = 316;
      var Temporary27 = n_p0;
      if (ConstSet110[Temporary27.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcTypes\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary27.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u929(Temporary27.funcTypes));
      }
      
      if (true) {
        var Temporary28 = n_p0;
        if (ConstSet111[Temporary28.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary28.kind, NTI553648176)); }
      if (!((Temporary28.funcBody == null))) {
      F.line = 314;
      var Temporary29 = n_p0;
      if (ConstSet112[Temporary29.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary29.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary29.funcBody));
      }
      
      }
      
      if (true) {
        var Temporary30 = n_p0;
        if (ConstSet113[Temporary30.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcReturnType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary30.kind, NTI553648176)); }
      if (!((Temporary30.funcReturnType == null))) {
      F.line = 314;
      var Temporary31 = n_p0;
      if (ConstSet114[Temporary31.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcReturnType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary31.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary31.funcReturnType));
      }
      
      }
      
      if (true) {
        var Temporary32 = n_p0;
        if (ConstSet115[Temporary32.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary32.kind, NTI553648176)); }
      if (!((Temporary32.funcObj == null))) {
      F.line = 314;
      var Temporary33 = n_p0;
      if (ConstSet116[Temporary33.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary33.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary33.funcObj));
      }
      
      }
      
      break;
    case 11:
      if (true) {
      F.line = 316;
      var Temporary34 = n_p0;
      if (ConstSet117[Temporary34.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary34.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u1330(Temporary34.templateParams));
      }
      
      if (true) {
        var Temporary35 = n_p0;
        if (ConstSet118[Temporary35.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary35.kind, NTI553648176)); }
      if (!((Temporary35.templateBody == null))) {
      F.line = 314;
      var Temporary36 = n_p0;
      if (ConstSet119[Temporary36.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary36.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary36.templateBody));
      }
      
      }
      
      break;
    case 6:
      if (true) {
      F.line = 316;
      var Temporary37 = n_p0;
      if (ConstSet120[Temporary37.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary37.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u449(Temporary37.objectTypeFields));
      }
      
      break;
    case 8:
      if (true) {
        var Temporary38 = n_p0;
        if (ConstSet121[Temporary38.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary38.kind, NTI553648176)); }
      if (!((Temporary38.objectType == null))) {
      F.line = 314;
      var Temporary39 = n_p0;
      if (ConstSet122[Temporary39.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary39.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary39.objectType));
      }
      
      }
      
      if (true) {
      F.line = 316;
      var Temporary40 = n_p0;
      if (ConstSet123[Temporary40.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary40.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u449(Temporary40.objectFields));
      }
      
      break;
    case 7:
      if (true) {
      F.line = 316;
      var Temporary41 = n_p0;
      if (ConstSet124[Temporary41.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary41.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u929(Temporary41.enumTypeValues));
      }
      
      break;
    case 12:
      if (true) {
        var Temporary42 = n_p0;
        if (ConstSet125[Temporary42.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary42.kind, NTI553648176)); }
      if (!((Temporary42.tableKeyType == null))) {
      F.line = 314;
      var Temporary43 = n_p0;
      if (ConstSet126[Temporary43.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary43.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary43.tableKeyType));
      }
      
      }
      
      if (true) {
        var Temporary44 = n_p0;
        if (ConstSet127[Temporary44.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary44.kind, NTI553648176)); }
      if (!((Temporary44.tableValueType == null))) {
      F.line = 314;
      var Temporary45 = n_p0;
      if (ConstSet128[Temporary45.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary45.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary45.tableValueType));
      }
      
      }
      
      break;
    case 13:
      if (true) {
        var Temporary46 = n_p0;
        if (ConstSet129[Temporary46.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary46.kind, NTI553648176)); }
      if (!((Temporary46.arrayValueType == null))) {
      F.line = 314;
      var Temporary47 = n_p0;
      if (ConstSet130[Temporary47.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary47.kind, NTI553648176)); }
      result_553648443 = HEX21HEX26__pureZhashes_u4(result_553648443, hash__lisp_u313(Temporary47.arrayValueType));
      }
      
      }
      
      break;
    }
    F.line = 317;
    result_553648443 = HEX21HEX24__pureZhashes_u19(result_553648443);
  framePtr = F.prev;

  return result_553648443;

}

function rawGet__lisp_u1655(t_p0, key_p1, hc_p2, hc_p2_Idx) {
  var result_553649789 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 59;
    F.filename = "hashcommon.nim";
    hc_p2[hc_p2_Idx] = hash__lisp_u313(key_p1);
    if ((hc_p2[hc_p2_Idx] == 0)) {
    F.line = 64;
    hc_p2[hc_p2_Idx] = 314159265;
    }
    
    if (((t_p0.data).length == 0)) {
    F.line = 43;
    result_553649789 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_553649840 = (hc_p2[hc_p2_Idx] & (t_p0.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled__pureZcollectionsZtables_u31(t_p0.data[chckIndx(h_553649840, 0, (t_p0.data).length - 1)].Field0)) break Label2;
          if (((t_p0.data[chckIndx(h_553649840, 0, (t_p0.data).length - 1)].Field0 == hc_p2[hc_p2_Idx]) && HEX3DHEX3D__lisp_u1499(t_p0.data[chckIndx(h_553649840, 0, (t_p0.data).length - 1)].Field1, key_p1))) {
          F.line = 51;
          result_553649789 = h_553649840;
          break BeforeRet;
          }
          
          F.line = 52;
          h_553649840 = nextTry__pureZcollectionsZtables_u34(h_553649840, (t_p0.data).length - 1);
        }
    };
    F.line = 53;
    result_553649789 = subInt((-1), h_553649840);
  };
  framePtr = F.prev;

  return result_553649789;

}

function hasKey__lisp_u1648(t_p0, key_p1) {
  var result_553649781 = false;

  var F = {procname: "hasKey.hasKey", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 370;
    F.filename = "tables.nim";
    var hc_553649782 = [0];
    F.line = 371;
    result_553649781 = (0 <= rawGet__lisp_u1655(t_p0, key_p1, hc_553649782, 0));
  framePtr = F.prev;

  return result_553649781;

}

function getOrDefault__lisp_u1925(t_p0, key_p1) {
  var result_553650058 = null;

  var F = {procname: "getOrDefault.getOrDefault", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 419;
    F.filename = "tables.nim";
    result_553650058 = null;
    F.line = 200;
    F.filename = "tableimpl.nim";
    var hcHEX60gensym104_553650066 = [0];
    F.line = 201;
    var indexHEX60gensym104_553650073 = rawGet__lisp_u1655(t_p0, key_p1, hcHEX60gensym104_553650066, 0);
    if ((0 <= indexHEX60gensym104_553650073)) {
    F.line = 202;
    result_553650058 = t_p0.data[chckIndx(indexHEX60gensym104_553650073, 0, (t_p0.data).length - 1)].Field2;
    }
    
  framePtr = F.prev;

  return result_553650058;

}

function HEX3DHEX3D__lisp_u1598(s_p0, t_p1) {
  var result_553649731 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((s_p0.counter == t_p1.counter)) {
    Label1: {
      F.line = 226;
      F.filename = "tableimpl.nim";
      var keyHEX60gensym100_553649738 = null;
      F.line = 226;
      var valHEX60gensym100_553649739 = null;
      F.line = 705;
      F.filename = "tables.nim";
      var L_553665256 = len__lisp_u1038(s_p0);
      Label2: {
        F.line = 706;
        var h_553665258 = 0;
        F.line = 81;
        F.filename = "iterators_1.nim";
        var colontmp__553665259 = 0;
        F.line = 706;
        F.filename = "tables.nim";
        colontmp__553665259 = (s_p0.data).length - 1;
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553665260 = 0;
        Label3: {
          F.line = 97;
            Label4: while (true) {
            if (!(res_553665260 <= colontmp__553665259)) break Label4;
              F.line = 706;
              F.filename = "tables.nim";
              h_553665258 = res_553665260;
              if (isFilled__pureZcollectionsZtables_u31(s_p0.data[chckIndx(h_553665258, 0, (s_p0.data).length - 1)].Field0)) {
              F.line = 226;
              F.filename = "tableimpl.nim";
              keyHEX60gensym100_553649738 = s_p0.data[chckIndx(h_553665258, 0, (s_p0.data).length - 1)].Field1;
              F.line = 226;
              valHEX60gensym100_553649739 = s_p0.data[chckIndx(h_553665258, 0, (s_p0.data).length - 1)].Field2;
              if (!(hasKey__lisp_u1648(t_p1, keyHEX60gensym100_553649738))) {
              F.line = 227;
              result_553649731 = false;
              break BeforeRet;
              }
              
              if (!(HEX3DHEX3D__lisp_u1499(getOrDefault__lisp_u1925(t_p1, keyHEX60gensym100_553649738), valHEX60gensym100_553649739))) {
              F.line = 228;
              result_553649731 = false;
              break BeforeRet;
              }
              
              if (!((len__lisp_u1038(s_p0) == L_553665256))) {
              F.line = 709;
              F.filename = "tables.nim";
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553665260 = addInt(res_553665260, 1);
            }
        };
      };
    };
    F.line = 229;
    F.filename = "tableimpl.nim";
    result_553649731 = true;
    break BeforeRet;
    }
    else {
      F.line = 231;
      result_553649731 = false;
      break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_553649731;

}

function HEX3DHEX3D__lisp_u2039(s_p0, t_p1) {
  var result_553650172 = false;

  var F = {procname: "==.==", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((s_p0.counter == t_p1.counter)) {
    Label1: {
      F.line = 226;
      F.filename = "tableimpl.nim";
      var keyHEX60gensym106_553650179 = [];
      F.line = 226;
      var valHEX60gensym106_553650180 = null;
      F.line = 705;
      F.filename = "tables.nim";
      var L_553665288 = len__lisp_u498(s_p0);
      Label2: {
        F.line = 706;
        var h_553665290 = 0;
        F.line = 81;
        F.filename = "iterators_1.nim";
        var colontmp__553665291 = 0;
        F.line = 706;
        F.filename = "tables.nim";
        colontmp__553665291 = (s_p0.data).length - 1;
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553665292 = 0;
        Label3: {
          F.line = 97;
            Label4: while (true) {
            if (!(res_553665292 <= colontmp__553665291)) break Label4;
              F.line = 706;
              F.filename = "tables.nim";
              h_553665290 = res_553665292;
              if (isFilled__pureZcollectionsZtables_u31(s_p0.data[chckIndx(h_553665290, 0, (s_p0.data).length - 1)].Field0)) {
              F.line = 226;
              F.filename = "tableimpl.nim";
              keyHEX60gensym106_553650179 = s_p0.data[chckIndx(h_553665290, 0, (s_p0.data).length - 1)].Field1;
              F.line = 226;
              valHEX60gensym106_553650180 = s_p0.data[chckIndx(h_553665290, 0, (s_p0.data).length - 1)].Field2;
              if (!(hasKey__lisp_u2089(t_p1, keyHEX60gensym106_553650179))) {
              F.line = 227;
              result_553650172 = false;
              break BeforeRet;
              }
              
              if (!(HEX3DHEX3D__lisp_u1499(getOrDefault__lisp_u2366(t_p1, keyHEX60gensym106_553650179), valHEX60gensym106_553650180))) {
              F.line = 228;
              result_553650172 = false;
              break BeforeRet;
              }
              
              if (!((len__lisp_u498(s_p0) == L_553665288))) {
              F.line = 709;
              F.filename = "tables.nim";
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553665292 = addInt(res_553665292, 1);
            }
        };
      };
    };
    F.line = 229;
    F.filename = "tableimpl.nim";
    result_553650172 = true;
    break BeforeRet;
    }
    else {
      F.line = 231;
      result_553650172 = false;
      break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_553650172;

}

function HEX3DHEX3D__lisp_u1499(a_p0, b_p1) {
        var Temporary1;
        var Temporary2;
        var Temporary3;
        var Temporary4;
        var Temporary5;
        var Temporary6;
        var Temporary7;
        var Temporary8;
        var Temporary9;
        var Temporary10;
        var Temporary11;
          var Temporary12;
          var Temporary13;
          var Temporary14;
          var Temporary15;
          var Temporary16;
          var Temporary17;
        var Temporary18;
        var Temporary19;
        var Temporary20;
        var Temporary21;
        var Temporary22;
        var Temporary23;
        var Temporary24;
        var Temporary25;
        var Temporary26;
          var Temporary27;
          var Temporary28;
        var Temporary29;
        var Temporary30;

  var result_553649630 = false;

  var F = {procname: "lisp.==", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (((a_p0 == null) && (b_p1 == null))) {
    F.line = 331;
    F.filename = "lisp.nim";
    result_553649630 = true;
    }
    else {
    if ((a_p0 == null)) {
    F.line = 334;
    result_553649630 = (b_p1 == null);
    }
    else {
    if ((b_p1 == null)) {
    F.line = 337;
    result_553649630 = (a_p0 == null);
    }
    else {
    if (!((a_p0.kind == b_p1.kind))) {
    F.line = 340;
    result_553649630 = false;
    }
    else {
      F.line = 343;
      switch (a_p0.kind) {
      case 0:
      case 10:
      case 19:
        if (true) {
        F.line = 282;
        var inst_553649657 = {Field0: [108,105,115,112,46,110,105,109], Field1: 346, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553649657.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_p0.line),[41,58,32,78,111,100,101,32,109,117,115,116,32,98,101,32,101,118,97,108,117,97,116,101,100,32,98,101,102,111,114,101,32,99,111,109,112,97,114,105,115,111,110,58,32],reprAny(a_p0, null, NTI553648177)));
        }
        
        break;
      case 3:
        F.line = 350;
        var Temporary1 = a_p0;
        if (ConstSet80[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
        var Temporary2 = b_p1;
        if (ConstSet81[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
        result_553649630 = (Temporary1.keyword == Temporary2.keyword);
        break;
      case 1:
        F.line = 353;
        var Temporary3 = a_p0;
        if (ConstSet82[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
        var Temporary4 = b_p1;
        if (ConstSet83[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
        result_553649630 = HEX3DHEX3D__lisp_u1535(Temporary3.kids, Temporary4.kids);
        break;
      case 2:
        F.line = 356;
        result_553649630 = HEX3DHEX3D__lisp_u1499(a_p0, b_p1);
        break;
      case 4:
        F.line = 359;
        var Temporary5 = a_p0;
        if (ConstSet131[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
        var Temporary6 = b_p1;
        if (ConstSet132[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
        result_553649630 = HEX3DHEX3D__lisp_u1598(Temporary5.tableVal, Temporary6.tableVal);
        break;
      case 5:
        F.line = 362;
        var Temporary7 = a_p0;
        if (ConstSet133[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
        var Temporary8 = b_p1;
        if (ConstSet134[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
        result_553649630 = (Temporary7.atomicType == Temporary8.atomicType);
        break;
      case 9:
        F.line = 365;
        var Temporary9 = a_p0;
        if (ConstSet135[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
        var Temporary10 = b_p1;
        if (ConstSet136[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
        result_553649630 = (Temporary9.atomicKind == Temporary10.atomicKind);
        F.line = 366;
        var Temporary11 = a_p0;
        if (ConstSet137[Temporary11.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary11.kind, NTI553648176)); }
        switch (Temporary11.atomicKind) {
        case 0:
          F.line = 367;
          var Temporary12 = a_p0;
          if (ConstSet138[Temporary12.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary12.atomicKind, NTI553648175)); }
          var Temporary13 = b_p1;
          if (ConstSet139[Temporary13.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary13.atomicKind, NTI553648175)); }
          result_553649630 = (Temporary12.num == Temporary13.num);
          break;
        case 1:
          F.line = 368;
          var Temporary14 = a_p0;
          if (ConstSet140[Temporary14.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary14.atomicKind, NTI553648175)); }
          var Temporary15 = b_p1;
          if (ConstSet141[Temporary15.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary15.atomicKind, NTI553648175)); }
          result_553649630 = eqStrings(Temporary14.str, Temporary15.str);
          break;
        case 2:
          F.line = 369;
          var Temporary16 = a_p0;
          if (ConstSet142[Temporary16.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary16.atomicKind, NTI553648175)); }
          var Temporary17 = b_p1;
          if (ConstSet143[Temporary17.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary17.atomicKind, NTI553648175)); }
          result_553649630 = (Temporary16.boolean == Temporary17.boolean);
          break;
        }
        break;
      case 6:
        F.line = 372;
        var Temporary18 = a_p0;
        if (ConstSet144[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI553648176)); }
        var Temporary19 = b_p1;
        if (ConstSet145[Temporary19.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary19.kind, NTI553648176)); }
        result_553649630 = HEX3DHEX3D__lisp_u2039(Temporary18.objectTypeFields, Temporary19.objectTypeFields);
        break;
      case 8:
        F.line = 375;
        var Temporary20 = a_p0;
        if (ConstSet146[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI553648176)); }
        var Temporary21 = b_p1;
        if (ConstSet147[Temporary21.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary21.kind, NTI553648176)); }
        result_553649630 = HEX3DHEX3D__lisp_u2039(Temporary20.objectFields, Temporary21.objectFields);
        break;
      case 7:
        F.line = 378;
        var Temporary22 = a_p0;
        if (ConstSet148[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI553648176)); }
        var Temporary23 = b_p1;
        if (ConstSet149[Temporary23.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary23.kind, NTI553648176)); }
        result_553649630 = HEX3DHEX3D__lisp_u1535(Temporary22.enumTypeValues, Temporary23.enumTypeValues);
        break;
      case 12:
        F.line = 381;
        var Temporary25 = a_p0;
        if (ConstSet150[Temporary25.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary25.kind, NTI553648176)); }
        var Temporary26 = b_p1;
        if (ConstSet151[Temporary26.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary26.kind, NTI553648176)); }
        if (!HEX3DHEX3D__lisp_u1499(Temporary25.tableKeyType, Temporary26.tableKeyType)) Temporary24 = false; else {          var Temporary27 = a_p0;
          if (ConstSet152[Temporary27.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary27.kind, NTI553648176)); }
          var Temporary28 = b_p1;
          if (ConstSet153[Temporary28.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary28.kind, NTI553648176)); }
          Temporary24 = HEX3DHEX3D__lisp_u1499(Temporary27.tableValueType, Temporary28.tableValueType);        }        result_553649630 = Temporary24;
        break;
      case 13:
        F.line = 384;
        var Temporary29 = a_p0;
        if (ConstSet154[Temporary29.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary29.kind, NTI553648176)); }
        var Temporary30 = b_p1;
        if (ConstSet155[Temporary30.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary30.kind, NTI553648176)); }
        result_553649630 = HEX3DHEX3D__lisp_u1499(Temporary29.arrayValueType, Temporary30.arrayValueType);
        break;
      case 14:
      case 15:
      case 16:
        F.line = 387;
        result_553649630 = true;
        break;
      case 17:
      case 18:
      case 11:
        F.line = 390;
        result_553649630 = (a_p0 == b_p1);
        break;
      }
    }
    }}}
  framePtr = F.prev;

  return result_553649630;

}

function process__lisp_u6185(n_p0, result_p1, result_p1_Idx) {
      var Temporary4;
      var Temporary5;
        var Temporary6;
      var Temporary7;
        var Temporary9;
        var Temporary14;
      var Temporary18;
        var Temporary20;
      var Temporary24;
      var Temporary25;
      var Temporary26;
      var Temporary27;
      var Temporary28;
      var Temporary29;
      var Temporary30;
        var Temporary32;
      var Temporary35;
        var Temporary36;
        var Temporary37;
        var Temporary38;
        var Temporary40;
        var Temporary45;
        var Temporary50;
        var Temporary55;

  var F = {procname: "$.process", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!((n_p0 == null)))) {
    F.line = 661;
    F.filename = "lisp.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(661, 5) `not isNil(n)` "));
    }
    
    Label1: {
      F.line = 663;
      var t_553654327 = 0;
      F.line = 62;
      F.filename = "iterators.nim";
      var i_553665160 = 0;
      Label2: {
        F.line = 63;
          Label3: while (true) {
          if (!(i_553665160 <= 1)) break Label3;
            if ((n_p0.tags[chckRange(i_553665160, 0, 1)] != undefined)) {
            F.line = 663;
            F.filename = "lisp.nim";
            t_553654327 = chckRange(i_553665160, 0, 1);
            F.line = 664;
            result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], ([64]).concat(reprEnum(t_553654327, NTI553648169),[32]));;
            }
            
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665160 += 1;
          }
      };
    };
    F.line = 666;
    F.filename = "lisp.nim";
    switch (n_p0.kind) {
    case 19:
      F.line = 669;
      var Temporary4 = n_p0;
      if (ConstSet156[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'member\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], Temporary4.member);;
      break;
    case 17:
      F.line = 672;
      var Temporary5 = n_p0;
      if (ConstSet157[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'className\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], ([99,108,97,115,115,32]).concat(Temporary5.className));;
        var Temporary6 = n_p0;
        if (ConstSet158[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
      if (!(HEX3DHEX3D__lisp_u1499(Temporary6.classParent, null))) {
      F.line = 674;
      var Temporary7 = n_p0;
      if (ConstSet159[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], ([32,58,32]).concat(HEX24__lisp_u6182(Temporary7.classParent)));;
      }
      
      F.line = 675;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [32,123]);;
      Label8: {
        F.line = 676;
        var k_553654335 = [];
        F.line = 676;
        var v_553654336 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665163 = ({data: [], counter: 0});
        F.line = 676;
        F.filename = "lisp.nim";
        var Temporary9 = n_p0;
        if (ConstSet160[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
        colontmp__553665163 = nimCopy(colontmp__553665163, Temporary9.classFields, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665168 = len__lisp_u498(colontmp__553665163);
        Label10: {
          F.line = 706;
          var h_553665170 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665171 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665171 = (colontmp__553665163.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665172 = 0;
          Label11: {
            F.line = 97;
              Label12: while (true) {
              if (!(res_553665172 <= colontmp__553665171)) break Label12;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665170 = res_553665172;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665163.data[chckIndx(h_553665170, 0, (colontmp__553665163.data).length - 1)].Field0)) {
                F.line = 676;
                F.filename = "lisp.nim";
                k_553654335 = colontmp__553665163.data[chckIndx(h_553665170, 0, (colontmp__553665163.data).length - 1)].Field1;
                F.line = 676;
                v_553654336 = colontmp__553665163.data[chckIndx(h_553665170, 0, (colontmp__553665163.data).length - 1)].Field2;
                F.line = 677;
                result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], (k_553654335).concat([58,32],HEX24__lisp_u6182(v_553654336),[44,32]));;
                if (!((len__lisp_u498(colontmp__553665163) == L_553665168))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665172 = addInt(res_553665172, 1);
              }
          };
        };
      };
      Label13: {
        F.line = 678;
        F.filename = "lisp.nim";
        var k_553654341 = [];
        F.line = 678;
        var v_553654342 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665175 = ({data: [], counter: 0});
        F.line = 678;
        F.filename = "lisp.nim";
        var Temporary14 = n_p0;
        if (ConstSet161[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648176)); }
        colontmp__553665175 = nimCopy(colontmp__553665175, Temporary14.classMethods, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665176 = len__lisp_u498(colontmp__553665175);
        Label15: {
          F.line = 706;
          var h_553665178 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665179 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665179 = (colontmp__553665175.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665180 = 0;
          Label16: {
            F.line = 97;
              Label17: while (true) {
              if (!(res_553665180 <= colontmp__553665179)) break Label17;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665178 = res_553665180;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665175.data[chckIndx(h_553665178, 0, (colontmp__553665175.data).length - 1)].Field0)) {
                F.line = 678;
                F.filename = "lisp.nim";
                k_553654341 = colontmp__553665175.data[chckIndx(h_553665178, 0, (colontmp__553665175.data).length - 1)].Field1;
                F.line = 678;
                v_553654342 = colontmp__553665175.data[chckIndx(h_553665178, 0, (colontmp__553665175.data).length - 1)].Field2;
                F.line = 679;
                result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], (k_553654341).concat([58,32],HEX24__lisp_u6182(v_553654342),[44,32]));;
                if (!((len__lisp_u498(colontmp__553665175) == L_553665176))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665180 = addInt(res_553665180, 1);
              }
          };
        };
      };
      F.line = 680;
      F.filename = "lisp.nim";
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [125]);;
      break;
    case 18:
      F.line = 683;
      var Temporary18 = n_p0;
      if (ConstSet162[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI553648176)); }
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], ([99,108,97,115,115,32]).concat(HEX24__lisp_u6182(Temporary18.classObjType),[32,123]));;
      Label19: {
        F.line = 684;
        var k_553654347 = [];
        F.line = 684;
        var v_553654348 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665183 = ({data: [], counter: 0});
        F.line = 684;
        F.filename = "lisp.nim";
        var Temporary20 = n_p0;
        if (ConstSet163[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI553648176)); }
        colontmp__553665183 = nimCopy(colontmp__553665183, Temporary20.classObjFields, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665184 = len__lisp_u498(colontmp__553665183);
        Label21: {
          F.line = 706;
          var h_553665186 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665187 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665187 = (colontmp__553665183.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665188 = 0;
          Label22: {
            F.line = 97;
              Label23: while (true) {
              if (!(res_553665188 <= colontmp__553665187)) break Label23;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665186 = res_553665188;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665183.data[chckIndx(h_553665186, 0, (colontmp__553665183.data).length - 1)].Field0)) {
                F.line = 684;
                F.filename = "lisp.nim";
                k_553654347 = colontmp__553665183.data[chckIndx(h_553665186, 0, (colontmp__553665183.data).length - 1)].Field1;
                F.line = 684;
                v_553654348 = colontmp__553665183.data[chckIndx(h_553665186, 0, (colontmp__553665183.data).length - 1)].Field2;
                F.line = 685;
                result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], (k_553654347).concat([58,32],HEX24__lisp_u6182(v_553654348),[44,32]));;
                if (!((len__lisp_u498(colontmp__553665183) == L_553665184))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665188 = addInt(res_553665188, 1);
              }
          };
        };
      };
      F.line = 686;
      F.filename = "lisp.nim";
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [125]);;
      break;
    case 15:
      F.line = 689;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [118,111,105,100,45,116,121,112,101]);;
      break;
    case 16:
      F.line = 692;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [123,118,111,105,100,125]);;
      break;
    case 5:
      F.line = 695;
      var Temporary24 = n_p0;
      if (ConstSet164[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI553648176)); }
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], reprEnum(Temporary24.atomicType, NTI553648175));;
      break;
    case 0:
      F.line = 701;
      var Temporary25 = n_p0;
      if (ConstSet165[Temporary25.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary25.kind, NTI553648176)); }
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], Temporary25.sym);;
      break;
    case 3:
      F.line = 704;
      var Temporary26 = n_p0;
      if (ConstSet166[Temporary26.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary26.kind, NTI553648176)); }
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], reprEnum(Temporary26.keyword, NTI553648168));;
      break;
    case 10:
      F.line = 707;
      var Temporary27 = n_p0;
      if (ConstSet167[Temporary27.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'dot\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary27.kind, NTI553648176)); }
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], Temporary27.dot);;
      break;
    case 14:
      F.line = 710;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [97,110,121,45,116,121,112,101]);;
      break;
    case 12:
      F.line = 713;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [116,97,98,108,101,32,123]);;
      F.line = 714;
      var Temporary28 = n_p0;
      if (ConstSet168[Temporary28.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary28.kind, NTI553648176)); }
      process__lisp_u6185(Temporary28.tableKeyType, result_p1, result_p1_Idx);
      F.line = 715;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [44,32]);;
      F.line = 716;
      var Temporary29 = n_p0;
      if (ConstSet169[Temporary29.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary29.kind, NTI553648176)); }
      process__lisp_u6185(Temporary29.tableValueType, result_p1, result_p1_Idx);
      F.line = 717;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [125]);;
      break;
    case 13:
      F.line = 720;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [97,114,114,97,121,32,123]);;
      F.line = 721;
      var Temporary30 = n_p0;
      if (ConstSet170[Temporary30.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary30.kind, NTI553648176)); }
      process__lisp_u6185(Temporary30.arrayValueType, result_p1, result_p1_Idx);
      F.line = 722;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [125]);;
      break;
    case 7:
      F.line = 725;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [60,101,110,117,109,62,32,123]);;
      Label31: {
        F.line = 726;
        var v_553654364 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665191 = [];
        F.line = 726;
        F.filename = "lisp.nim";
        var Temporary32 = n_p0;
        if (ConstSet171[Temporary32.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary32.kind, NTI553648176)); }
        colontmp__553665191 = Temporary32.enumTypeValues;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665192 = 0;
        F.line = 250;
        var L_553665193 = (colontmp__553665191).length;
        Label33: {
          F.line = 251;
            Label34: while (true) {
            if (!(i_553665192 < L_553665193)) break Label34;
              F.line = 726;
              F.filename = "lisp.nim";
              v_553654364 = colontmp__553665191[chckIndx(i_553665192, 0, (colontmp__553665191).length - 1)];
              F.line = 727;
              result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], (HEX24__lisp_u6182(v_553654364)).concat([44,32]));;
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665192 += 1;
              if (!(((colontmp__553665191).length == L_553665193))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 728;
      F.filename = "lisp.nim";
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [125]);;
      break;
    case 9:
      F.line = 737;
      var Temporary35 = n_p0;
      if (ConstSet172[Temporary35.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary35.kind, NTI553648176)); }
      switch (Temporary35.atomicKind) {
      case 0:
        F.line = 738;
        var Temporary36 = n_p0;
        if (ConstSet173[Temporary36.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary36.atomicKind, NTI553648175)); }
        result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], HEX24__system_u3165(Temporary36.num));;
        break;
      case 1:
        F.line = 739;
        var Temporary37 = n_p0;
        if (ConstSet174[Temporary37.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary37.atomicKind, NTI553648175)); }
        result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], Temporary37.str);;
        break;
      case 2:
        F.line = 740;
        var Temporary38 = n_p0;
        if (ConstSet175[Temporary38.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary38.atomicKind, NTI553648175)); }
        result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], nimBoolToStr(Temporary38.boolean));;
        break;
      }
      break;
    case 8:
      F.line = 743;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [60,111,98,106,101,99,116,62,32,123]);;
      Label39: {
        F.line = 744;
        var k_553654372 = [];
        F.line = 744;
        var v_553654373 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665196 = ({data: [], counter: 0});
        F.line = 744;
        F.filename = "lisp.nim";
        var Temporary40 = n_p0;
        if (ConstSet176[Temporary40.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary40.kind, NTI553648176)); }
        colontmp__553665196 = nimCopy(colontmp__553665196, Temporary40.objectFields, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665197 = len__lisp_u498(colontmp__553665196);
        Label41: {
          F.line = 706;
          var h_553665199 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665200 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665200 = (colontmp__553665196.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665201 = 0;
          Label42: {
            F.line = 97;
              Label43: while (true) {
              if (!(res_553665201 <= colontmp__553665200)) break Label43;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665199 = res_553665201;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665196.data[chckIndx(h_553665199, 0, (colontmp__553665196.data).length - 1)].Field0)) {
                F.line = 744;
                F.filename = "lisp.nim";
                k_553654372 = colontmp__553665196.data[chckIndx(h_553665199, 0, (colontmp__553665196.data).length - 1)].Field1;
                F.line = 744;
                v_553654373 = colontmp__553665196.data[chckIndx(h_553665199, 0, (colontmp__553665196.data).length - 1)].Field2;
                F.line = 745;
                result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], (k_553654372).concat([58,32],HEX24__lisp_u6182(v_553654373),[44,32]));;
                if (!((len__lisp_u498(colontmp__553665196) == L_553665197))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665201 = addInt(res_553665201, 1);
              }
          };
        };
      };
      F.line = 746;
      F.filename = "lisp.nim";
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [125]);;
      break;
    case 6:
      F.line = 749;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [60,116,121,112,101,62,32,123]);;
      Label44: {
        F.line = 750;
        var k_553654378 = [];
        F.line = 750;
        var v_553654379 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665204 = ({data: [], counter: 0});
        F.line = 750;
        F.filename = "lisp.nim";
        var Temporary45 = n_p0;
        if (ConstSet177[Temporary45.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary45.kind, NTI553648176)); }
        colontmp__553665204 = nimCopy(colontmp__553665204, Temporary45.objectTypeFields, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665205 = len__lisp_u498(colontmp__553665204);
        Label46: {
          F.line = 706;
          var h_553665207 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665208 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665208 = (colontmp__553665204.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665209 = 0;
          Label47: {
            F.line = 97;
              Label48: while (true) {
              if (!(res_553665209 <= colontmp__553665208)) break Label48;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665207 = res_553665209;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665204.data[chckIndx(h_553665207, 0, (colontmp__553665204.data).length - 1)].Field0)) {
                F.line = 750;
                F.filename = "lisp.nim";
                k_553654378 = colontmp__553665204.data[chckIndx(h_553665207, 0, (colontmp__553665204.data).length - 1)].Field1;
                F.line = 750;
                v_553654379 = colontmp__553665204.data[chckIndx(h_553665207, 0, (colontmp__553665204.data).length - 1)].Field2;
                F.line = 751;
                result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], (k_553654378).concat([58,32],HEX24__lisp_u6182(v_553654379),[44,32]));;
                if (!((len__lisp_u498(colontmp__553665204) == L_553665205))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665209 = addInt(res_553665209, 1);
              }
          };
        };
      };
      F.line = 752;
      F.filename = "lisp.nim";
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [125]);;
      break;
    case 4:
      F.line = 755;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [123]);;
      Label49: {
        F.line = 756;
        var k_553654384 = null;
        F.line = 756;
        var v_553654385 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665212 = ({data: [], counter: 0});
        F.line = 756;
        F.filename = "lisp.nim";
        var Temporary50 = n_p0;
        if (ConstSet178[Temporary50.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary50.kind, NTI553648176)); }
        colontmp__553665212 = nimCopy(colontmp__553665212, Temporary50.tableVal, NTI553648229);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665217 = len__lisp_u1038(colontmp__553665212);
        Label51: {
          F.line = 706;
          var h_553665219 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665220 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665220 = (colontmp__553665212.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665221 = 0;
          Label52: {
            F.line = 97;
              Label53: while (true) {
              if (!(res_553665221 <= colontmp__553665220)) break Label53;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665219 = res_553665221;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665212.data[chckIndx(h_553665219, 0, (colontmp__553665212.data).length - 1)].Field0)) {
                F.line = 756;
                F.filename = "lisp.nim";
                k_553654384 = colontmp__553665212.data[chckIndx(h_553665219, 0, (colontmp__553665212.data).length - 1)].Field1;
                F.line = 756;
                v_553654385 = colontmp__553665212.data[chckIndx(h_553665219, 0, (colontmp__553665212.data).length - 1)].Field2;
                F.line = 757;
                process__lisp_u6185(k_553654384, result_p1, result_p1_Idx);
                F.line = 758;
                result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [58,32]);;
                F.line = 759;
                process__lisp_u6185(v_553654385, result_p1, result_p1_Idx);
                F.line = 760;
                result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [44,32]);;
                if (!((len__lisp_u1038(colontmp__553665212) == L_553665217))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665221 = addInt(res_553665221, 1);
              }
          };
        };
      };
      F.line = 761;
      F.filename = "lisp.nim";
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [125]);;
      break;
    case 1:
      F.line = 764;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [40]);;
      Label54: {
        F.line = 765;
        var i_553654426 = 0;
        F.line = 765;
        var k_553654427 = null;
        F.line = 180;
        F.filename = "iterators.nim";
        var colontmp__553665224 = [];
        F.line = 765;
        F.filename = "lisp.nim";
        var Temporary55 = n_p0;
        if (ConstSet179[Temporary55.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary55.kind, NTI553648176)); }
        colontmp__553665224 = Temporary55.kids;
        F.line = 182;
        F.filename = "iterators.nim";
        var i_553665226 = 0;
        F.line = 183;
        var L_553665227 = (colontmp__553665224).length;
        Label56: {
          F.line = 184;
            Label57: while (true) {
            if (!(i_553665226 < L_553665227)) break Label57;
              F.line = 765;
              F.filename = "lisp.nim";
              i_553654426 = i_553665226;
              F.line = 765;
              k_553654427 = colontmp__553665224[chckIndx(i_553665226, 0, (colontmp__553665224).length - 1)];
              if ((0 < i_553654426)) {
              F.line = 767;
              result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [32]);;
              }
              
              F.line = 768;
              process__lisp_u6185(k_553654427, result_p1, result_p1_Idx);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665226 += 1;
              if (!(((colontmp__553665224).length == L_553665227))) {
              F.line = 187;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(187, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 769;
      F.filename = "lisp.nim";
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [41]);;
      break;
    case 2:
      F.line = 772;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [60,102,117,110,99,116,105,111,110,62]);;
      break;
    case 11:
      F.line = 775;
      result_p1[result_p1_Idx].push.apply(result_p1[result_p1_Idx], [60,116,101,109,112,108,97,116,101,62]);;
      break;
    }
  framePtr = F.prev;

  
}

function HEX24__lisp_u6182(n_p0) {
  var result_553654312 = [[]];

  var F = {procname: "lisp.$", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!(HEX3DHEX3D__lisp_u1499(n_p0, null)))) {
    F.line = 777;
    F.filename = "lisp.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(777, 3) `\x0Anot (n == nil)` "));
    }
    
    F.line = 778;
    process__lisp_u6185(n_p0, result_553654312, 0);
  framePtr = F.prev;

  return result_553654312[0];

}

function nsuJoinSep(a_p0, sep_p1) {
  var result_738199085 = [];

  var F = {procname: "strutils.join", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/strutils.nim", line: 0};
  framePtr = F;
    if ((0 < (a_p0).length)) {
    F.line = 1871;
    F.filename = "strutils.nim";
    var L_738199092 = mulInt((sep_p1).length, subInt((a_p0).length, 1));
    Label1: {
      F.line = 1872;
      var i_738199100 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665307 = 0;
      F.line = 1872;
      F.filename = "strutils.nim";
      colontmp__553665307 = (a_p0).length - 1;
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665308 = 0;
      Label2: {
        F.line = 97;
          Label3: while (true) {
          if (!(res_553665308 <= colontmp__553665307)) break Label3;
            F.line = 1872;
            F.filename = "strutils.nim";
            i_738199100 = res_553665308;
            F.line = 1872;
            L_738199092 = addInt(L_738199092, (a_p0[chckIndx(i_738199100, 0, (a_p0).length - 1)]).length);
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665308 = addInt(res_553665308, 1);
          }
      };
    };
    F.line = 1873;
    F.filename = "strutils.nim";
    result_738199085 = nimCopy(null, mnewString(0), NTI33554449);
    F.line = 1874;
    result_738199085.push.apply(result_738199085, a_p0[chckIndx(0, 0, (a_p0).length - 1)]);;
    Label4: {
      F.line = 1875;
      var i_738199113 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665311 = 0;
      F.line = 1875;
      F.filename = "strutils.nim";
      colontmp__553665311 = (a_p0).length - 1;
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665312 = 1;
      Label5: {
        F.line = 97;
          Label6: while (true) {
          if (!(res_553665312 <= colontmp__553665311)) break Label6;
            F.line = 1875;
            F.filename = "strutils.nim";
            i_738199113 = res_553665312;
            F.line = 1876;
            result_738199085.push.apply(result_738199085, sep_p1);;
            F.line = 1877;
            result_738199085.push.apply(result_738199085, a_p0[chckIndx(i_738199113, 0, (a_p0).length - 1)]);;
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665312 = addInt(res_553665312, 1);
          }
      };
    };
    }
    else {
      F.line = 1879;
      F.filename = "strutils.nim";
      result_738199085 = nimCopy(null, [], NTI33554449);
    }
    
  framePtr = F.prev;

  return result_738199085;

}

function HEX24__lisp_u6305(s_p0) {
  var result_553654435 = [];

  var F = {procname: "lisp.$", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 781;
    F.filename = "lisp.nim";
    result_553654435.push.apply(result_553654435, ([60]).concat(reprEnum(s_p0.kind, NTI553648178),[62,32,91]));;
    F.line = 782;
    F.line = 880;
    F.filename = "sequtils.nim";
    var resultHEX60gensym213_553654652 = [];
    Label1: {
      F.line = 881;
      var xHEX60gensym213_553654653 = [];
      F.line = 748;
      F.filename = "tables.nim";
      var L_553665300 = len__lisp_u498(s_p0.symbols);
      Label2: {
        F.line = 749;
        var h_553665302 = 0;
        F.line = 81;
        F.filename = "iterators_1.nim";
        var colontmp__553665303 = 0;
        F.line = 749;
        F.filename = "tables.nim";
        colontmp__553665303 = (s_p0.symbols.data).length - 1;
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553665304 = 0;
        Label3: {
          F.line = 97;
            Label4: while (true) {
            if (!(res_553665304 <= colontmp__553665303)) break Label4;
              F.line = 749;
              F.filename = "tables.nim";
              h_553665302 = res_553665304;
              if (isFilled__pureZcollectionsZtables_u31(s_p0.symbols.data[chckIndx(h_553665302, 0, (s_p0.symbols.data).length - 1)].Field0)) {
              F.line = 881;
              F.filename = "sequtils.nim";
              xHEX60gensym213_553654653 = s_p0.symbols.data[chckIndx(h_553665302, 0, (s_p0.symbols.data).length - 1)]["Field1"];
              F.line = 882;
              var Temporary5 = nimCopy(null, xHEX60gensym213_553654653, NTI33554449);
              resultHEX60gensym213_553654652.push(Temporary5);;
              if (!((len__lisp_u498(s_p0.symbols) == L_553665300))) {
              F.line = 752;
              F.filename = "tables.nim";
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(752, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553665304 = addInt(res_553665304, 1);
            }
        };
      };
    };
    result_553654435.push.apply(result_553654435, nsuJoinSep(resultHEX60gensym213_553654652, [44,32]));;
    F.line = 783;
    F.filename = "lisp.nim";
    result_553654435.push.apply(result_553654435, [93]);;
  framePtr = F.prev;

  return result_553654435;

}

function addQuoted__lisp_u13766(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], HEX24__lisp_u6305(x_p1));;
  framePtr = F.prev;

  
}

function collectionToString__lisp_u13727(x_p0, prefix_p1, separator_p2, suffix_p3) {
  var result_553661861 = [[]];

  var F = {procname: "collectionToString.collectionToString", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 97;
    F.filename = "dollars.nim";
    result_553661861[0] = nimCopy(null, prefix_p1, NTI33554449);
    F.line = 98;
    var firstElement_553661862 = true;
    Label1: {
      F.line = 99;
      var value_553661884 = null;
      F.line = 249;
      F.filename = "iterators.nim";
      var i_553665296 = 0;
      F.line = 250;
      var L_553665297 = (x_p0).length;
      Label2: {
        F.line = 251;
          Label3: while (true) {
          if (!(i_553665296 < L_553665297)) break Label3;
            F.line = 99;
            F.filename = "dollars.nim";
            value_553661884 = x_p0[i_553665296];
            if (firstElement_553661862) {
            F.line = 101;
            firstElement_553661862 = false;
            }
            else {
              F.line = 103;
            result_553661861[0].push.apply(result_553661861[0], separator_p2);;
            }
            
            if ((value_553661884 == null)) {
            F.line = 108;
            result_553661861[0].push.apply(result_553661861[0], [110,105,108]);;
            }
            else {
              F.line = 110;
            addQuoted__lisp_u13766(result_553661861, 0, value_553661884);
            }
            
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665296 += 1;
            if (!(((x_p0).length == L_553665297))) {
            F.line = 254;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 113;
    F.filename = "dollars.nim";
    result_553661861[0].push.apply(result_553661861[0], suffix_p3);;
  framePtr = F.prev;

  return result_553661861[0];

}

function HEX24__lisp_u13723(x_p0) {
  var result_553661854 = [];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 124;
    F.filename = "dollars.nim";
    result_553661854 = nimCopy(null, collectionToString__lisp_u13727(x_p0, [64,91], [44,32], [93]), NTI33554449);
  framePtr = F.prev;

  return result_553661854;

}

function HEX5BHEX5D__lisp_u9400(s_p0, x_p1) {
  var result_553657534 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 145;
    F.filename = "indices.nim";
    var a_553657536 = x_p1.a;
    F.line = 146;
    var L_553657541 = addInt(subInt(subInt((s_p0).length, x_p1.b), a_553657536), 1);
    F.line = 147;
    result_553657534 = new Array(chckRange(L_553657541, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_553657541, 0, 2147483647) ; ++i) { result_553657534[i] = null; }    Label1: {
      F.line = 148;
      var i_553657550 = 0;
      F.line = 128;
      F.filename = "iterators_1.nim";
      var i_553665315 = 0;
      Label2: {
        F.line = 129;
          Label3: while (true) {
          if (!(i_553665315 < L_553657541)) break Label3;
            F.line = 148;
            F.filename = "indices.nim";
            i_553657550 = i_553665315;
            F.line = 148;
            result_553657534[chckIndx(i_553657550, 0, (result_553657534).length - 1)] = s_p0[chckIndx(addInt(i_553657550, a_553657536), 0, (s_p0).length - 1)];
            F.line = 131;
            F.filename = "iterators_1.nim";
            i_553665315 = addInt(i_553665315, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_553657534;

}

function addQuoted__pureZstrutils_u1413(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2654;
    F.filename = "system.nim";
    addInt__stdZprivateZdigitsutils_u241(s_p0, s_p0_Idx, x_p1);
  framePtr = F.prev;

  
}

function addQuoted__lisp_u6659(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], reprEnum(x_p1, NTI553648169));;
  framePtr = F.prev;

  
}

function collectionToString__lisp_u6644(x_p0, prefix_p1, separator_p2, suffix_p3) {
  var result_553654778 = [[]];

  var F = {procname: "collectionToString.collectionToString", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 97;
    F.filename = "dollars.nim";
    result_553654778[0] = nimCopy(null, prefix_p1, NTI33554449);
    F.line = 98;
    var firstElement_553654779 = true;
    Label1: {
      F.line = 99;
      var value_553654783 = 0;
      F.line = 62;
      F.filename = "iterators.nim";
      var i_553665328 = 0;
      Label2: {
        F.line = 63;
          Label3: while (true) {
          if (!(i_553665328 <= 1)) break Label3;
            if ((x_p0[i_553665328] != undefined)) {
            F.line = 99;
            F.filename = "dollars.nim";
            value_553654783 = i_553665328;
            if (firstElement_553654779) {
            F.line = 101;
            firstElement_553654779 = false;
            }
            else {
              F.line = 103;
            result_553654778[0].push.apply(result_553654778[0], separator_p2);;
            }
            
            F.line = 112;
            addQuoted__lisp_u6659(result_553654778, 0, value_553654783);
            }
            
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665328 += 1;
          }
      };
    };
    F.line = 113;
    F.filename = "dollars.nim";
    result_553654778[0].push.apply(result_553654778[0], suffix_p3);;
  framePtr = F.prev;

  return result_553654778[0];

}

function HEX24__lisp_u6640(x_p0) {
  var result_553654771 = [];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 116;
    F.filename = "dollars.nim";
    result_553654771 = nimCopy(null, collectionToString__lisp_u6644(x_p0, [123], [44,32], [125]), NTI33554449);
  framePtr = F.prev;

  return result_553654771;

}

function addQuoted__lisp_u6634(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], HEX24__lisp_u6640(x_p1));;
  framePtr = F.prev;

  
}

function addQuoted__lisp_u6682(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], HEX24__lisp_u6182(x_p1));;
  framePtr = F.prev;

  
}

function addQuoted__lisp_u6699(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], reprEnum(x_p1, NTI553648176));;
  framePtr = F.prev;

  
}

function addEscapedChar__system_u3640(s_p0, s_p0_Idx, c_p1) {
  var F = {procname: "system.addEscapedChar", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2593;
    F.filename = "system.nim";
    switch (c_p1) {
    case 7:
      F.line = 2594;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,97]);;
      break;
    case 8:
      F.line = 2595;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,98]);;
      break;
    case 9:
      F.line = 2596;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,116]);;
      break;
    case 10:
      F.line = 2597;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,110]);;
      break;
    case 11:
      F.line = 2598;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,118]);;
      break;
    case 12:
      F.line = 2599;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,102]);;
      break;
    case 13:
      F.line = 2600;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,114]);;
      break;
    case 27:
      F.line = 2601;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,101]);;
      break;
    case 92:
      F.line = 2602;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,92]);;
      break;
    case 39:
      F.line = 2603;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,39]);;
      break;
    case 34:
      F.line = 2604;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,34]);;
      break;
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
      F.line = 2605;
      addChar(s_p0[s_p0_Idx], c_p1);;
      break;
    default: 
      F.line = 2607;
      s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [92,120]);;
      F.line = 2609;
      var n_33558084 = c_p1;
      F.line = 2610;
      addChar(s_p0[s_p0_Idx], [48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70][chckIndx(((n_33558084 & 240) >> 4), 0, ([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70]).length - 1)]);;
      F.line = 2611;
      addChar(s_p0[s_p0_Idx], [48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70][chckIndx((n_33558084 & 15), 0, ([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70]).length - 1)]);;
      break;
    }
  framePtr = F.prev;

  
}

function addQuoted__lisp_u6716(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2639;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [34]);;
    Label1: {
      F.line = 2640;
      var c_553654848 = 0;
      F.line = 267;
      F.filename = "iterators.nim";
      var i_553665332 = 0;
      F.line = 268;
      var L_553665333 = (x_p1).length;
      Label2: {
        F.line = 269;
          Label3: while (true) {
          if (!(i_553665332 < L_553665333)) break Label3;
            F.line = 2640;
            F.filename = "system.nim";
            c_553654848 = x_p1[chckIndx(i_553665332, 0, (x_p1).length - 1)];
            if ((c_553654848 <= 127)) {
            F.line = 2644;
            addEscapedChar__system_u3640(s_p0, s_p0_Idx, c_553654848);
            }
            else {
              F.line = 2646;
            addChar(s_p0[s_p0_Idx], c_553654848);;
            }
            
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665332 += 1;
            if (!(((x_p1).length == L_553665333))) {
            F.line = 272;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(272, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 2647;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], [34]);;
  framePtr = F.prev;

  
}

function HEX24__lisp_u6904(t_p0) {
  var result_553655036 = [[]];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if ((len__lisp_u498(t_p0) == 0)) {
    F.line = 212;
    F.filename = "tableimpl.nim";
    result_553655036[0] = nimCopy(null, [123,58,125], NTI33554449);
    }
    else {
      F.line = 214;
      result_553655036[0] = nimCopy(null, [123], NTI33554449);
      Label1: {
        F.line = 215;
        var key_553655085 = [];
        F.line = 215;
        var val_553655086 = null;
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665336 = len__lisp_u498(t_p0);
        Label2: {
          F.line = 706;
          var h_553665338 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665339 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665339 = (t_p0.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665340 = 0;
          Label3: {
            F.line = 97;
              Label4: while (true) {
              if (!(res_553665340 <= colontmp__553665339)) break Label4;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665338 = res_553665340;
                if (isFilled__pureZcollectionsZtables_u31(t_p0.data[chckIndx(h_553665338, 0, (t_p0.data).length - 1)].Field0)) {
                F.line = 215;
                F.filename = "tableimpl.nim";
                key_553655085 = t_p0.data[chckIndx(h_553665338, 0, (t_p0.data).length - 1)].Field1;
                F.line = 215;
                val_553655086 = t_p0.data[chckIndx(h_553665338, 0, (t_p0.data).length - 1)].Field2;
                if ((1 < (result_553655036[0]).length)) {
                F.line = 216;
                result_553655036[0].push.apply(result_553655036[0], [44,32]);;
                }
                
                F.line = 217;
                addQuoted__lisp_u6716(result_553655036, 0, key_553655085);
                F.line = 218;
                result_553655036[0].push.apply(result_553655036[0], [58,32]);;
                F.line = 219;
                addQuoted__lisp_u6682(result_553655036, 0, val_553655086);
                if (!((len__lisp_u498(t_p0) == L_553665336))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665340 = addInt(res_553665340, 1);
              }
          };
        };
      };
      F.line = 220;
      F.filename = "tableimpl.nim";
      result_553655036[0].push.apply(result_553655036[0], [125]);;
    }
    
  framePtr = F.prev;

  return result_553655036[0];

}

function addQuoted__lisp_u6860(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], HEX24__lisp_u6904(x_p1));;
  framePtr = F.prev;

  
}

function addQuoted__lisp_u7170(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], reprEnum(x_p1, NTI553648168));;
  framePtr = F.prev;

  
}

function addQuoted__lisp_u7190(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], reprEnum(x_p1, NTI553648175));;
  framePtr = F.prev;

  
}

function addQuoted__lisp_u7210(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2656;
    F.filename = "system.nim";
    addFloat__system_u3169(s_p0, s_p0_Idx, x_p1);
  framePtr = F.prev;

  
}

function addQuoted__lisp_u7240(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], nimBoolToStr(x_p1));;
  framePtr = F.prev;

  
}

function collectionToString__lisp_u7320(x_p0, prefix_p1, separator_p2, suffix_p3) {
  var result_553655454 = [[]];

  var F = {procname: "collectionToString.collectionToString", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 97;
    F.filename = "dollars.nim";
    result_553655454[0] = nimCopy(null, prefix_p1, NTI33554449);
    F.line = 98;
    var firstElement_553655455 = true;
    Label1: {
      F.line = 99;
      var value_553655459 = null;
      F.line = 249;
      F.filename = "iterators.nim";
      var i_553665343 = 0;
      F.line = 250;
      var L_553665344 = (x_p0).length;
      Label2: {
        F.line = 251;
          Label3: while (true) {
          if (!(i_553665343 < L_553665344)) break Label3;
            F.line = 99;
            F.filename = "dollars.nim";
            value_553655459 = x_p0[i_553665343];
            if (firstElement_553655455) {
            F.line = 101;
            firstElement_553655455 = false;
            }
            else {
              F.line = 103;
            result_553655454[0].push.apply(result_553655454[0], separator_p2);;
            }
            
            if ((value_553655459 == null)) {
            F.line = 108;
            result_553655454[0].push.apply(result_553655454[0], [110,105,108]);;
            }
            else {
              F.line = 110;
            addQuoted__lisp_u6682(result_553655454, 0, value_553655459);
            }
            
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665343 += 1;
            if (!(((x_p0).length == L_553665344))) {
            F.line = 254;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 113;
    F.filename = "dollars.nim";
    result_553655454[0].push.apply(result_553655454[0], suffix_p3);;
  framePtr = F.prev;

  return result_553655454[0];

}

function HEX24__lisp_u7316(x_p0) {
  var result_553655447 = [];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 124;
    F.filename = "dollars.nim";
    result_553655447 = nimCopy(null, collectionToString__lisp_u7320(x_p0, [64,91], [44,32], [93]), NTI33554449);
  framePtr = F.prev;

  return result_553655447;

}

function addQuoted__lisp_u7310(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], HEX24__lisp_u7316(x_p1));;
  framePtr = F.prev;

  
}

function HEX24__lisp_u7516(t_p0) {
  var result_553655648 = [[]];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if ((len__lisp_u1038(t_p0) == 0)) {
    F.line = 212;
    F.filename = "tableimpl.nim";
    result_553655648[0] = nimCopy(null, [123,58,125], NTI33554449);
    }
    else {
      F.line = 214;
      result_553655648[0] = nimCopy(null, [123], NTI33554449);
      Label1: {
        F.line = 215;
        var key_553655697 = null;
        F.line = 215;
        var val_553655698 = null;
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665347 = len__lisp_u1038(t_p0);
        Label2: {
          F.line = 706;
          var h_553665349 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665350 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665350 = (t_p0.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665351 = 0;
          Label3: {
            F.line = 97;
              Label4: while (true) {
              if (!(res_553665351 <= colontmp__553665350)) break Label4;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665349 = res_553665351;
                if (isFilled__pureZcollectionsZtables_u31(t_p0.data[chckIndx(h_553665349, 0, (t_p0.data).length - 1)].Field0)) {
                F.line = 215;
                F.filename = "tableimpl.nim";
                key_553655697 = t_p0.data[chckIndx(h_553665349, 0, (t_p0.data).length - 1)].Field1;
                F.line = 215;
                val_553655698 = t_p0.data[chckIndx(h_553665349, 0, (t_p0.data).length - 1)].Field2;
                if ((1 < (result_553655648[0]).length)) {
                F.line = 216;
                result_553655648[0].push.apply(result_553655648[0], [44,32]);;
                }
                
                F.line = 217;
                addQuoted__lisp_u6682(result_553655648, 0, key_553655697);
                F.line = 218;
                result_553655648[0].push.apply(result_553655648[0], [58,32]);;
                F.line = 219;
                addQuoted__lisp_u6682(result_553655648, 0, val_553655698);
                if (!((len__lisp_u1038(t_p0) == L_553665347))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665351 = addInt(res_553665351, 1);
              }
          };
        };
      };
      F.line = 220;
      F.filename = "tableimpl.nim";
      result_553655648[0].push.apply(result_553655648[0], [125]);;
    }
    
  framePtr = F.prev;

  return result_553655648[0];

}

function addQuoted__lisp_u7472(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], HEX24__lisp_u7516(x_p1));;
  framePtr = F.prev;

  
}

function collectionToString__lisp_u7656(x_p0, prefix_p1, separator_p2, suffix_p3) {
  var result_553655790 = [[]];

  var F = {procname: "collectionToString.collectionToString", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 97;
    F.filename = "dollars.nim";
    result_553655790[0] = nimCopy(null, prefix_p1, NTI33554449);
    F.line = 98;
    var firstElement_553655791 = true;
    Label1: {
      F.line = 99;
      var value_553655813 = [];
      F.line = 249;
      F.filename = "iterators.nim";
      var i_553665355 = 0;
      F.line = 250;
      var L_553665356 = (x_p0).length;
      Label2: {
        F.line = 251;
          Label3: while (true) {
          if (!(i_553665355 < L_553665356)) break Label3;
            F.line = 99;
            F.filename = "dollars.nim";
            value_553655813 = x_p0[i_553665355];
            if (firstElement_553655791) {
            F.line = 101;
            firstElement_553655791 = false;
            }
            else {
              F.line = 103;
            result_553655790[0].push.apply(result_553655790[0], separator_p2);;
            }
            
            F.line = 112;
            addQuoted__lisp_u6716(result_553655790, 0, value_553655813);
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665355 += 1;
            if (!(((x_p0).length == L_553665356))) {
            F.line = 254;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 113;
    F.filename = "dollars.nim";
    result_553655790[0].push.apply(result_553655790[0], suffix_p3);;
  framePtr = F.prev;

  return result_553655790[0];

}

function HEX24__lisp_u7652(x_p0) {
  var result_553655783 = [];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 124;
    F.filename = "dollars.nim";
    result_553655783 = nimCopy(null, collectionToString__lisp_u7656(x_p0, [64,91], [44,32], [93]), NTI33554449);
  framePtr = F.prev;

  return result_553655783;

}

function addQuoted__lisp_u7646(s_p0, s_p0_Idx, x_p1) {
  var F = {procname: "addQuoted.addQuoted", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 2660;
    F.filename = "system.nim";
    s_p0[s_p0_Idx].push.apply(s_p0[s_p0_Idx], HEX24__lisp_u7652(x_p1));;
  framePtr = F.prev;

  
}

function HEX24__lisp_u6568(x_p0) {
      var Temporary1;
      var Temporary2;
        var Temporary3;
        var Temporary4;
      var Temporary5;
      var Temporary6;
        var Temporary7;
        var Temporary8;
      var Temporary9;
      var Temporary10;
      var Temporary11;
      var Temporary12;
      var Temporary13;
      var Temporary14;
        var Temporary15;
        var Temporary16;
        var Temporary17;
      var Temporary18;
      var Temporary19;
      var Temporary20;
        var Temporary21;
        var Temporary22;
      var Temporary23;
        var Temporary24;
        var Temporary25;
      var Temporary26;
      var Temporary27;
        var Temporary28;
        var Temporary29;
        var Temporary30;
        var Temporary31;
        var Temporary32;
        var Temporary33;
      var Temporary34;
        var Temporary35;
        var Temporary36;
      var Temporary37;
        var Temporary38;
        var Temporary39;
      var Temporary40;
      var Temporary41;
        var Temporary42;
        var Temporary43;
        var Temporary44;
        var Temporary45;
        var Temporary46;
        var Temporary47;

  var result_553654699 = [[]];

  var F = {procname: "$.$", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/std/objectdollar.nim", line: 0};
  framePtr = F;
    F.line = 19;
    F.filename = "miscdollars.nim";
    result_553654699[0] = nimCopy(null, [40], NTI33554449);
    F.line = 21;
    var countHEX60gensym219_553654710 = 0;
    if (true) {
    if ((0 < countHEX60gensym219_553654710)) {
    F.line = 23;
    result_553654699[0].push.apply(result_553654699[0], [44,32]);;
    }
    
    F.line = 25;
    result_553654699[0].push.apply(result_553654699[0], [108,105,110,101]);;
    F.line = 26;
    result_553654699[0].push.apply(result_553654699[0], [58,32]);;
    F.line = 27;
    countHEX60gensym219_553654710 += 1;
    F.line = 33;
    addQuoted__pureZstrutils_u1413(result_553654699, 0, x_p0.line);
    }
    
    if (true) {
    if ((0 < countHEX60gensym219_553654710)) {
    F.line = 23;
    result_553654699[0].push.apply(result_553654699[0], [44,32]);;
    }
    
    F.line = 25;
    result_553654699[0].push.apply(result_553654699[0], [116,97,103,115]);;
    F.line = 26;
    result_553654699[0].push.apply(result_553654699[0], [58,32]);;
    F.line = 27;
    countHEX60gensym219_553654710 += 1;
    F.line = 33;
    addQuoted__lisp_u6634(result_553654699, 0, x_p0.tags);
    }
    
    if (true) {
    if ((0 < countHEX60gensym219_553654710)) {
    F.line = 23;
    result_553654699[0].push.apply(result_553654699[0], [44,32]);;
    }
    
    F.line = 25;
    result_553654699[0].push.apply(result_553654699[0], [101,110,117,109,84,121,112,101]);;
    F.line = 26;
    result_553654699[0].push.apply(result_553654699[0], [58,32]);;
    F.line = 27;
    countHEX60gensym219_553654710 += 1;
    if ((x_p0.enumType == null)) {
    F.line = 30;
    result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
    }
    else {
      F.line = 31;
    addQuoted__lisp_u6682(result_553654699, 0, x_p0.enumType);
    }
    
    }
    
    if (true) {
    if ((0 < countHEX60gensym219_553654710)) {
    F.line = 23;
    result_553654699[0].push.apply(result_553654699[0], [44,32]);;
    }
    
    F.line = 25;
    result_553654699[0].push.apply(result_553654699[0], [107,105,110,100]);;
    F.line = 26;
    result_553654699[0].push.apply(result_553654699[0], [58,32]);;
    F.line = 27;
    countHEX60gensym219_553654710 += 1;
    F.line = 33;
    addQuoted__lisp_u6699(result_553654699, 0, x_p0.kind);
    }
    
    F.line = 22;
    switch (x_p0.kind) {
    case 19:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [109,101,109,98,101,114]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary1 = x_p0;
      if (ConstSet185[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'member\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
      addQuoted__lisp_u6716(result_553654699, 0, Temporary1.member);
      }
      
      break;
    case 17:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [99,108,97,115,115,78,97,109,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary2 = x_p0;
      if (ConstSet186[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'className\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
      addQuoted__lisp_u6716(result_553654699, 0, Temporary2.className);
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [99,108,97,115,115,80,97,114,101,110,116]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary3 = x_p0;
        if (ConstSet187[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
      if ((Temporary3.classParent == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary4 = x_p0;
        if (ConstSet188[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary4.classParent);
      }
      
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [99,108,97,115,115,70,105,101,108,100,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary5 = x_p0;
      if (ConstSet189[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
      addQuoted__lisp_u6860(result_553654699, 0, Temporary5.classFields);
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [99,108,97,115,115,77,101,116,104,111,100,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary6 = x_p0;
      if (ConstSet190[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
      addQuoted__lisp_u6860(result_553654699, 0, Temporary6.classMethods);
      }
      
      break;
    case 18:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [99,108,97,115,115,79,98,106,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary7 = x_p0;
        if (ConstSet191[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
      if ((Temporary7.classObjType == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary8 = x_p0;
        if (ConstSet192[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary8.classObjType);
      }
      
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [99,108,97,115,115,79,98,106,70,105,101,108,100,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary9 = x_p0;
      if (ConstSet193[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
      addQuoted__lisp_u6860(result_553654699, 0, Temporary9.classObjFields);
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [99,108,97,115,115,79,98,106,77,101,116,104,111,100,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary10 = x_p0;
      if (ConstSet194[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
      addQuoted__lisp_u6860(result_553654699, 0, Temporary10.classObjMethods);
      }
      
      break;
    case 14:
    case 15:
    case 16:
      break;
    case 10:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [100,111,116]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary11 = x_p0;
      if (ConstSet195[Temporary11.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'dot\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary11.kind, NTI553648176)); }
      addQuoted__lisp_u6716(result_553654699, 0, Temporary11.dot);
      }
      
      break;
    case 3:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [107,101,121,119,111,114,100]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary12 = x_p0;
      if (ConstSet196[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI553648176)); }
      addQuoted__lisp_u7170(result_553654699, 0, Temporary12.keyword);
      }
      
      break;
    case 9:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [97,116,111,109,105,99,75,105,110,100]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary13 = x_p0;
      if (ConstSet197[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI553648176)); }
      addQuoted__lisp_u7190(result_553654699, 0, Temporary13.atomicKind);
      }
      
      F.line = 22;
      var Temporary14 = x_p0;
      if (ConstSet198[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648176)); }
      switch (Temporary14.atomicKind) {
      case 0:
        if (true) {
        if ((0 < countHEX60gensym219_553654710)) {
        F.line = 23;
        result_553654699[0].push.apply(result_553654699[0], [44,32]);;
        }
        
        F.line = 25;
        result_553654699[0].push.apply(result_553654699[0], [110,117,109]);;
        F.line = 26;
        result_553654699[0].push.apply(result_553654699[0], [58,32]);;
        F.line = 27;
        countHEX60gensym219_553654710 += 1;
        F.line = 33;
        var Temporary15 = x_p0;
        if (ConstSet199[Temporary15.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary15.atomicKind, NTI553648175)); }
        addQuoted__lisp_u7210(result_553654699, 0, Temporary15.num);
        }
        
        break;
      case 1:
        if (true) {
        if ((0 < countHEX60gensym219_553654710)) {
        F.line = 23;
        result_553654699[0].push.apply(result_553654699[0], [44,32]);;
        }
        
        F.line = 25;
        result_553654699[0].push.apply(result_553654699[0], [115,116,114]);;
        F.line = 26;
        result_553654699[0].push.apply(result_553654699[0], [58,32]);;
        F.line = 27;
        countHEX60gensym219_553654710 += 1;
        F.line = 33;
        var Temporary16 = x_p0;
        if (ConstSet200[Temporary16.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary16.atomicKind, NTI553648175)); }
        addQuoted__lisp_u6716(result_553654699, 0, Temporary16.str);
        }
        
        break;
      case 2:
        if (true) {
        if ((0 < countHEX60gensym219_553654710)) {
        F.line = 23;
        result_553654699[0].push.apply(result_553654699[0], [44,32]);;
        }
        
        F.line = 25;
        result_553654699[0].push.apply(result_553654699[0], [98,111,111,108,101,97,110]);;
        F.line = 26;
        result_553654699[0].push.apply(result_553654699[0], [58,32]);;
        F.line = 27;
        countHEX60gensym219_553654710 += 1;
        F.line = 33;
        var Temporary17 = x_p0;
        if (ConstSet201[Temporary17.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary17.atomicKind, NTI553648175)); }
        addQuoted__lisp_u7240(result_553654699, 0, Temporary17.boolean);
        }
        
        break;
      }
      break;
    case 0:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [115,121,109]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary18 = x_p0;
      if (ConstSet202[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI553648176)); }
      addQuoted__lisp_u6716(result_553654699, 0, Temporary18.sym);
      }
      
      break;
    case 5:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [97,116,111,109,105,99,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary19 = x_p0;
      if (ConstSet203[Temporary19.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary19.kind, NTI553648176)); }
      addQuoted__lisp_u7190(result_553654699, 0, Temporary19.atomicType);
      }
      
      break;
    case 1:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [107,105,100,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary20 = x_p0;
      if (ConstSet204[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI553648176)); }
      addQuoted__lisp_u7310(result_553654699, 0, Temporary20.kids);
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [108,105,115,116,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary21 = x_p0;
        if (ConstSet205[Temporary21.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'listType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary21.kind, NTI553648176)); }
      if ((Temporary21.listType == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary22 = x_p0;
        if (ConstSet206[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'listType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary22.listType);
      }
      
      }
      
      break;
    case 4:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [116,97,98,108,101,86,97,108]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary23 = x_p0;
      if (ConstSet207[Temporary23.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary23.kind, NTI553648176)); }
      addQuoted__lisp_u7472(result_553654699, 0, Temporary23.tableVal);
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [116,97,98,108,101,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary24 = x_p0;
        if (ConstSet208[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI553648176)); }
      if ((Temporary24.tableType == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary25 = x_p0;
        if (ConstSet209[Temporary25.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary25.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary25.tableType);
      }
      
      }
      
      break;
    case 2:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [102,117,110,99,80,97,114,97,109,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary26 = x_p0;
      if (ConstSet210[Temporary26.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary26.kind, NTI553648176)); }
      addQuoted__lisp_u7646(result_553654699, 0, Temporary26.funcParams);
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [102,117,110,99,84,121,112,101,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary27 = x_p0;
      if (ConstSet211[Temporary27.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcTypes\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary27.kind, NTI553648176)); }
      addQuoted__lisp_u7310(result_553654699, 0, Temporary27.funcTypes);
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [102,117,110,99,66,111,100,121]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary28 = x_p0;
        if (ConstSet212[Temporary28.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary28.kind, NTI553648176)); }
      if ((Temporary28.funcBody == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary29 = x_p0;
        if (ConstSet213[Temporary29.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary29.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary29.funcBody);
      }
      
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [102,117,110,99,82,101,116,117,114,110,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary30 = x_p0;
        if (ConstSet214[Temporary30.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcReturnType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary30.kind, NTI553648176)); }
      if ((Temporary30.funcReturnType == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary31 = x_p0;
        if (ConstSet215[Temporary31.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcReturnType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary31.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary31.funcReturnType);
      }
      
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [102,117,110,99,79,98,106]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary32 = x_p0;
        if (ConstSet216[Temporary32.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary32.kind, NTI553648176)); }
      if ((Temporary32.funcObj == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary33 = x_p0;
        if (ConstSet217[Temporary33.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary33.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary33.funcObj);
      }
      
      }
      
      break;
    case 11:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [116,101,109,112,108,97,116,101,80,97,114,97,109,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary34 = x_p0;
      if (ConstSet218[Temporary34.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary34.kind, NTI553648176)); }
      addQuoted__lisp_u7646(result_553654699, 0, Temporary34.templateParams);
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [116,101,109,112,108,97,116,101,66,111,100,121]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary35 = x_p0;
        if (ConstSet219[Temporary35.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary35.kind, NTI553648176)); }
      if ((Temporary35.templateBody == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary36 = x_p0;
        if (ConstSet220[Temporary36.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary36.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary36.templateBody);
      }
      
      }
      
      break;
    case 6:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [111,98,106,101,99,116,84,121,112,101,70,105,101,108,100,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary37 = x_p0;
      if (ConstSet221[Temporary37.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary37.kind, NTI553648176)); }
      addQuoted__lisp_u6860(result_553654699, 0, Temporary37.objectTypeFields);
      }
      
      break;
    case 8:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [111,98,106,101,99,116,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary38 = x_p0;
        if (ConstSet222[Temporary38.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary38.kind, NTI553648176)); }
      if ((Temporary38.objectType == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary39 = x_p0;
        if (ConstSet223[Temporary39.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary39.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary39.objectType);
      }
      
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [111,98,106,101,99,116,70,105,101,108,100,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary40 = x_p0;
      if (ConstSet224[Temporary40.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary40.kind, NTI553648176)); }
      addQuoted__lisp_u6860(result_553654699, 0, Temporary40.objectFields);
      }
      
      break;
    case 7:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [101,110,117,109,84,121,112,101,86,97,108,117,101,115]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
      F.line = 33;
      var Temporary41 = x_p0;
      if (ConstSet225[Temporary41.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary41.kind, NTI553648176)); }
      addQuoted__lisp_u7310(result_553654699, 0, Temporary41.enumTypeValues);
      }
      
      break;
    case 12:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [116,97,98,108,101,75,101,121,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary42 = x_p0;
        if (ConstSet226[Temporary42.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary42.kind, NTI553648176)); }
      if ((Temporary42.tableKeyType == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary43 = x_p0;
        if (ConstSet227[Temporary43.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary43.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary43.tableKeyType);
      }
      
      }
      
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [116,97,98,108,101,86,97,108,117,101,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary44 = x_p0;
        if (ConstSet228[Temporary44.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary44.kind, NTI553648176)); }
      if ((Temporary44.tableValueType == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary45 = x_p0;
        if (ConstSet229[Temporary45.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary45.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary45.tableValueType);
      }
      
      }
      
      break;
    case 13:
      if (true) {
      if ((0 < countHEX60gensym219_553654710)) {
      F.line = 23;
      result_553654699[0].push.apply(result_553654699[0], [44,32]);;
      }
      
      F.line = 25;
      result_553654699[0].push.apply(result_553654699[0], [97,114,114,97,121,86,97,108,117,101,84,121,112,101]);;
      F.line = 26;
      result_553654699[0].push.apply(result_553654699[0], [58,32]);;
      F.line = 27;
      countHEX60gensym219_553654710 += 1;
        var Temporary46 = x_p0;
        if (ConstSet230[Temporary46.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary46.kind, NTI553648176)); }
      if ((Temporary46.arrayValueType == null)) {
      F.line = 30;
      result_553654699[0].push.apply(result_553654699[0], [110,105,108]);;
      }
      else {
        F.line = 31;
        var Temporary47 = x_p0;
        if (ConstSet231[Temporary47.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary47.kind, NTI553648176)); }
      addQuoted__lisp_u6682(result_553654699, 0, Temporary47.arrayValueType);
      }
      
      }
      
      break;
    }
    F.line = 39;
    result_553654699[0].push.apply(result_553654699[0], [41]);;
  framePtr = F.prev;

  return result_553654699[0];

}

function find__lisp_u7997(a_p0, item_p1) {
  var result_553656130 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1760;
    F.filename = "system.nim";
    result_553656130 = 0;
    Label1: {
      F.line = 1761;
      var i_553656134 = null;
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553665359 = 0;
      Label2: {
        F.line = 19;
          Label3: while (true) {
          if (!(i_553665359 < (a_p0).length)) break Label3;
            F.line = 1761;
            F.filename = "system.nim";
            i_553656134 = a_p0[chckIndx(i_553665359, 0, (a_p0).length - 1)];
            if (HEX3DHEX3D__lisp_u1499(i_553656134, item_p1)) {
            F.line = 1762;
            break BeforeRet;
            }
            
            F.line = 1763;
            result_553656130 = addInt(result_553656130, 1);
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665359 += 1;
          }
      };
    };
    F.line = 1764;
    F.filename = "system.nim";
    result_553656130 = (-1);
  };
  framePtr = F.prev;

  return result_553656130;

}

function contains__lisp_u7992(a_p0, item_p1) {
  var result_553656124 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1778;
    F.filename = "system.nim";
    result_553656124 = (0 <= find__lisp_u7997(a_p0, item_p1));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_553656124;

}

function newSeq__stdZsyncio_u559(len_p0) {
  var result_520094259 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 653;
    F.filename = "system.nim";
    result_520094259 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_520094259[i] = []; }  framePtr = F.prev;

  return result_520094259;

}

function expectValidEnumValue__lisp_u6543(n_p0) {
      var Temporary1;
      var Temporary3;

  var F = {procname: "lisp.expectValidEnumValue", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!(HEX3DHEX3D__lisp_u1499(n_p0.enumType, null)))) {
    F.line = 282;
    F.filename = "lisp.nim";
    var inst_553654674 = {Field0: [108,105,115,112,46,110,105,109], Field1: 805, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553654674.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,110,32,101,110,117,109,32,118,97,108,117,101]));
    }
    
    F.line = 791;
    var nHEX60gensym216_553654677 = n_p0.enumType;
    F.line = 792;
    var kindHEX60gensym216_553654678 = 7;
    F.line = 786;
    var nHEX60gensym217_553654680 = nHEX60gensym216_553654677;
    if (!(!((nHEX60gensym217_553654680 == null)))) {
    F.line = 282;
    var inst_553654685 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553654685.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym217_553654680.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
    }
    
    if (!((nHEX60gensym216_553654677.kind == kindHEX60gensym216_553654678))) {
    F.line = 282;
    var inst_553656119 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656119.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym216_553654677.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym216_553654678, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym216_553654677.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym216_553654677)));
    }
    
      var Temporary1 = n_p0.enumType;
      if (ConstSet232[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    if (!(contains__lisp_u7992(Temporary1.enumTypeValues, n_p0))) {
    F.line = 282;
    var inst_553656195 = {Field0: [108,105,115,112,46,110,105,109], Field1: 809, Field2: 3};
    F.line = 283;
    Label2: {
      F.line = 810;
      var Temporary3 = n_p0.enumType;
      if (ConstSet233[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
      var HEX3Atmp_553656158 = nimCopy(null, Temporary3.enumTypeValues, NTI553648249);
      F.line = 1041;
      F.filename = "sequtils.nim";
      var iHEX60gensym340_553656161 = 0;
      F.line = 1042;
      var resultHEX60gensym340_553656185 = newSeq__stdZsyncio_u559(chckRange((HEX3Atmp_553656158).length, 0, 2147483647));
      Label4: {
        F.line = 1043;
        var it_553656189 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665324 = 0;
        F.line = 250;
        var L_553665325 = (HEX3Atmp_553656158).length;
        Label5: {
          F.line = 251;
            Label6: while (true) {
            if (!(i_553665324 < L_553665325)) break Label6;
              F.line = 1043;
              F.filename = "sequtils.nim";
              it_553656189 = HEX3Atmp_553656158[chckIndx(i_553665324, 0, (HEX3Atmp_553656158).length - 1)];
              F.line = 810;
              F.filename = "lisp.nim";
              resultHEX60gensym340_553656185[chckIndx(iHEX60gensym340_553656161, 0, (resultHEX60gensym340_553656185).length - 1)] = nimCopy(null, [96].concat(HEX24__lisp_u6182(it_553656189),[96]), NTI33554449);
              F.line = 1045;
              F.filename = "sequtils.nim";
              iHEX60gensym340_553656161 = addInt(iHEX60gensym340_553656161, 1);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665324 += 1;
              if (!(((HEX3Atmp_553656158).length == L_553665325))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656195.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32,73,110,118,97,108,105,100,32,101,110,117,109,32,118,97,108,117,101,58,32],HEX24__lisp_u6182(n_p0),[46,32,86,97,108,105,100,32,118,97,108,117,101,115,58,32],nsuJoinSep(resultHEX60gensym340_553656185, [44,32])));
    }
    
  framePtr = F.prev;

  
}

function expectListLen__lisp_u8301(n_p0, len_p1) {
      var Temporary1;
    var Temporary2;

  var F = {procname: "lisp.expectListLen", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 791;
    F.filename = "lisp.nim";
    var nHEX60gensym368_553656434 = n_p0;
    F.line = 792;
    var kindHEX60gensym368_553656435 = 1;
    F.line = 786;
    var nHEX60gensym369_553656437 = nHEX60gensym368_553656434;
    if (!(!((nHEX60gensym369_553656437 == null)))) {
    F.line = 282;
    var inst_553656442 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656442.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym369_553656437.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
    }
    
    if (!((nHEX60gensym368_553656434.kind == kindHEX60gensym368_553656435))) {
    F.line = 282;
    var inst_553656457 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656457.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym368_553656434.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym368_553656435, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym368_553656434.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym368_553656434)));
    }
    
      var Temporary1 = n_p0;
      if (ConstSet234[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    if (!(((Temporary1.kids).length == len_p1))) {
    F.line = 282;
    var inst_553656465 = {Field0: [108,105,115,112,46,110,105,109], Field1: 839, Field2: 3};
    F.line = 283;
    var Temporary2 = n_p0;
    if (ConstSet235[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656465.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32],([69,120,112,101,99,116,101,100,32,97,32,108,105,115,116,32,111,102,32]).concat(HEX24__systemZdollars_u8(len_p1),[32,118,97,108,117,101,115,32,98,117,116,32,103,111,116,32],HEX24__systemZdollars_u8((Temporary2.kids).length))));
    }
    
  framePtr = F.prev;

  
}

function isInt__lisp_u302(f_p0) {
  var result_553648432 = false;

  var F = {procname: "lisp.isInt", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 295;
    F.filename = "lisp.nim";
    result_553648432 = (((f_p0) | 0) == f_p0);
  framePtr = F.prev;

  return result_553648432;

}

function expectInt__lisp_u8170(n_p0) {
      var Temporary1;
    var Temporary2;
      var Temporary3;

  var F = {procname: "lisp.expectInt", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 798;
    F.filename = "lisp.nim";
    var nHEX60gensym355_553656302 = n_p0;
    F.line = 799;
    var kindHEX60gensym355_553656303 = 0;
    F.line = 791;
    var nHEX60gensym356_553656306 = nHEX60gensym355_553656302;
    F.line = 792;
    var kindHEX60gensym356_553656307 = 9;
    F.line = 786;
    var nHEX60gensym357_553656309 = nHEX60gensym356_553656306;
    if (!(!((nHEX60gensym357_553656309 == null)))) {
    F.line = 282;
    var inst_553656314 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656314.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym357_553656309.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
    }
    
    if (!((nHEX60gensym356_553656306.kind == kindHEX60gensym356_553656307))) {
    F.line = 282;
    var inst_553656329 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656329.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym356_553656306.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym356_553656307, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym356_553656306.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym356_553656306)));
    }
    
      var Temporary1 = nHEX60gensym355_553656302;
      if (ConstSet236[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    if (!((Temporary1.atomicKind == kindHEX60gensym355_553656303))) {
    F.line = 282;
    var inst_553656341 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
    F.line = 283;
    var Temporary2 = nHEX60gensym355_553656302;
    if (ConstSet237[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656341.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym355_553656302.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym355_553656303, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary2.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym355_553656302)));
    }
    
      var Temporary3 = n_p0;
      if (ConstSet238[Temporary3.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary3.atomicKind, NTI553648175)); }
    if (!(isInt__lisp_u302(Temporary3.num))) {
    F.line = 282;
    var inst_553656343 = {Field0: [108,105,115,112,46,110,105,109], Field1: 828, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656343.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,110,32,105,110,116,101,103,101,114]));
    }
    
  framePtr = F.prev;

  
}

function contains__lisp_u8776(t_p0, key_p1) {
  var result_553656909 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 381;
    F.filename = "tables.nim";
    result_553656909 = hasKey__lisp_u2089(t_p0, key_p1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_553656909;

}

function nextPowerOfTwo__pureZmath_u274(x_p0) {
  var result_771752212 = 0;

    result_771752212 = (x_p0 - 1);
    result_771752212 = (result_771752212 | (result_771752212 >> 16));
    result_771752212 = (result_771752212 | (result_771752212 >> 8));
    result_771752212 = (result_771752212 | (result_771752212 >> 4));
    result_771752212 = (result_771752212 | (result_771752212 >> 2));
    result_771752212 = (result_771752212 | (result_771752212 >> 1));
    result_771752212 += (1 + ((x_p0 <= 0) ? 1 : 0));

  return result_771752212;

}

function slotsNeeded__pureZcollectionsZtables_u42(count_p0) {
  var result_989855788 = 0;

  var F = {procname: "tables.slotsNeeded", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 39;
    F.filename = "hashcommon.nim";
    result_989855788 = nextPowerOfTwo__pureZmath_u274(addInt(addInt(divInt(count_p0, 2), count_p0), 4));
  framePtr = F.prev;

  return result_989855788;

}

function mustRehash__lisp_u2963(t_p0) {
  var result_553651094 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_p0.counter < (t_p0.data).length))) {
    F.line = 34;
    F.filename = "hashcommon.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 35;
    result_553651094 = (((t_p0.data).length < addInt(t_p0.counter, divInt(t_p0.counter, 2))) || (subInt((t_p0.data).length, t_p0.counter) < 4));
  framePtr = F.prev;

  return result_553651094;

}

function rawInsert__lisp_u3380(t_p0, data_p1, data_p1_Idx, key_p2, val_p3, hc_p4, h_p5) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 25;
    F.filename = "tableimpl.nim";
    data_p1[data_p1_Idx][chckIndx(h_p5, 0, (data_p1[data_p1_Idx]).length - 1)].Field1 = nimCopy(null, key_p2, NTI33554449);
    F.line = 26;
    data_p1[data_p1_Idx][chckIndx(h_p5, 0, (data_p1[data_p1_Idx]).length - 1)].Field2 = val_p3;
    F.line = 27;
    data_p1[data_p1_Idx][chckIndx(h_p5, 0, (data_p1[data_p1_Idx]).length - 1)].Field0 = hc_p4;
  framePtr = F.prev;

  
}

function enlarge__lisp_u3106(t_p0) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 247;
    F.filename = "tables.nim";
    var n_553651240 = [];
    F.line = 248;
    n_553651240 = new Array(chckRange(mulInt((t_p0.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_p0.data).length, 2), 0, 2147483647) ; ++i) { n_553651240[i] = {Field0: 0, Field1: [], Field2: null}; }    F.line = 249;
    F.line = 249;
    var HEX3Atmp_553665375 = nimCopy(null, t_p0.data, NTI553648202);
    F.line = 249;
    t_p0.data = n_553651240;
    F.line = 249;
    n_553651240 = HEX3Atmp_553665375;
    Label1: {
      F.line = 250;
      var i_553651300 = 0;
      F.line = 46;
      F.filename = "iterators_1.nim";
      var colontmp__553665372 = 0;
      F.line = 250;
      F.filename = "tables.nim";
      colontmp__553665372 = (n_553651240).length - 1;
      F.line = 68;
      F.filename = "iterators_1.nim";
      var res_553665373 = 0;
      Label2: {
        F.line = 69;
          Label3: while (true) {
          if (!(res_553665373 <= colontmp__553665372)) break Label3;
            F.line = 250;
            F.filename = "tables.nim";
            i_553651300 = res_553665373;
            F.line = 251;
            var eh_553651350 = n_553651240[chckIndx(i_553651300, 0, (n_553651240).length - 1)].Field0;
            if (isFilled__pureZcollectionsZtables_u31(eh_553651350)) {
            F.line = 253;
            var j_553651354 = (eh_553651350 & (t_p0.data).length - 1);
            Label4: {
              F.line = 254;
                Label5: while (true) {
                if (!isFilled__pureZcollectionsZtables_u31(t_p0.data[chckIndx(j_553651354, 0, (t_p0.data).length - 1)].Field0)) break Label5;
                  F.line = 255;
                  j_553651354 = nextTry__pureZcollectionsZtables_u34(j_553651354, (t_p0.data).length - 1);
                }
            };
            F.line = 257;
            rawInsert__lisp_u3380(t_p0, t_p0, "data", n_553651240[chckIndx(i_553651300, 0, (n_553651240).length - 1)].Field1, n_553651240[chckIndx(i_553651300, 0, (n_553651240).length - 1)].Field2, eh_553651350, j_553651354);
            }
            
            F.line = 74;
            F.filename = "iterators_1.nim";
            res_553665373 = addInt(res_553665373, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function rawGetKnownHC__lisp_u3537(t_p0, key_p1, hc_p2) {
  var result_553651671 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((t_p0.data).length == 0)) {
    F.line = 43;
    F.filename = "hashcommon.nim";
    result_553651671 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_553651718 = (hc_p2 & (t_p0.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled__pureZcollectionsZtables_u31(t_p0.data[chckIndx(h_553651718, 0, (t_p0.data).length - 1)].Field0)) break Label2;
          if (((t_p0.data[chckIndx(h_553651718, 0, (t_p0.data).length - 1)].Field0 == hc_p2) && eqStrings(t_p0.data[chckIndx(h_553651718, 0, (t_p0.data).length - 1)].Field1, key_p1))) {
          F.line = 51;
          result_553651671 = h_553651718;
          break BeforeRet;
          }
          
          F.line = 52;
          h_553651718 = nextTry__pureZcollectionsZtables_u34(h_553651718, (t_p0.data).length - 1);
        }
    };
    F.line = 53;
    result_553651671 = subInt((-1), h_553651718);
  };
  framePtr = F.prev;

  return result_553651671;

}

function HEX5BHEX5DHEX3D__lisp_u2797(t_p0, key_p1, val_p2) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_p0.data).length == 0)) {
    F.line = 182;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym118_553650975 = slotsNeeded__pureZcollectionsZtables_u42(32);
    F.line = 186;
    t_p0.counter = 0;
    F.line = 187;
    t_p0.data = new Array(chckRange(correctSizeHEX60gensym118_553650975, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym118_553650975, 0, 2147483647) ; ++i) { t_p0.data[i] = {Field0: 0, Field1: [], Field2: null}; }    }
    
    F.line = 59;
    var hc_553650985 = [0];
    F.line = 60;
    var index_553650992 = rawGet__lisp_u2096(t_p0, key_p1, hc_553650985, 0);
    if ((0 <= index_553650992)) {
    F.line = 61;
    t_p0.data[chckIndx(index_553650992, 0, (t_p0.data).length - 1)].Field2 = val_p2;
    }
    else {
      if (((t_p0.data).length == 0)) {
      F.line = 182;
      var correctSizeHEX60gensym121_553651086 = slotsNeeded__pureZcollectionsZtables_u42(32);
      F.line = 186;
      t_p0.counter = 0;
      F.line = 187;
      t_p0.data = new Array(chckRange(correctSizeHEX60gensym121_553651086, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym121_553651086, 0, 2147483647) ; ++i) { t_p0.data[i] = {Field0: 0, Field1: [], Field2: null}; }      }
      
      if (mustRehash__lisp_u2963(t_p0)) {
      F.line = 51;
      enlarge__lisp_u3106(t_p0);
      F.line = 52;
      index_553650992 = rawGetKnownHC__lisp_u3537(t_p0, key_p1, hc_553650985[0]);
      }
      
      F.line = 53;
      index_553650992 = subInt((-1), index_553650992);
      F.line = 54;
      rawInsert__lisp_u3380(t_p0, t_p0, "data", key_p1, val_p2, hc_553650985[0], index_553650992);
      F.line = 62;
      t_p0.counter = addInt(t_p0.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function allInheritedClassFields__lisp_u8700(n_p0) {
    var Temporary1;
    var Temporary2;
            var Temporary6;
          var Temporary10;

  var result_553656832 = [({data: [], counter: 0})];

  var F = {procname: "lisp.allInheritedClassFields", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 791;
    F.filename = "lisp.nim";
    var nHEX60gensym412_553656835 = n_p0;
    F.line = 792;
    var kindHEX60gensym412_553656836 = 17;
    F.line = 786;
    var nHEX60gensym413_553656838 = nHEX60gensym412_553656835;
    if (!(!((nHEX60gensym413_553656838 == null)))) {
    F.line = 282;
    var inst_553656843 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656843.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym413_553656838.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
    }
    
    if (!((nHEX60gensym412_553656835.kind == kindHEX60gensym412_553656836))) {
    F.line = 282;
    var inst_553656858 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656858.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym412_553656835.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym412_553656836, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym412_553656835.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym412_553656835)));
    }
    
    F.line = 996;
    var Temporary1 = n_p0;
    if (ConstSet241[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    result_553656832[0] = nimCopy(result_553656832[0], Temporary1.classFields, NTI553648199);
    F.line = 997;
    var Temporary2 = n_p0;
    if (ConstSet242[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
    var nextAncestor_553656859 = Temporary2.classParent;
    Label3: {
      F.line = 998;
        Label4: while (true) {
        if (!!(HEX3DHEX3D__lisp_u1499(nextAncestor_553656859, null))) break Label4;
          Label5: {
            F.line = 999;
            var k_553656864 = [];
            F.line = 999;
            var v_553656865 = null;
            F.line = 680;
            F.filename = "tables.nim";
            var colontmp__553665363 = ({data: [], counter: 0});
            F.line = 999;
            F.filename = "lisp.nim";
            var Temporary6 = nextAncestor_553656859;
            if (ConstSet243[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
            colontmp__553665363 = nimCopy(colontmp__553665363, Temporary6.classFields, NTI553648199);
            F.line = 705;
            F.filename = "tables.nim";
            var L_553665364 = len__lisp_u498(colontmp__553665363);
            Label7: {
              F.line = 706;
              var h_553665366 = 0;
              F.line = 81;
              F.filename = "iterators_1.nim";
              var colontmp__553665367 = 0;
              F.line = 706;
              F.filename = "tables.nim";
              colontmp__553665367 = (colontmp__553665363.data).length - 1;
              F.line = 96;
              F.filename = "iterators_1.nim";
              var res_553665368 = 0;
              Label8: {
                F.line = 97;
                  Label9: while (true) {
                  if (!(res_553665368 <= colontmp__553665367)) break Label9;
                    F.line = 706;
                    F.filename = "tables.nim";
                    h_553665366 = res_553665368;
                    if (isFilled__pureZcollectionsZtables_u31(colontmp__553665363.data[chckIndx(h_553665366, 0, (colontmp__553665363.data).length - 1)].Field0)) {
                    F.line = 999;
                    F.filename = "lisp.nim";
                    k_553656864 = colontmp__553665363.data[chckIndx(h_553665366, 0, (colontmp__553665363.data).length - 1)].Field1;
                    F.line = 999;
                    v_553656865 = colontmp__553665363.data[chckIndx(h_553665366, 0, (colontmp__553665363.data).length - 1)].Field2;
                    if (!(!(contains__lisp_u8776(result_553656832[0], k_553656864)))) {
                    F.line = 282;
                    var inst_553656931 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1000, Field2: 7};
                    F.line = 283;
                    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656931.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32,70,105,101,108,100,32,100,101,102,105,110,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,58,32],k_553656864));
                    }
                    
                    F.line = 1001;
                    HEX5BHEX5DHEX3D__lisp_u2797(result_553656832[0], k_553656864, v_553656865);
                    if (!((len__lisp_u498(colontmp__553665363) == L_553665364))) {
                    F.line = 709;
                    F.filename = "tables.nim";
                    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                    }
                    
                    }
                    
                    F.line = 102;
                    F.filename = "iterators_1.nim";
                    res_553665368 = addInt(res_553665368, 1);
                  }
              };
            };
          };
          F.line = 1002;
          F.filename = "lisp.nim";
          var Temporary10 = nextAncestor_553656859;
          if (ConstSet244[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
          nextAncestor_553656859 = Temporary10.classParent;
        }
    };
  framePtr = F.prev;

  return result_553656832[0];

}

function contains__lisp_u8292(s_p0, value_p1) {
  var result_553656426 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 754;
    F.filename = "system.nim";
    result_553656426 = ((s_p0.a <= value_p1) && (value_p1 <= s_p0.b));
  framePtr = F.prev;

  return result_553656426;

}

function HEX2EHEX2E__stdZstrbasics_u48(a_p0, b_p1) {
  var result_939524149 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 438;
    F.filename = "system.nim";
    result_939524149 = nimCopy(result_939524149, {a: a_p0, b: b_p1}, NTI687866165);
  framePtr = F.prev;

  return result_939524149;

}

function HEX5BHEX5D__lisp_u8216(n_p0, i_p1) {
      var Temporary1;
    var Temporary2;
    var Temporary3;

  var result_553656347 = null;

  var F = {procname: "lisp.[]", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 831;
    F.filename = "lisp.nim";
    F.line = 791;
    var nHEX60gensym362_553656350 = n_p0;
    F.line = 792;
    var kindHEX60gensym362_553656351 = 1;
    F.line = 786;
    var nHEX60gensym363_553656353 = nHEX60gensym362_553656350;
    if (!(!((nHEX60gensym363_553656353 == null)))) {
    F.line = 282;
    var inst_553656358 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656358.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym363_553656353.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
    }
    
    if (!((nHEX60gensym362_553656350.kind == kindHEX60gensym362_553656351))) {
    F.line = 282;
    var inst_553656373 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656373.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym362_553656350.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym362_553656351, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym362_553656350.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym362_553656350)));
    }
    
      var Temporary1 = n_p0;
      if (ConstSet245[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    if (!(contains__lisp_u8292(HEX2EHEX2E__stdZstrbasics_u48(0, (Temporary1.kids).length), i_p1))) {
    F.line = 282;
    var inst_553656428 = {Field0: [108,105,115,112,46,110,105,109], Field1: 832, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656428.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32],([73,110,100,101,120,32]).concat(HEX24__systemZdollars_u8(i_p1),[110,111,116,32,102,111,117,110,100,32,105,110,32,108,105,115,116,58,32],HEX24__lisp_u6182(n_p0))));
    }
    
    var Temporary2 = n_p0;
    if (ConstSet246[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
    result_553656347 = (Temporary3 = Temporary2.kids, Temporary3)[chckIndx(i_p1, 0, (Temporary3).length - 1)];
  framePtr = F.prev;

  return result_553656347;

}

function inheritsFrom__lisp_u8389(a_p0, b_p1) {
    var Temporary1;
    var Temporary2;
      var Temporary3;
            var Temporary6;

  var result_553656520 = false;

  var F = {procname: "lisp.inheritsFrom", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 879;
    F.filename = "lisp.nim";
    var a_553656521 = a_p0;
    F.line = 880;
    var b_553656522 = b_p1;
    if (!((ConstSet253[a_553656521.kind] != undefined))) {
    F.line = 882;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(882, 3) `contains({nkClassType, nkClassObj}, a.kind)` "));
    }
    
    if (!((ConstSet254[b_553656522.kind] != undefined))) {
    F.line = 883;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(883, 3) `contains({nkClassType, nkClassObj}, b.kind)` "));
    }
    
    if ((a_553656521.kind == 18)) {
    F.line = 886;
    var Temporary1 = a_553656521;
    if (ConstSet255[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    a_553656521 = Temporary1.classObjType;
    }
    
    if ((b_553656522.kind == 18)) {
    F.line = 889;
    var Temporary2 = b_553656522;
    if (ConstSet256[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
    b_553656522 = Temporary2.classObjType;
    }
    
    F.line = 891;
    result_553656520 = false;
    if (HEX3DHEX3D__lisp_u1499(a_553656521, b_553656522)) {
    F.line = 897;
    result_553656520 = true;
    }
    else {
      F.line = 899;
      var Temporary3 = a_553656521;
      if (ConstSet257[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
      var nextAncestor_553656550 = Temporary3.classParent;
      Label4: {
        F.line = 903;
          Label5: while (true) {
          if (!!(HEX3DHEX3D__lisp_u1499(nextAncestor_553656550, null))) break Label5;
            if (HEX3DHEX3D__lisp_u1499(nextAncestor_553656550, b_553656522)) {
            F.line = 905;
            result_553656520 = true;
            F.line = 906;
            break Label4;
            }
            
            F.line = 907;
            var Temporary6 = nextAncestor_553656550;
            if (ConstSet258[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
            nextAncestor_553656550 = Temporary6.classParent;
          }
      };
    }
    
    F.line = 909;
    rawEcho([114,101,115,117,108,116], [32,61,32], nimBoolToStr(result_553656520));
  framePtr = F.prev;

  return result_553656520;

}

function canConvertToEnum__lisp_u8348(n_p0, enumType_p1) {
      var Temporary2;

  var result_553656479 = false;

  var F = {procname: "lisp.canConvertToEnum", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!((n_p0.kind == 0)))) {
    F.line = 282;
    F.filename = "lisp.nim";
    var inst_553656485 = {Field0: [108,105,115,112,46,110,105,109], Field1: 867, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656485.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32,78,111,100,101,32,109,117,115,116,32,98,101,32,101,118,97,108,117,97,116,101,100,32,98,101,102,111,114,101,32,99,111,110,118,101,114,115,105,111,110]));
    }
    
    F.line = 791;
    var nHEX60gensym379_553656488 = enumType_p1;
    F.line = 792;
    var kindHEX60gensym379_553656489 = 7;
    F.line = 786;
    var nHEX60gensym380_553656491 = nHEX60gensym379_553656488;
    if (!(!((nHEX60gensym380_553656491 == null)))) {
    F.line = 282;
    var inst_553656496 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656496.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym380_553656491.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
    }
    
    if (!((nHEX60gensym379_553656488.kind == kindHEX60gensym379_553656489))) {
    F.line = 282;
    var inst_553656511 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656511.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym379_553656488.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym379_553656489, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym379_553656488.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym379_553656488)));
    }
    
    F.line = 869;
    result_553656479 = false;
    Label1: {
      F.line = 870;
      var v_553656515 = null;
      F.line = 247;
      F.filename = "iterators.nim";
      var colontmp__553665392 = [];
      F.line = 870;
      F.filename = "lisp.nim";
      var Temporary2 = enumType_p1;
      if (ConstSet259[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
      colontmp__553665392 = Temporary2.enumTypeValues;
      F.line = 249;
      F.filename = "iterators.nim";
      var i_553665393 = 0;
      F.line = 250;
      var L_553665394 = (colontmp__553665392).length;
      Label3: {
        F.line = 251;
          Label4: while (true) {
          if (!(i_553665393 < L_553665394)) break Label4;
            F.line = 870;
            F.filename = "lisp.nim";
            v_553656515 = colontmp__553665392[chckIndx(i_553665393, 0, (colontmp__553665392).length - 1)];
            if (HEX3DHEX3D__lisp_u1499(n_p0, v_553656515)) {
            F.line = 872;
            result_553656479 = true;
            F.line = 873;
            break Label1;
            }
            
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665393 += 1;
            if (!(((colontmp__553665392).length == L_553665394))) {
            F.line = 254;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  return result_553656479;

}

function newNode__lisp_u2484(kind_p0) {
  var result_553650614 = null;

  var F = {procname: "lisp.newNode", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 393;
    F.filename = "lisp.nim";
    result_553650614 = {kind: 5, atomicType: kind_p0, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
  framePtr = F.prev;

  return result_553650614;

}

function getAtomicValueKind__lisp_u5514(n_p0) {
    var Temporary1;

  var result_553653644 = 0;

  var F = {procname: "lisp.getAtomicValueKind", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 536;
    F.filename = "lisp.nim";
    if (!((n_p0.kind == 9))) {
    F.line = 282;
    var inst_553653650 = {Field0: [108,105,115,112,46,110,105,109], Field1: 536, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553653650.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,116,111,109,105,99,32,118,97,108,117,101]));
    }
    
    var Temporary1 = n_p0;
    if (ConstSet266[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    result_553653644 = Temporary1.atomicKind;
  framePtr = F.prev;

  return result_553653644;

}

function getType__lisp_u8338(n_p0) {
        var Temporary1;
        var Temporary2;
        var Temporary3;
        var Temporary4;

  var result_553656468 = null;

  var F = {procname: "lisp.getType", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(HEX3DHEX3D__lisp_u1499(n_p0.enumType, null))) {
    F.line = 845;
    F.filename = "lisp.nim";
    result_553656468 = n_p0.enumType;
    }
    else {
      F.line = 847;
      switch (n_p0.kind) {
      case 9:
        F.line = 849;
        result_553656468 = newNode__lisp_u2484(getAtomicValueKind__lisp_u5514(n_p0));
        break;
      case 8:
        F.line = 851;
        var Temporary1 = n_p0;
        if (ConstSet267[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
        result_553656468 = Temporary1.objectType;
        break;
      case 1:
        F.line = 853;
        var Temporary2 = n_p0;
        if (ConstSet268[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'listType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
        result_553656468 = Temporary2.listType;
        break;
      case 4:
        F.line = 855;
        var Temporary3 = n_p0;
        if (ConstSet269[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
        result_553656468 = Temporary3.tableType;
        break;
      case 16:
        F.line = 857;
        result_553656468 = {kind: 15, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
        break;
      case 18:
        F.line = 859;
        var Temporary4 = n_p0;
        if (ConstSet270[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
        result_553656468 = Temporary4.classObjType;
        break;
      default: 
        if (true) {
        F.line = 282;
        var inst_553656470 = {Field0: [108,105,115,112,46,110,105,109], Field1: 861, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656470.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32],([78,111,100,101,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,116,121,112,101,100,32,118,97,108,117,101,58,32]).concat(HEX24__lisp_u6182(n_p0))));
        }
        
        break;
      }
    }
    
    if (!(!(HEX3DHEX3D__lisp_u1499(result_553656468, null)))) {
    F.line = 282;
    var inst_553656475 = {Field0: [108,105,115,112,46,110,105,109], Field1: 864, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656475.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p0.line),[41,58,32,73,110,116,101,114,110,97,108,32,101,114,114,111,114,44,32,99,97,110,39,116,32,103,101,116,32,116,104,101,32,116,121,112,101,32,111,102,58,32],reprAny(n_p0, null, NTI553648177)));
    }
    
  framePtr = F.prev;

  return result_553656468;

}

function canConvertToType__lisp_u8439(n_p0, newType_p1) {
        var Temporary2;
                  var Temporary6;
                  var Temporary7;
                    var Temporary8;
        var Temporary10;
                var Temporary13;
                var Temporary14;

  var result_553656570 = false;

  var F = {procname: "lisp.canConvertToType", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!((n_p0 == null)))) {
    F.line = 912;
    F.filename = "lisp.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(912, 3) `not isNil(n)` "));
    }
    
    if (!(!((newType_p1 == null)))) {
    F.line = 913;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(913, 3) `not isNil(newType)` "));
    }
    
    if (!((ConstSet252[newType_p1.kind] != undefined))) {
    F.line = 914;
    failedAssertImpl__stdZassertions_u84((makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(914, 3) `contains({nkEnumType, nkAtomicType, nkObjectType, nkTableType, nkAnyType,\x0A          nkVoidType, nkClassType, nkArrayType}, newType.kind)` ")).concat(([84,121,112,101,32,110,111,100,101,32,101,120,112,101,99,116,101,100,44,32,103,111,116,58,32]).concat(HEX24__lisp_u6182(n_p0))));
    }
    
    F.line = 916;
    switch (newType_p1.kind) {
    case 17:
      F.line = 919;
      result_553656570 = inheritsFrom__lisp_u8389(n_p0, newType_p1);
      break;
    case 14:
      F.line = 922;
      result_553656570 = true;
      break;
    case 7:
      F.line = 925;
      result_553656570 = canConvertToEnum__lisp_u8348(n_p0, newType_p1);
      break;
    case 12:
      if ((n_p0.kind == 4)) {
      F.line = 929;
      result_553656570 = true;
      Label1: {
        F.line = 930;
        var k_553656604 = null;
        F.line = 930;
        var v_553656605 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665378 = ({data: [], counter: 0});
        F.line = 930;
        F.filename = "lisp.nim";
        var Temporary2 = n_p0;
        if (ConstSet260[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
        colontmp__553665378 = nimCopy(colontmp__553665378, Temporary2.tableVal, NTI553648229);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665379 = len__lisp_u1038(colontmp__553665378);
        Label3: {
          F.line = 706;
          var h_553665381 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665382 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665382 = (colontmp__553665378.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665383 = 0;
          Label4: {
            F.line = 97;
              Label5: while (true) {
              if (!(res_553665383 <= colontmp__553665382)) break Label5;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665381 = res_553665383;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665378.data[chckIndx(h_553665381, 0, (colontmp__553665378.data).length - 1)].Field0)) {
                F.line = 930;
                F.filename = "lisp.nim";
                k_553656604 = colontmp__553665378.data[chckIndx(h_553665381, 0, (colontmp__553665378.data).length - 1)].Field1;
                F.line = 930;
                v_553656605 = colontmp__553665378.data[chckIndx(h_553665381, 0, (colontmp__553665378.data).length - 1)].Field2;
                  var Temporary7 = newType_p1;
                  if (ConstSet261[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
                  if (!(canConvertToType__lisp_u8439(k_553656604, Temporary7.tableKeyType))) Temporary6 = true; else {                    var Temporary8 = newType_p1;
                    if (ConstSet262[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
                    Temporary6 = !(canConvertToType__lisp_u8439(v_553656605, Temporary8.tableValueType));                  }                if (Temporary6) {
                F.line = 932;
                result_553656570 = false;
                F.line = 933;
                break Label1;
                }
                
                if (!((len__lisp_u1038(colontmp__553665378) == L_553665379))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665383 = addInt(res_553665383, 1);
              }
          };
        };
      };
      }
      else {
        F.line = 935;
        F.filename = "lisp.nim";
        result_553656570 = false;
      }
      
      break;
    case 13:
      F.line = 938;
      result_553656570 = true;
      if ((n_p0.kind == 1)) {
      Label9: {
        F.line = 940;
        var it_553656613 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665386 = [];
        F.line = 940;
        F.filename = "lisp.nim";
        var Temporary10 = n_p0;
        if (ConstSet263[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
        colontmp__553665386 = Temporary10.kids;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665387 = 0;
        F.line = 250;
        var L_553665388 = (colontmp__553665386).length;
        Label11: {
          F.line = 251;
            Label12: while (true) {
            if (!(i_553665387 < L_553665388)) break Label12;
              F.line = 940;
              F.filename = "lisp.nim";
              it_553656613 = colontmp__553665386[chckIndx(i_553665387, 0, (colontmp__553665386).length - 1)];
                var Temporary13 = n_p0;
                if (ConstSet265[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'listType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI553648176)); }
                var Temporary14 = Temporary13.listType;
                if (ConstSet264[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648176)); }
              if (!(canConvertToType__lisp_u8439(it_553656613, Temporary14.arrayValueType))) {
              F.line = 942;
              result_553656570 = false;
              F.line = 943;
              break Label9;
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665387 += 1;
              if (!(((colontmp__553665386).length == L_553665388))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      }
      else {
        F.line = 945;
        F.filename = "lisp.nim";
        result_553656570 = false;
      }
      
      break;
    default: 
      F.line = 948;
      result_553656570 = HEX3DHEX3D__lisp_u1499(getType__lisp_u8338(n_p0), newType_p1);
      break;
    }
  framePtr = F.prev;

  return result_553656570;

}

function HEX5BHEX5D__lisp_u14028(t_p0, key_p1) {
  var result_553662161 = null;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 240;
    F.filename = "tables.nim";
    var hcHEX60gensym20_553662162 = [0];
    F.line = 241;
    var indexHEX60gensym20_553662169 = rawGet__lisp_u2096(t_p0, key_p1, hcHEX60gensym20_553662162, 0);
    if ((0 <= indexHEX60gensym20_553662169)) {
    F.line = 242;
    result_553662161 = t_p0.data[chckIndx(indexHEX60gensym20_553662169, 0, (t_p0.data).length - 1)]["Field2"];
    }
    else {
      F.line = 244;
    raiseKeyError__lisp_u5395(key_p1);
    }
    
  framePtr = F.prev;

  return result_553662161;

}

function initTable__lisp_u2737(initialSize_p0) {
  var result_553650869 = ({data: [], counter: 0});

  var F = {procname: "initTable.initTable", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 281;
    F.filename = "tables.nim";
    result_553650869 = nimCopy(result_553650869, ({data: [], counter: 0}), NTI553648199);
    F.line = 182;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym115_553650878 = slotsNeeded__pureZcollectionsZtables_u42(chckRange(initialSize_p0, 0, 2147483647));
    F.line = 186;
    result_553650869.counter = 0;
    F.line = 187;
    result_553650869.data = new Array(chckRange(correctSizeHEX60gensym115_553650878, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym115_553650878, 0, 2147483647) ; ++i) { result_553650869.data[i] = {Field0: 0, Field1: [], Field2: null}; }  framePtr = F.prev;

  return result_553650869;

}

function newSeq__lisp_u3899(len_p0) {
  var result_553652031 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 653;
    F.filename = "system.nim";
    result_553652031 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_553652031[i] = null; }  framePtr = F.prev;

  return result_553652031;

}

function initTable__lisp_u3996(initialSize_p0) {
  var result_553652128 = ({data: [], counter: 0});

  var F = {procname: "initTable.initTable", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 281;
    F.filename = "tables.nim";
    result_553652128 = nimCopy(result_553652128, ({data: [], counter: 0}), NTI553648229);
    F.line = 182;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym139_553652137 = slotsNeeded__pureZcollectionsZtables_u42(chckRange(initialSize_p0, 0, 2147483647));
    F.line = 186;
    result_553652128.counter = 0;
    F.line = 187;
    result_553652128.data = new Array(chckRange(correctSizeHEX60gensym139_553652137, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym139_553652137, 0, 2147483647) ; ++i) { result_553652128.data[i] = {Field0: 0, Field1: null, Field2: null}; }  framePtr = F.prev;

  return result_553652128;

}

function mustRehash__lisp_u4221(t_p0) {
  var result_553652352 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_p0.counter < (t_p0.data).length))) {
    F.line = 34;
    F.filename = "hashcommon.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 35;
    result_553652352 = (((t_p0.data).length < addInt(t_p0.counter, divInt(t_p0.counter, 2))) || (subInt((t_p0.data).length, t_p0.counter) < 4));
  framePtr = F.prev;

  return result_553652352;

}

function rawInsert__lisp_u4638(t_p0, data_p1, data_p1_Idx, key_p2, val_p3, hc_p4, h_p5) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 25;
    F.filename = "tableimpl.nim";
    data_p1[data_p1_Idx][chckIndx(h_p5, 0, (data_p1[data_p1_Idx]).length - 1)].Field1 = key_p2;
    F.line = 26;
    data_p1[data_p1_Idx][chckIndx(h_p5, 0, (data_p1[data_p1_Idx]).length - 1)].Field2 = val_p3;
    F.line = 27;
    data_p1[data_p1_Idx][chckIndx(h_p5, 0, (data_p1[data_p1_Idx]).length - 1)].Field0 = hc_p4;
  framePtr = F.prev;

  
}

function enlarge__lisp_u4364(t_p0) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 247;
    F.filename = "tables.nim";
    var n_553652498 = [];
    F.line = 248;
    n_553652498 = new Array(chckRange(mulInt((t_p0.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_p0.data).length, 2), 0, 2147483647) ; ++i) { n_553652498[i] = {Field0: 0, Field1: null, Field2: null}; }    F.line = 249;
    F.line = 249;
    var HEX3Atmp_553665456 = nimCopy(null, t_p0.data, NTI553648232);
    F.line = 249;
    t_p0.data = n_553652498;
    F.line = 249;
    n_553652498 = HEX3Atmp_553665456;
    Label1: {
      F.line = 250;
      var i_553652558 = 0;
      F.line = 46;
      F.filename = "iterators_1.nim";
      var colontmp__553665453 = 0;
      F.line = 250;
      F.filename = "tables.nim";
      colontmp__553665453 = (n_553652498).length - 1;
      F.line = 68;
      F.filename = "iterators_1.nim";
      var res_553665454 = 0;
      Label2: {
        F.line = 69;
          Label3: while (true) {
          if (!(res_553665454 <= colontmp__553665453)) break Label3;
            F.line = 250;
            F.filename = "tables.nim";
            i_553652558 = res_553665454;
            F.line = 251;
            var eh_553652608 = n_553652498[chckIndx(i_553652558, 0, (n_553652498).length - 1)].Field0;
            if (isFilled__pureZcollectionsZtables_u31(eh_553652608)) {
            F.line = 253;
            var j_553652612 = (eh_553652608 & (t_p0.data).length - 1);
            Label4: {
              F.line = 254;
                Label5: while (true) {
                if (!isFilled__pureZcollectionsZtables_u31(t_p0.data[chckIndx(j_553652612, 0, (t_p0.data).length - 1)].Field0)) break Label5;
                  F.line = 255;
                  j_553652612 = nextTry__pureZcollectionsZtables_u34(j_553652612, (t_p0.data).length - 1);
                }
            };
            F.line = 257;
            rawInsert__lisp_u4638(t_p0, t_p0, "data", n_553652498[chckIndx(i_553652558, 0, (n_553652498).length - 1)].Field1, n_553652498[chckIndx(i_553652558, 0, (n_553652498).length - 1)].Field2, eh_553652608, j_553652612);
            }
            
            F.line = 74;
            F.filename = "iterators_1.nim";
            res_553665454 = addInt(res_553665454, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function rawGetKnownHC__lisp_u4795(t_p0, key_p1, hc_p2) {
  var result_553652929 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((t_p0.data).length == 0)) {
    F.line = 43;
    F.filename = "hashcommon.nim";
    result_553652929 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_553652976 = (hc_p2 & (t_p0.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled__pureZcollectionsZtables_u31(t_p0.data[chckIndx(h_553652976, 0, (t_p0.data).length - 1)].Field0)) break Label2;
          if (((t_p0.data[chckIndx(h_553652976, 0, (t_p0.data).length - 1)].Field0 == hc_p2) && HEX3DHEX3D__lisp_u1499(t_p0.data[chckIndx(h_553652976, 0, (t_p0.data).length - 1)].Field1, key_p1))) {
          F.line = 51;
          result_553652929 = h_553652976;
          break BeforeRet;
          }
          
          F.line = 52;
          h_553652976 = nextTry__pureZcollectionsZtables_u34(h_553652976, (t_p0.data).length - 1);
        }
    };
    F.line = 53;
    result_553652929 = subInt((-1), h_553652976);
  };
  framePtr = F.prev;

  return result_553652929;

}

function HEX5BHEX5DHEX3D__lisp_u4056(t_p0, key_p1, val_p2) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_p0.data).length == 0)) {
    F.line = 182;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym142_553652234 = slotsNeeded__pureZcollectionsZtables_u42(32);
    F.line = 186;
    t_p0.counter = 0;
    F.line = 187;
    t_p0.data = new Array(chckRange(correctSizeHEX60gensym142_553652234, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym142_553652234, 0, 2147483647) ; ++i) { t_p0.data[i] = {Field0: 0, Field1: null, Field2: null}; }    }
    
    F.line = 59;
    var hc_553652243 = [0];
    F.line = 60;
    var index_553652250 = rawGet__lisp_u1655(t_p0, key_p1, hc_553652243, 0);
    if ((0 <= index_553652250)) {
    F.line = 61;
    t_p0.data[chckIndx(index_553652250, 0, (t_p0.data).length - 1)].Field2 = val_p2;
    }
    else {
      if (((t_p0.data).length == 0)) {
      F.line = 182;
      var correctSizeHEX60gensym145_553652344 = slotsNeeded__pureZcollectionsZtables_u42(32);
      F.line = 186;
      t_p0.counter = 0;
      F.line = 187;
      t_p0.data = new Array(chckRange(correctSizeHEX60gensym145_553652344, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym145_553652344, 0, 2147483647) ; ++i) { t_p0.data[i] = {Field0: 0, Field1: null, Field2: null}; }      }
      
      if (mustRehash__lisp_u4221(t_p0)) {
      F.line = 51;
      enlarge__lisp_u4364(t_p0);
      F.line = 52;
      index_553652250 = rawGetKnownHC__lisp_u4795(t_p0, key_p1, hc_553652243[0]);
      }
      
      F.line = 53;
      index_553652250 = subInt((-1), index_553652250);
      F.line = 54;
      rawInsert__lisp_u4638(t_p0, t_p0, "data", key_p1, val_p2, hc_553652243[0], index_553652250);
      F.line = 62;
      t_p0.counter = addInt(t_p0.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function copyTree__lisp_u2692(n_p0) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
        var Temporary5;
      var Temporary9;
        var Temporary11;
      var Temporary15;
      var Temporary16;
      var Temporary17;
      var Temporary18;
        var Temporary20;
      var Temporary24;
      var Temporary25;
      var Temporary26;
      var Temporary27;
      var Temporary28;
      var Temporary29;
        var Temporary30;
        var Temporary31;
        var Temporary32;
        var Temporary33;
        var Temporary34;
        var Temporary35;
      var Temporary36;
        var Temporary38;
      var Temporary42;
        var Temporary44;
      var Temporary48;
      var Temporary49;
      var Temporary50;
        var Temporary52;
      var Temporary56;
      var Temporary57;
      var Temporary58;
      var Temporary59;
        var Temporary60;
      var Temporary61;
      var Temporary62;
      var Temporary63;
      var Temporary64;
      var Temporary65;
      var Temporary66;
      var Temporary67;
        var Temporary69;
      var Temporary73;
      var Temporary74;
      var Temporary75;
        var Temporary77;

  var result_553650822 = null;

  var F = {procname: "lisp.copyTree", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!((n_p0 == null)))) {
    F.line = 417;
    F.filename = "lisp.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(417, 3) `not isNil(n)` "));
    }
    
    F.line = 419;
    switch (n_p0.kind) {
    case 19:
      F.line = 422;
      var Temporary1 = n_p0;
      if (ConstSet278[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'member\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
      result_553650822 = {kind: 19, member: nimCopy(null, Temporary1.member, NTI33554449), line: 0, tags: {}, enumType: null, className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 17:
      F.line = 426;
      result_553650822 = n_p0;
      break;
    case 18:
      F.line = 429;
      var Temporary2 = n_p0;
      if (ConstSet279[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
      result_553650822 = {kind: 18, classObjType: copyTree__lisp_u2692(Temporary2.classObjType), classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary3 = result_553650822;
      if (ConstSet280[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
      F.line = 430;
      F.line = 430;
      var collectResult_553650835 = [initTable__lisp_u2737(32)];
      Label4: {
        F.line = 430;
        var k_553650887 = [];
        F.line = 430;
        var v_553650888 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665397 = ({data: [], counter: 0});
        F.line = 430;
        F.filename = "lisp.nim";
        var Temporary5 = n_p0;
        if (ConstSet281[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
        colontmp__553665397 = nimCopy(colontmp__553665397, Temporary5.classObjFields, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665398 = len__lisp_u498(colontmp__553665397);
        Label6: {
          F.line = 706;
          var h_553665400 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665401 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665401 = (colontmp__553665397.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665402 = 0;
          Label7: {
            F.line = 97;
              Label8: while (true) {
              if (!(res_553665402 <= colontmp__553665401)) break Label8;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665400 = res_553665402;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665397.data[chckIndx(h_553665400, 0, (colontmp__553665397.data).length - 1)].Field0)) {
                F.line = 430;
                F.filename = "lisp.nim";
                k_553650887 = colontmp__553665397.data[chckIndx(h_553665400, 0, (colontmp__553665397.data).length - 1)].Field1;
                F.line = 430;
                v_553650888 = colontmp__553665397.data[chckIndx(h_553665400, 0, (colontmp__553665397.data).length - 1)].Field2;
                F.line = 326;
                F.filename = "sugar.nim";
                HEX5BHEX5DHEX3D__lisp_u2797(collectResult_553650835[0], k_553650887, copyTree__lisp_u2692(v_553650888));
                if (!((len__lisp_u498(colontmp__553665397) == L_553665398))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665402 = addInt(res_553665402, 1);
              }
          };
        };
      };
      Temporary3.classObjFields = nimCopy(Temporary3.classObjFields, collectResult_553650835[0], NTI553648199);
      var Temporary9 = result_553650822;
      if (ConstSet282[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
      F.line = 431;
      F.filename = "lisp.nim";
      F.line = 431;
      var collectResult_553651887 = [initTable__lisp_u2737(32)];
      Label10: {
        F.line = 431;
        var k_553651920 = [];
        F.line = 431;
        var v_553651921 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665405 = ({data: [], counter: 0});
        F.line = 431;
        F.filename = "lisp.nim";
        var Temporary11 = n_p0;
        if (ConstSet283[Temporary11.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary11.kind, NTI553648176)); }
        colontmp__553665405 = nimCopy(colontmp__553665405, Temporary11.classObjMethods, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665406 = len__lisp_u498(colontmp__553665405);
        Label12: {
          F.line = 706;
          var h_553665408 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665409 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665409 = (colontmp__553665405.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665410 = 0;
          Label13: {
            F.line = 97;
              Label14: while (true) {
              if (!(res_553665410 <= colontmp__553665409)) break Label14;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665408 = res_553665410;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665405.data[chckIndx(h_553665408, 0, (colontmp__553665405.data).length - 1)].Field0)) {
                F.line = 431;
                F.filename = "lisp.nim";
                k_553651920 = colontmp__553665405.data[chckIndx(h_553665408, 0, (colontmp__553665405.data).length - 1)].Field1;
                F.line = 431;
                v_553651921 = colontmp__553665405.data[chckIndx(h_553665408, 0, (colontmp__553665405.data).length - 1)].Field2;
                F.line = 326;
                F.filename = "sugar.nim";
                HEX5BHEX5DHEX3D__lisp_u2797(collectResult_553651887[0], k_553651920, copyTree__lisp_u2692(v_553651921));
                if (!((len__lisp_u498(colontmp__553665405) == L_553665406))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665410 = addInt(res_553665410, 1);
              }
          };
        };
      };
      Temporary9.classObjMethods = nimCopy(Temporary9.classObjMethods, collectResult_553651887[0], NTI553648199);
      break;
    case 15:
      F.line = 434;
      F.filename = "lisp.nim";
      result_553650822 = {kind: 15, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 16:
      F.line = 437;
      result_553650822 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 12:
      F.line = 440;
      var Temporary15 = n_p0;
      if (ConstSet284[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI553648176)); }
      var Temporary16 = n_p0;
      if (ConstSet285[Temporary16.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary16.kind, NTI553648176)); }
      result_553650822 = {kind: 12, tableKeyType: copyTree__lisp_u2692(Temporary15.tableKeyType), tableValueType: copyTree__lisp_u2692(Temporary16.tableValueType), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], arrayValueType: null};
      break;
    case 13:
      F.line = 443;
      var Temporary17 = n_p0;
      if (ConstSet286[Temporary17.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'arrayValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary17.kind, NTI553648176)); }
      result_553650822 = {kind: 13, arrayValueType: copyTree__lisp_u2692(Temporary17.arrayValueType), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null};
      break;
    case 7:
      F.line = 446;
      result_553650822 = {kind: 7, enumTypeValues: [], line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary18 = result_553650822;
      if (ConstSet287[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI553648176)); }
      F.line = 447;
      Label19: {
        F.line = 447;
        var Temporary20 = n_p0;
        if (ConstSet288[Temporary20.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary20.kind, NTI553648176)); }
        var HEX3Atmp_553652000 = nimCopy(null, Temporary20.enumTypeValues, NTI553648249);
        F.line = 1041;
        F.filename = "sequtils.nim";
        var iHEX60gensym130_553652007 = 0;
        F.line = 1042;
        var resultHEX60gensym130_553652036 = newSeq__lisp_u3899(chckRange((HEX3Atmp_553652000).length, 0, 2147483647));
        Label21: {
          F.line = 1043;
          var it_553652040 = null;
          F.line = 249;
          F.filename = "iterators.nim";
          var i_553665414 = 0;
          F.line = 250;
          var L_553665415 = (HEX3Atmp_553652000).length;
          Label22: {
            F.line = 251;
              Label23: while (true) {
              if (!(i_553665414 < L_553665415)) break Label23;
                F.line = 1043;
                F.filename = "sequtils.nim";
                it_553652040 = HEX3Atmp_553652000[chckIndx(i_553665414, 0, (HEX3Atmp_553652000).length - 1)];
                F.line = 447;
                F.filename = "lisp.nim";
                resultHEX60gensym130_553652036[chckIndx(iHEX60gensym130_553652007, 0, (resultHEX60gensym130_553652036).length - 1)] = copyTree__lisp_u2692(it_553652040);
                F.line = 1045;
                F.filename = "sequtils.nim";
                iHEX60gensym130_553652007 = addInt(iHEX60gensym130_553652007, 1);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665414 += 1;
                if (!(((HEX3Atmp_553652000).length == L_553665415))) {
                F.line = 254;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
      };
      Temporary18.enumTypeValues = nimCopy(null, resultHEX60gensym130_553652036, NTI553650670);
      break;
    case 14:
      F.line = 450;
      F.filename = "lisp.nim";
      result_553650822 = {kind: n_p0.kind, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 0:
      F.line = 453;
      var Temporary24 = n_p0;
      if (ConstSet289[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI553648176)); }
      result_553650822 = {kind: 0, sym: nimCopy(null, Temporary24.sym, NTI33554449), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 3:
      F.line = 456;
      var Temporary25 = n_p0;
      if (ConstSet290[Temporary25.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary25.kind, NTI553648176)); }
      result_553650822 = {kind: 3, keyword: Temporary25.keyword, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 10:
      F.line = 459;
      var Temporary26 = n_p0;
      if (ConstSet291[Temporary26.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'dot\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary26.kind, NTI553648176)); }
      result_553650822 = {kind: 10, dot: nimCopy(null, Temporary26.dot, NTI33554449), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 5:
      F.line = 462;
      var Temporary27 = n_p0;
      if (ConstSet292[Temporary27.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary27.kind, NTI553648176)); }
      result_553650822 = {kind: 5, atomicType: Temporary27.atomicType, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 9:
      F.line = 465;
      var Temporary28 = n_p0;
      if (ConstSet293[Temporary28.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary28.kind, NTI553648176)); }
      result_553650822 = {kind: 9, atomicKind: Temporary28.atomicKind, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      F.line = 466;
      var Temporary29 = n_p0;
      if (ConstSet294[Temporary29.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary29.kind, NTI553648176)); }
      switch (Temporary29.atomicKind) {
      case 0:
        var Temporary30 = result_553650822;
        if (ConstSet295[Temporary30.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary30.atomicKind, NTI553648175)); }
        F.line = 467;
        var Temporary31 = n_p0;
        if (ConstSet296[Temporary31.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary31.atomicKind, NTI553648175)); }
        Temporary30.num = Temporary31.num;
        break;
      case 1:
        var Temporary32 = result_553650822;
        if (ConstSet297[Temporary32.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary32.atomicKind, NTI553648175)); }
        F.line = 468;
        var Temporary33 = n_p0;
        if (ConstSet298[Temporary33.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary33.atomicKind, NTI553648175)); }
        Temporary32.str = nimCopy(null, Temporary33.str, NTI33554449);
        break;
      case 2:
        var Temporary34 = result_553650822;
        if (ConstSet299[Temporary34.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary34.atomicKind, NTI553648175)); }
        F.line = 469;
        var Temporary35 = n_p0;
        if (ConstSet300[Temporary35.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary35.atomicKind, NTI553648175)); }
        Temporary34.boolean = Temporary35.boolean;
        break;
      }
      break;
    case 1:
      F.line = 472;
      result_553650822 = {kind: 1, kids: [], listType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary36 = result_553650822;
      if (ConstSet301[Temporary36.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary36.kind, NTI553648176)); }
      F.line = 473;
      Label37: {
        F.line = 473;
        var Temporary38 = n_p0;
        if (ConstSet302[Temporary38.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary38.kind, NTI553648176)); }
        var HEX3Atmp_553652063 = nimCopy(null, Temporary38.kids, NTI553648221);
        F.line = 1041;
        F.filename = "sequtils.nim";
        var iHEX60gensym135_553652066 = 0;
        F.line = 1042;
        var resultHEX60gensym135_553652090 = newSeq__lisp_u3899(chckRange((HEX3Atmp_553652063).length, 0, 2147483647));
        Label39: {
          F.line = 1043;
          var it_553652094 = null;
          F.line = 249;
          F.filename = "iterators.nim";
          var i_553665419 = 0;
          F.line = 250;
          var L_553665420 = (HEX3Atmp_553652063).length;
          Label40: {
            F.line = 251;
              Label41: while (true) {
              if (!(i_553665419 < L_553665420)) break Label41;
                F.line = 1043;
                F.filename = "sequtils.nim";
                it_553652094 = HEX3Atmp_553652063[chckIndx(i_553665419, 0, (HEX3Atmp_553652063).length - 1)];
                F.line = 473;
                F.filename = "lisp.nim";
                resultHEX60gensym135_553652090[chckIndx(iHEX60gensym135_553652066, 0, (resultHEX60gensym135_553652090).length - 1)] = copyTree__lisp_u2692(it_553652094);
                F.line = 1045;
                F.filename = "sequtils.nim";
                iHEX60gensym135_553652066 = addInt(iHEX60gensym135_553652066, 1);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665419 += 1;
                if (!(((HEX3Atmp_553652063).length == L_553665420))) {
                F.line = 254;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
      };
      Temporary36.kids = nimCopy(null, resultHEX60gensym135_553652090, NTI553650670);
      break;
    case 4:
      F.line = 476;
      F.filename = "lisp.nim";
      result_553650822 = {kind: 4, tableVal: ({data: [], counter: 0}), tableType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary42 = result_553650822;
      if (ConstSet303[Temporary42.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary42.kind, NTI553648176)); }
      F.line = 477;
      F.line = 479;
      var collectResult_553652099 = [initTable__lisp_u3996(32)];
      Label43: {
        F.line = 478;
        var k_553652146 = null;
        F.line = 478;
        var v_553652147 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665423 = ({data: [], counter: 0});
        F.line = 478;
        F.filename = "lisp.nim";
        var Temporary44 = n_p0;
        if (ConstSet304[Temporary44.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary44.kind, NTI553648176)); }
        colontmp__553665423 = nimCopy(colontmp__553665423, Temporary44.tableVal, NTI553648229);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665424 = len__lisp_u1038(colontmp__553665423);
        Label45: {
          F.line = 706;
          var h_553665426 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665427 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665427 = (colontmp__553665423.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665428 = 0;
          Label46: {
            F.line = 97;
              Label47: while (true) {
              if (!(res_553665428 <= colontmp__553665427)) break Label47;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665426 = res_553665428;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665423.data[chckIndx(h_553665426, 0, (colontmp__553665423.data).length - 1)].Field0)) {
                F.line = 478;
                F.filename = "lisp.nim";
                k_553652146 = colontmp__553665423.data[chckIndx(h_553665426, 0, (colontmp__553665423.data).length - 1)].Field1;
                F.line = 478;
                v_553652147 = colontmp__553665423.data[chckIndx(h_553665426, 0, (colontmp__553665423.data).length - 1)].Field2;
                F.line = 326;
                F.filename = "sugar.nim";
                HEX5BHEX5DHEX3D__lisp_u4056(collectResult_553652099[0], copyTree__lisp_u2692(k_553652146), copyTree__lisp_u2692(v_553652147));
                if (!((len__lisp_u1038(colontmp__553665423) == L_553665424))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665428 = addInt(res_553665428, 1);
              }
          };
        };
      };
      Temporary42.tableVal = nimCopy(Temporary42.tableVal, collectResult_553652099[0], NTI553648229);
      break;
    case 2:
      F.line = 482;
      F.filename = "lisp.nim";
      result_553650822 = {kind: 2, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary48 = result_553650822;
      if (ConstSet305[Temporary48.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary48.kind, NTI553648176)); }
      F.line = 483;
      var Temporary49 = n_p0;
      if (ConstSet306[Temporary49.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary49.kind, NTI553648176)); }
      Temporary48.funcParams = nimCopy(null, Temporary49.funcParams, NTI553648236);
      var Temporary50 = result_553650822;
      if (ConstSet307[Temporary50.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcTypes\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary50.kind, NTI553648176)); }
      F.line = 484;
      Label51: {
        F.line = 484;
        var Temporary52 = n_p0;
        if (ConstSet308[Temporary52.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcTypes\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary52.kind, NTI553648176)); }
        var HEX3Atmp_553653163 = nimCopy(null, Temporary52.funcTypes, NTI553648237);
        F.line = 1041;
        F.filename = "sequtils.nim";
        var iHEX60gensym153_553653166 = 0;
        F.line = 1042;
        var resultHEX60gensym153_553653190 = newSeq__lisp_u3899(chckRange((HEX3Atmp_553653163).length, 0, 2147483647));
        Label53: {
          F.line = 1043;
          var it_553653194 = null;
          F.line = 249;
          F.filename = "iterators.nim";
          var i_553665432 = 0;
          F.line = 250;
          var L_553665433 = (HEX3Atmp_553653163).length;
          Label54: {
            F.line = 251;
              Label55: while (true) {
              if (!(i_553665432 < L_553665433)) break Label55;
                F.line = 1043;
                F.filename = "sequtils.nim";
                it_553653194 = HEX3Atmp_553653163[chckIndx(i_553665432, 0, (HEX3Atmp_553653163).length - 1)];
                F.line = 484;
                F.filename = "lisp.nim";
                resultHEX60gensym153_553653190[chckIndx(iHEX60gensym153_553653166, 0, (resultHEX60gensym153_553653190).length - 1)] = copyTree__lisp_u2692(it_553653194);
                F.line = 1045;
                F.filename = "sequtils.nim";
                iHEX60gensym153_553653166 = addInt(iHEX60gensym153_553653166, 1);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665432 += 1;
                if (!(((HEX3Atmp_553653163).length == L_553665433))) {
                F.line = 254;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
      };
      Temporary50.funcTypes = nimCopy(null, resultHEX60gensym153_553653190, NTI553650670);
      var Temporary56 = result_553650822;
      if (ConstSet309[Temporary56.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcReturnType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary56.kind, NTI553648176)); }
      F.line = 485;
      F.filename = "lisp.nim";
      var Temporary57 = n_p0;
      if (ConstSet310[Temporary57.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcReturnType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary57.kind, NTI553648176)); }
      Temporary56.funcReturnType = copyTree__lisp_u2692(Temporary57.funcReturnType);
      var Temporary58 = result_553650822;
      if (ConstSet311[Temporary58.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary58.kind, NTI553648176)); }
      F.line = 486;
      var Temporary59 = n_p0;
      if (ConstSet312[Temporary59.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary59.kind, NTI553648176)); }
      Temporary58.funcBody = copyTree__lisp_u2692(Temporary59.funcBody);
        var Temporary60 = n_p0;
        if (ConstSet313[Temporary60.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary60.kind, NTI553648176)); }
      if (!((Temporary60.funcObj == null))) {
      var Temporary61 = result_553650822;
      if (ConstSet314[Temporary61.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary61.kind, NTI553648176)); }
      F.line = 488;
      var Temporary62 = n_p0;
      if (ConstSet315[Temporary62.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary62.kind, NTI553648176)); }
      Temporary61.funcObj = Temporary62.funcObj;
      }
      
      break;
    case 11:
      F.line = 491;
      result_553650822 = {kind: 11, templateParams: [], templateBody: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary63 = result_553650822;
      if (ConstSet316[Temporary63.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary63.kind, NTI553648176)); }
      F.line = 492;
      var Temporary64 = n_p0;
      if (ConstSet317[Temporary64.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary64.kind, NTI553648176)); }
      Temporary63.templateParams = nimCopy(null, Temporary64.templateParams, NTI553648238);
      var Temporary65 = result_553650822;
      if (ConstSet318[Temporary65.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary65.kind, NTI553648176)); }
      F.line = 493;
      var Temporary66 = n_p0;
      if (ConstSet319[Temporary66.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary66.kind, NTI553648176)); }
      Temporary65.templateBody = copyTree__lisp_u2692(Temporary66.templateBody);
      break;
    case 6:
      F.line = 495;
      result_553650822 = {kind: 6, objectTypeFields: ({data: [], counter: 0}), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary67 = result_553650822;
      if (ConstSet320[Temporary67.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary67.kind, NTI553648176)); }
      F.line = 496;
      F.line = 498;
      var collectResult_553653202 = [initTable__lisp_u2737(32)];
      Label68: {
        F.line = 497;
        var k_553653235 = [];
        F.line = 497;
        var v_553653236 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665436 = ({data: [], counter: 0});
        F.line = 497;
        F.filename = "lisp.nim";
        var Temporary69 = n_p0;
        if (ConstSet321[Temporary69.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary69.kind, NTI553648176)); }
        colontmp__553665436 = nimCopy(colontmp__553665436, Temporary69.objectTypeFields, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665437 = len__lisp_u498(colontmp__553665436);
        Label70: {
          F.line = 706;
          var h_553665439 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665440 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665440 = (colontmp__553665436.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665441 = 0;
          Label71: {
            F.line = 97;
              Label72: while (true) {
              if (!(res_553665441 <= colontmp__553665440)) break Label72;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665439 = res_553665441;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665436.data[chckIndx(h_553665439, 0, (colontmp__553665436.data).length - 1)].Field0)) {
                F.line = 497;
                F.filename = "lisp.nim";
                k_553653235 = colontmp__553665436.data[chckIndx(h_553665439, 0, (colontmp__553665436.data).length - 1)].Field1;
                F.line = 497;
                v_553653236 = colontmp__553665436.data[chckIndx(h_553665439, 0, (colontmp__553665436.data).length - 1)].Field2;
                F.line = 326;
                F.filename = "sugar.nim";
                HEX5BHEX5DHEX3D__lisp_u2797(collectResult_553653202[0], k_553653235, copyTree__lisp_u2692(v_553653236));
                if (!((len__lisp_u498(colontmp__553665436) == L_553665437))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665441 = addInt(res_553665441, 1);
              }
          };
        };
      };
      Temporary67.objectTypeFields = nimCopy(Temporary67.objectTypeFields, collectResult_553653202[0], NTI553648199);
      break;
    case 8:
      F.line = 500;
      F.filename = "lisp.nim";
      result_553650822 = {kind: 8, objectType: null, objectFields: ({data: [], counter: 0}), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary73 = result_553650822;
      if (ConstSet322[Temporary73.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary73.kind, NTI553648176)); }
      F.line = 501;
      var Temporary74 = n_p0;
      if (ConstSet323[Temporary74.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary74.kind, NTI553648176)); }
      Temporary73.objectType = copyTree__lisp_u2692(Temporary74.objectType);
      var Temporary75 = result_553650822;
      if (ConstSet324[Temporary75.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary75.kind, NTI553648176)); }
      F.line = 502;
      F.line = 504;
      var collectResult_553653279 = [initTable__lisp_u2737(32)];
      Label76: {
        F.line = 503;
        var k_553653312 = [];
        F.line = 503;
        var v_553653313 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665444 = ({data: [], counter: 0});
        F.line = 503;
        F.filename = "lisp.nim";
        var Temporary77 = n_p0;
        if (ConstSet325[Temporary77.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary77.kind, NTI553648176)); }
        colontmp__553665444 = nimCopy(colontmp__553665444, Temporary77.objectFields, NTI553648199);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665445 = len__lisp_u498(colontmp__553665444);
        Label78: {
          F.line = 706;
          var h_553665447 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665448 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665448 = (colontmp__553665444.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665449 = 0;
          Label79: {
            F.line = 97;
              Label80: while (true) {
              if (!(res_553665449 <= colontmp__553665448)) break Label80;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665447 = res_553665449;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665444.data[chckIndx(h_553665447, 0, (colontmp__553665444.data).length - 1)].Field0)) {
                F.line = 503;
                F.filename = "lisp.nim";
                k_553653312 = colontmp__553665444.data[chckIndx(h_553665447, 0, (colontmp__553665444.data).length - 1)].Field1;
                F.line = 503;
                v_553653313 = colontmp__553665444.data[chckIndx(h_553665447, 0, (colontmp__553665444.data).length - 1)].Field2;
                F.line = 326;
                F.filename = "sugar.nim";
                HEX5BHEX5DHEX3D__lisp_u2797(collectResult_553653279[0], k_553653312, copyTree__lisp_u2692(v_553653313));
                if (!((len__lisp_u498(colontmp__553665444) == L_553665445))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665449 = addInt(res_553665449, 1);
              }
          };
        };
      };
      Temporary75.objectFields = nimCopy(Temporary75.objectFields, collectResult_553653279[0], NTI553648199);
      break;
    }
    F.line = 506;
    F.filename = "lisp.nim";
    result_553650822.line = n_p0.line;
    F.line = 507;
    result_553650822.tags = nimCopy(result_553650822.tags, n_p0.tags, NTI553648191);
  framePtr = F.prev;

  return result_553650822;

}

function contains__lisp_u8576(t_p0, key_p1) {
  var result_553656709 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 381;
    F.filename = "tables.nim";
    result_553656709 = hasKey__lisp_u1648(t_p0, key_p1);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_553656709;

}

function convertValueToType__lisp_u8486(val_p0, typ_p1) {
        var Temporary2;
              var Temporary5;
              var Temporary6;
        var Temporary8;
        var Temporary12;
      var Temporary13;

  var result_553656617 = null;

  var F = {procname: "lisp.convertValueToType", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!((val_p0 == null)))) {
    F.line = 953;
    F.filename = "lisp.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(953, 3) `not isNil(val)` "));
    }
    
    if (!(!((typ_p1 == null)))) {
    F.line = 954;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(954, 3) `not isNil(typ)` "));
    }
    
    if (!(!((!((val_p0.kind == 16)) && (typ_p1.kind == 15))))) {
    F.line = 282;
    var inst_553656643 = {Field0: [108,105,115,112,46,110,105,109], Field1: 956, Field2: 5};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656643.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(val_p0.line),[41,58,32,85,110,117,115,101,100,32,40,110,111,110,45,118,111,105,100,41,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,100,105,115,99,97,114,100,101,100,32,109,97,110,117,97,108,108,121,46]));
    }
    
    if (!(canConvertToType__lisp_u8439(val_p0, typ_p1))) {
    F.line = 282;
    var inst_553656648 = {Field0: [108,105,115,112,46,110,105,109], Field1: 959, Field2: 5};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656648.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(val_p0.line),[41,58,32],([67,97,110,39,116,32,99,111,110,118,101,114,116,32,118,97,108,117,101,32,102,114,111,109,32,116,121,112,101,32]).concat(HEX24__lisp_u6182(getType__lisp_u8338(val_p0)),[32,116,111,32,116,121,112,101,32],HEX24__lisp_u6182(typ_p1),[58,32],reprAny(val_p0, null, NTI553648177))));
    }
    
    F.line = 962;
    switch (typ_p1.kind) {
    case 7:
      F.line = 965;
      result_553656617 = copyTree__lisp_u2692(val_p0);
      F.line = 966;
      result_553656617.enumType = typ_p1;
      break;
    case 1:
      F.line = 969;
      result_553656617 = {kind: 1, listType: typ_p1, kids: [], line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label1: {
        F.line = 970;
        var k_553656652 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665459 = [];
        F.line = 970;
        F.filename = "lisp.nim";
        var Temporary2 = val_p0;
        if (ConstSet340[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
        colontmp__553665459 = Temporary2.kids;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665460 = 0;
        F.line = 250;
        var L_553665461 = (colontmp__553665459).length;
        Label3: {
          F.line = 251;
            Label4: while (true) {
            if (!(i_553665460 < L_553665461)) break Label4;
              F.line = 970;
              F.filename = "lisp.nim";
              k_553656652 = colontmp__553665459[chckIndx(i_553665460, 0, (colontmp__553665459).length - 1)];
              F.line = 971;
              var Temporary5 = result_553656617;
              if (ConstSet341[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
              var Temporary6 = typ_p1;
              if (ConstSet342[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'listType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
              Temporary5.kids.push(convertValueToType__lisp_u8486(k_553656652, Temporary6.listType));;
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665460 += 1;
              if (!(((colontmp__553665459).length == L_553665461))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 12:
      F.line = 974;
      F.filename = "lisp.nim";
      var newTable_553656659 = [({data: [], counter: 0})];
      Label7: {
        F.line = 975;
        var k_553656664 = null;
        F.line = 975;
        var v_553656665 = null;
        F.line = 680;
        F.filename = "tables.nim";
        var colontmp__553665464 = ({data: [], counter: 0});
        F.line = 975;
        F.filename = "lisp.nim";
        var Temporary8 = val_p0;
        if (ConstSet343[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
        colontmp__553665464 = nimCopy(colontmp__553665464, Temporary8.tableVal, NTI553648229);
        F.line = 705;
        F.filename = "tables.nim";
        var L_553665465 = len__lisp_u1038(colontmp__553665464);
        Label9: {
          F.line = 706;
          var h_553665467 = 0;
          F.line = 81;
          F.filename = "iterators_1.nim";
          var colontmp__553665468 = 0;
          F.line = 706;
          F.filename = "tables.nim";
          colontmp__553665468 = (colontmp__553665464.data).length - 1;
          F.line = 96;
          F.filename = "iterators_1.nim";
          var res_553665469 = 0;
          Label10: {
            F.line = 97;
              Label11: while (true) {
              if (!(res_553665469 <= colontmp__553665468)) break Label11;
                F.line = 706;
                F.filename = "tables.nim";
                h_553665467 = res_553665469;
                if (isFilled__pureZcollectionsZtables_u31(colontmp__553665464.data[chckIndx(h_553665467, 0, (colontmp__553665464.data).length - 1)].Field0)) {
                F.line = 975;
                F.filename = "lisp.nim";
                k_553656664 = colontmp__553665464.data[chckIndx(h_553665467, 0, (colontmp__553665464.data).length - 1)].Field1;
                F.line = 975;
                v_553656665 = colontmp__553665464.data[chckIndx(h_553665467, 0, (colontmp__553665464.data).length - 1)].Field2;
                if (!(!(contains__lisp_u8576(newTable_553656659[0], k_553656664)))) {
                F.line = 976;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(976, 7) `not contains(newTable, k)` "));
                }
                
                F.line = 977;
                HEX5BHEX5DHEX3D__lisp_u4056(newTable_553656659[0], k_553656664, v_553656665);
                if (!((len__lisp_u1038(colontmp__553665464) == L_553665465))) {
                F.line = 709;
                F.filename = "tables.nim";
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(709, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 102;
                F.filename = "iterators_1.nim";
                res_553665469 = addInt(res_553665469, 1);
              }
          };
        };
      };
      F.line = 978;
      F.filename = "lisp.nim";
      result_553656617 = {kind: 4, tableVal: nimCopy(null, newTable_553656659[0], NTI553648229), tableType: typ_p1, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 14:
      F.line = 981;
      result_553656617 = val_p0;
      break;
    case 17:
        var Temporary12 = val_p0;
        if (ConstSet344[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI553648176)); }
      if (!((0 < len__lisp_u498(Temporary12.classObjMethods)))) {
      F.line = 984;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(984, 5) `\x0A0 < len(val.classObjMethods)` "));
      }
      
      F.line = 986;
      result_553656617 = copyTree__lisp_u2692(val_p0);
      var Temporary13 = result_553656617;
      if (ConstSet345[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI553648176)); }
      F.line = 988;
      Temporary13.classObjType = typ_p1;
      break;
    default: 
      if (!(HEX3DHEX3D__lisp_u1499(typ_p1, getType__lisp_u8338(val_p0)))) {
      F.line = 282;
      var inst_553656827 = {Field0: [108,105,115,112,46,110,105,109], Field1: 991, Field2: 7};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656827.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(val_p0.line),[41,58,32,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32],HEX24__lisp_u6182(typ_p1)));
      }
      
      F.line = 992;
      result_553656617 = val_p0;
      break;
    }
  framePtr = F.prev;

  return result_553656617;

}

function ast__lisp_u2683(b_p0) {
  var result_553650813 = null;

  var F = {procname: "lisp.ast", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 402;
    F.filename = "lisp.nim";
    result_553650813 = {kind: 9, atomicKind: 2, boolean: b_p0, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, num: 0.0, str: [], sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
  framePtr = F.prev;

  return result_553650813;

}

function astList__lisp_u2689(nodes_p0) {
  var result_553650819 = null;

  var F = {procname: "lisp.astList", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 408;
    F.filename = "lisp.nim";
    result_553650819 = {kind: 1, kids: nimCopy(null, nodes_p0, NTI553649984), listType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
  framePtr = F.prev;

  return result_553650819;

}

function HEX26__lisp_u9811(x_p0, y_p1) {
  var result_553657943 = [];

  var F = {procname: "&.&", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    F.line = 1530;
    F.filename = "system.nim";
    result_553657943 = new Array(chckRange(addInt((x_p0).length, (y_p1).length), 0, 2147483647)); for (var i = 0 ; i < chckRange(addInt((x_p0).length, (y_p1).length), 0, 2147483647) ; ++i) { result_553657943[i] = null; }    Label1: {
      F.line = 1531;
      var i_553657961 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665590 = 0;
      F.line = 1531;
      F.filename = "system.nim";
      colontmp__553665590 = subInt((x_p0).length, 1);
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665591 = 0;
      Label2: {
        F.line = 97;
          Label3: while (true) {
          if (!(res_553665591 <= colontmp__553665590)) break Label3;
            F.line = 1531;
            F.filename = "system.nim";
            i_553657961 = res_553665591;
            F.line = 1532;
            result_553657943[chckIndx(i_553657961, 0, (result_553657943).length - 1)] = x_p0[chckIndx(i_553657961, 0, (x_p0).length - 1)];
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665591 = addInt(res_553665591, 1);
          }
      };
    };
    Label4: {
      F.line = 1533;
      F.filename = "system.nim";
      var i_553657969 = 0;
      F.line = 81;
      F.filename = "iterators_1.nim";
      var colontmp__553665594 = 0;
      F.line = 1533;
      F.filename = "system.nim";
      colontmp__553665594 = subInt((y_p1).length, 1);
      F.line = 96;
      F.filename = "iterators_1.nim";
      var res_553665595 = 0;
      Label5: {
        F.line = 97;
          Label6: while (true) {
          if (!(res_553665595 <= colontmp__553665594)) break Label6;
            F.line = 1533;
            F.filename = "system.nim";
            i_553657969 = res_553665595;
            F.line = 1534;
            result_553657943[chckIndx(addInt(i_553657969, (x_p0).length), 0, (result_553657943).length - 1)] = y_p1[chckIndx(i_553657969, 0, (y_p1).length - 1)];
            F.line = 102;
            F.filename = "iterators_1.nim";
            res_553665595 = addInt(res_553665595, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_553657943;

}

function ast__lisp_u2661(m_p0) {
  var result_553650791 = null;

  var F = {procname: "lisp.ast", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 396;
    F.filename = "lisp.nim";
    result_553650791 = {kind: 3, keyword: m_p0, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
  framePtr = F.prev;

  return result_553650791;

}

function isNimException__system_u2017() {
    return lastJSError && lastJSError.m_type;

  
}

function getBool__lisp_u8125(n_p0) {
      var Temporary1;
    var Temporary2;
    var Temporary3;

  var result_553656255 = false;

  var F = {procname: "lisp.getBool", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 823;
    F.filename = "lisp.nim";
    F.line = 798;
    var nHEX60gensym349_553656258 = n_p0;
    F.line = 799;
    var kindHEX60gensym349_553656259 = 2;
    F.line = 791;
    var nHEX60gensym350_553656262 = nHEX60gensym349_553656258;
    F.line = 792;
    var kindHEX60gensym350_553656263 = 9;
    F.line = 786;
    var nHEX60gensym351_553656265 = nHEX60gensym350_553656262;
    if (!(!((nHEX60gensym351_553656265 == null)))) {
    F.line = 282;
    var inst_553656270 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656270.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym351_553656265.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
    }
    
    if (!((nHEX60gensym350_553656262.kind == kindHEX60gensym350_553656263))) {
    F.line = 282;
    var inst_553656285 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656285.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym350_553656262.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym350_553656263, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym350_553656262.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym350_553656262)));
    }
    
      var Temporary1 = nHEX60gensym349_553656258;
      if (ConstSet412[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    if (!((Temporary1.atomicKind == kindHEX60gensym349_553656259))) {
    F.line = 282;
    var inst_553656297 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
    F.line = 283;
    var Temporary2 = nHEX60gensym349_553656258;
    if (ConstSet413[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553656297.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym349_553656258.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym349_553656259, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary2.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym349_553656258)));
    }
    
    var Temporary3 = n_p0;
    if (ConstSet414[Temporary3.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary3.atomicKind, NTI553648175)); }
    result_553656255 = Temporary3.boolean;
  framePtr = F.prev;

  return result_553656255;

}

function HEX5BHEX5D__lisp_u10516(s_p0, i_p1) {
  var result_553658648 = null;
  var result_553658648_Idx = 0;

  var F = {procname: "[].[]", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "indices.nim";
    result_553658648 = s_p0; result_553658648_Idx = chckIndx(subInt((s_p0).length, i_p1), 0, (s_p0).length - 1);
  framePtr = F.prev;

  return [result_553658648, result_553658648_Idx];

}

function delete__lisp_u10553(x_p0, x_p0_Idx, i_p1) {
  var F = {procname: "delete.delete", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
    if (((x_p0[x_p0_Idx]).length - 1 < i_p1)) {
    F.line = 2032;
    F.filename = "system.nim";
    raiseException({message: ([105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,39]).concat(HEX24__systemZdollars_u8(i_p1),[39,32,60,32,39],HEX24__systemZdollars_u8((x_p0[x_p0_Idx]).length),[39,32,102,97,105,108,101,100]), m_type: NTI134217749, parent: null, name: null, trace: [], up: null}, "IndexDefect");
    }
    
    F.line = 2043;
    x_p0[x_p0_Idx].splice(i_p1, 1);
  framePtr = F.prev;

  
}

function ast__lisp_u2680(num_p0) {
  var result_553650810 = null;

  var F = {procname: "lisp.ast", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 399;
    F.filename = "lisp.nim";
    result_553650810 = {kind: 9, atomicKind: 0, num: num_p0, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
  framePtr = F.prev;

  return result_553650810;

}

function isKind__lisp_u288(n_p0, at_p1) {
    var Temporary1;

  var result_553648419 = false;

  var F = {procname: "lisp.isKind", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 289;
    F.filename = "lisp.nim";
    result_553648419 = false;
    if ((n_p0.kind == 9)) {
    F.line = 291;
    var Temporary1 = n_p0;
    if (ConstSet424[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    result_553648419 = (Temporary1.atomicKind == 1);
    }
    
  framePtr = F.prev;

  return result_553648419;

}

function HEX2BHEX3D__pureZstrutils_u2340(x_p0, x_p0_Idx, y_p1) {
  var F = {procname: "+=.+=", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/arithmetics.nim", line: 0};
  framePtr = F;
    F.line = 330;
    F.filename = "arithmetics.nim";
    x_p0[x_p0_Idx] = (x_p0[x_p0_Idx] + y_p1);
  framePtr = F.prev;

  
}

function HEX2DHEX3D__lisp_u11428(x_p0, x_p0_Idx, y_p1) {
  var F = {procname: "-=.-=", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/arithmetics.nim", line: 0};
  framePtr = F;
    F.line = 335;
    F.filename = "arithmetics.nim";
    x_p0[x_p0_Idx] = (x_p0[x_p0_Idx] - y_p1);
  framePtr = F.prev;

  
}

function ast__lisp_u2686(s_p0) {
  var result_553650816 = null;

  var F = {procname: "lisp.ast", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 405;
    F.filename = "lisp.nim";
    result_553650816 = {kind: 9, atomicKind: 1, str: nimCopy(null, s_p0, NTI33554449), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, num: 0.0, boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
  framePtr = F.prev;

  return result_553650816;

}

function find__lisp_u12856(a_p0, item_p1) {
  var result_553660989 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1760;
    F.filename = "system.nim";
    result_553660989 = 0;
    Label1: {
      F.line = 1761;
      var i_553660993 = 0;
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553665604 = 0;
      Label2: {
        F.line = 19;
          Label3: while (true) {
          if (!(i_553665604 < (a_p0).length)) break Label3;
            F.line = 1761;
            F.filename = "system.nim";
            i_553660993 = a_p0[chckIndx(i_553665604, 0, (a_p0).length - 1)];
            if ((i_553660993 == item_p1)) {
            F.line = 1762;
            break BeforeRet;
            }
            
            F.line = 1763;
            result_553660989 = addInt(result_553660989, 1);
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665604 += 1;
          }
      };
    };
    F.line = 1764;
    F.filename = "system.nim";
    result_553660989 = (-1);
  };
  framePtr = F.prev;

  return result_553660989;

}

function contains__lisp_u12851(a_p0, item_p1) {
  var result_553660983 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1778;
    F.filename = "system.nim";
    result_553660983 = (0 <= find__lisp_u12856(a_p0, item_p1));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_553660983;

}

function evaluateKeywordCall__lisp_u9367(s_p0, n_p1) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
    var Temporary4;
    var Temporary5;
    var Temporary6;
    var Temporary7;
        var Temporary8;
        var Temporary9;
      var Temporary10;
        var Temporary11;
        var Temporary12;
      var Temporary13;
        var Temporary14;
        var Temporary15;
        var Temporary16;
        var Temporary17;
      var Temporary18;
                var Temporary22;
              var Temporary23;
              var Temporary24;
                var Temporary26;
                      var Temporary29;
                var Temporary30;
              var Temporary34;
                var Temporary38;
              var Temporary39;
                var Temporary40;
                var Temporary41;
              var Temporary42;
      var Temporary44;
              var Temporary48;
              var Temporary49;
        var Temporary50;
      var Temporary51;
        var Temporary52;
      var Temporary53;
      var Temporary54;
      var Temporary55;
        var Temporary56;
      var Temporary57;
        var Temporary58;
      var Temporary59;
      var Temporary60;
      var Temporary61;
        var Temporary62;
      var Temporary63;
        var Temporary64;
      var Temporary65;
      var Temporary66;
      var Temporary67;
        var Temporary68;
      var Temporary69;
        var Temporary70;
      var Temporary71;
      var Temporary72;
      var Temporary73;
              var Temporary77;
        var Temporary79;
        var Temporary83;
                var Temporary87;
      var Temporary88;
              var Temporary92;
        var Temporary94;
                var Temporary100;
                var Temporary101;
                var Temporary102;
                var Temporary103;
                  var Temporary104;
      var Temporary105;
      var Temporary106;
        var Temporary107;
      var Temporary108;
      var Temporary109;
        var Temporary110;
      var Temporary111;
                var Temporary115;
              var Temporary116;
              var Temporary117;
              var Temporary118;
        var Temporary119;
      var Temporary120;
                var Temporary124;
              var Temporary125;
              var Temporary126;
              var Temporary127;
              var Temporary131;
              var Temporary135;
      var Temporary136;
      var Temporary137;
      var Temporary138;
        var Temporary140;
        var Temporary141;
              var Temporary144;
        var Temporary145;
      var Temporary146;
                var Temporary150;
              var Temporary151;
              var Temporary152;
              var Temporary153;
              var Temporary154;
      var Temporary155;
              var Temporary159;
                  var Temporary160;
                  var Temporary161;
                  var Temporary162;
                var Temporary163;
                var Temporary164;
                var Temporary165;
                  var Temporary166;
                  var Temporary167;
                  var Temporary168;
                var Temporary169;
                var Temporary170;
                var Temporary171;
                var Temporary172;
      var Temporary173;
      var Temporary174;
        var Temporary176;
                var Temporary179;
              var Temporary180;
              var Temporary181;
                var Temporary182;
                var Temporary183;
              var Temporary184;
              var Temporary185;
              var Temporary186;
              var Temporary187;
              var Temporary188;
      var Temporary189;
      var Temporary190;
      var Temporary191;
      var Temporary192;
                var Temporary196;
              var Temporary197;
              var Temporary198;
              var Temporary199;
              var Temporary200;
              var Temporary201;
        var Temporary206;
      var Temporary207;
      var Temporary208;
        var Temporary210;
              var Temporary213;
                  var Temporary215;
                var Temporary216;
                var Temporary217;
                var Temporary218;
                var Temporary219;
                var Temporary220;
      var Temporary222;
        var Temporary223;
        var Temporary224;
      var Temporary225;
      var Temporary226;
      var Temporary227;
        var Temporary228;
        var Temporary230;
                var Temporary233;
              var Temporary234;
                var Temporary235;
              var Temporary236;
      var Temporary237;
      var Temporary238;
      var Temporary239;
                var Temporary247;
              var Temporary248;
      var Temporary249;
        var Temporary250;
                var Temporary254;
                var Temporary255;
              var Temporary259;
              var Temporary260;

  var result_553657498 = null;

  var F = {procname: "lisp.evaluateKeywordCall", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!((n_p1.kind == 1))) {
    F.line = 282;
    F.filename = "lisp.nim";
    var inst_553657505 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1104, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657505.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
    }
    
      var Temporary1 = n_p1;
      if (ConstSet355[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    if (!((0 < (Temporary1.kids).length))) {
    F.line = 282;
    var inst_553657511 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1105, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657511.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
    }
    
      var Temporary2 = n_p1;
      if (ConstSet356[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
    if (!(((Temporary3 = Temporary2.kids, Temporary3)[chckIndx(0, 0, (Temporary3).length - 1)].kind == 3))) {
    F.line = 282;
    var inst_553657518 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1106, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657518.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
    }
    
    F.line = 1108;
    var Temporary4 = n_p1;
    if (ConstSet357[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
    var args_553657551 = HEX5BHEX5D__lisp_u9400(Temporary4.kids, HEX2EHEX2E__stdZenumutils_u105(1, 1));
    F.line = 1110;
    var Temporary5 = n_p1;
    if (ConstSet359[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
    var Temporary7 = (Temporary6 = Temporary5.kids, Temporary6)[chckIndx(0, 0, (Temporary6).length - 1)];
    if (ConstSet358[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
    switch (Temporary7.keyword) {
    case 54:
      if (!(((args_553657551).length == 0))) {
      F.line = 282;
      var inst_553657557 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1113, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657557.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1114;
      raiseException({m_type: NTI553648185, parent: null, name: null, message: [], trace: [], up: null}, "Continue:ObjectType");
      break;
    case 55:
      if (!(((args_553657551).length == 0))) {
      F.line = 282;
      var inst_553657563 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1117, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657563.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1118;
      raiseException({m_type: NTI553648184, parent: null, name: null, message: [], trace: [], up: null}, "Break:ObjectType");
      break;
    case 53:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553657569 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1121, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657569.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1123;
      var table_553657570 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1124;
      var key_553657571 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym513_553657574 = table_553657570;
      F.line = 792;
      var kindHEX60gensym513_553657575 = 4;
      F.line = 786;
      var nHEX60gensym514_553657577 = nHEX60gensym513_553657574;
      if (!(!((nHEX60gensym514_553657577 == null)))) {
      F.line = 282;
      var inst_553657582 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657582.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym514_553657577.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym513_553657574.kind == kindHEX60gensym513_553657575))) {
      F.line = 282;
      var inst_553657597 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657597.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym513_553657574.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym513_553657575, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym513_553657574.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym513_553657574)));
      }
      
        var Temporary8 = table_553657570;
        if (ConstSet361[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
        var Temporary9 = Temporary8.tableType;
        if (ConstSet360[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
      if (!(canConvertToType__lisp_u8439(key_553657571, Temporary9.tableKeyType))) {
      F.line = 282;
      var inst_553657599 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1127, Field2: 7};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657599.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(key_553657571.line),[41,58,32,73,110,118,97,108,105,100,32,107,101,121,32,116,121,112,101]));
      }
      
      F.line = 1129;
      var Temporary10 = table_553657570;
      if (ConstSet362[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
      result_553657498 = ast__lisp_u2683(hasKey__lisp_u1648(Temporary10.tableVal, key_553657571));
      break;
    case 52:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553657646 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1132, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657646.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1134;
      var table_553657647 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1135;
      var key_553657648 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym520_553657651 = table_553657647;
      F.line = 792;
      var kindHEX60gensym520_553657652 = 4;
      F.line = 786;
      var nHEX60gensym521_553657654 = nHEX60gensym520_553657651;
      if (!(!((nHEX60gensym521_553657654 == null)))) {
      F.line = 282;
      var inst_553657659 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657659.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym521_553657654.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym520_553657651.kind == kindHEX60gensym520_553657652))) {
      F.line = 282;
      var inst_553657674 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657674.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym520_553657651.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym520_553657652, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym520_553657651.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym520_553657651)));
      }
      
        var Temporary11 = table_553657647;
        if (ConstSet364[Temporary11.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary11.kind, NTI553648176)); }
        var Temporary12 = Temporary11.tableType;
        if (ConstSet363[Temporary12.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary12.kind, NTI553648176)); }
      if (!(canConvertToType__lisp_u8439(key_553657648, Temporary12.tableKeyType))) {
      F.line = 282;
      var inst_553657676 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1138, Field2: 7};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657676.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(key_553657648.line),[41,58,32,73,110,118,97,108,105,100,32,107,101,121,32,116,121,112,101]));
      }
      
      F.line = 1140;
      var Temporary13 = table_553657647;
      if (ConstSet365[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI553648176)); }
      result_553657498 = getOrDefault__lisp_u1925(Temporary13.tableVal, key_553657648);
      if (!(!(HEX3DHEX3D__lisp_u1499(result_553657498, null)))) {
      F.line = 282;
      var inst_553657745 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1142, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657745.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,75,101,121,32,110,111,116,32,102,111,117,110,100,58,32],HEX24__lisp_u6182(key_553657648)));
      }
      
      break;
    case 51:
      if (!(((args_553657551).length == 3))) {
      F.line = 282;
      var inst_553657751 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1145, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657751.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1147;
      var table_553657752 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1148;
      var key_553657753 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 1149;
      var val_553657754 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(2, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym529_553657757 = table_553657752;
      F.line = 792;
      var kindHEX60gensym529_553657758 = 4;
      F.line = 786;
      var nHEX60gensym530_553657760 = nHEX60gensym529_553657757;
      if (!(!((nHEX60gensym530_553657760 == null)))) {
      F.line = 282;
      var inst_553657765 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657765.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym530_553657760.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym529_553657757.kind == kindHEX60gensym529_553657758))) {
      F.line = 282;
      var inst_553657780 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657780.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym529_553657757.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym529_553657758, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym529_553657757.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym529_553657757)));
      }
      
        var Temporary14 = table_553657752;
        if (ConstSet367[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648176)); }
        var Temporary15 = Temporary14.tableType;
        if (ConstSet366[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI553648176)); }
      if (!(canConvertToType__lisp_u8439(key_553657753, Temporary15.tableKeyType))) {
      F.line = 282;
      var inst_553657782 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1152, Field2: 7};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657782.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(key_553657753.line),[41,58,32,73,110,118,97,108,105,100,32,107,101,121,32,116,121,112,101]));
      }
      
        var Temporary16 = table_553657752;
        if (ConstSet369[Temporary16.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary16.kind, NTI553648176)); }
        var Temporary17 = Temporary16.tableType;
        if (ConstSet368[Temporary17.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary17.kind, NTI553648176)); }
      if (!(canConvertToType__lisp_u8439(val_553657754, Temporary17.tableValueType))) {
      F.line = 282;
      var inst_553657784 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1153, Field2: 7};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657784.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(val_553657754.line),[41,58,32,73,110,118,97,108,105,100,32,118,97,108,117,101,32,116,121,112,101]));
      }
      
      F.line = 1155;
      var Temporary18 = table_553657752;
      if (ConstSet370[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI553648176)); }
      HEX5BHEX5DHEX3D__lisp_u4056(Temporary18.tableVal, key_553657753, val_553657754);
      F.line = 1157;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 50:
      if (!((2 <= (args_553657551).length))) {
      F.line = 282;
      var inst_553657832 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1160, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657832.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1162;
      var compared_553657833 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      Label19: {
        F.line = 1164;
        var b_553657852 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665477 = [];
        F.line = 1164;
        F.filename = "lisp.nim";
        colontmp__553665477 = HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(1, 1));
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665478 = 0;
        F.line = 250;
        var L_553665479 = (colontmp__553665477).length;
        Label20: {
          F.line = 251;
            Label21: while (true) {
            if (!(i_553665478 < L_553665479)) break Label21;
              F.line = 1164;
              F.filename = "lisp.nim";
              b_553657852 = colontmp__553665477[chckIndx(i_553665478, 0, (colontmp__553665477).length - 1)];
              F.line = 791;
              var nHEX60gensym540_553657855 = b_553657852;
              F.line = 792;
              var kindHEX60gensym540_553657856 = 1;
              F.line = 786;
              var nHEX60gensym541_553657858 = nHEX60gensym540_553657855;
              if (!(!((nHEX60gensym541_553657858 == null)))) {
              F.line = 282;
              var inst_553657863 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657863.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym541_553657858.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym540_553657855.kind == kindHEX60gensym540_553657856))) {
              F.line = 282;
              var inst_553657878 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657878.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym540_553657855.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym540_553657856, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym540_553657855.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym540_553657855)));
              }
              
                var Temporary22 = b_553657852;
                if (ConstSet371[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI553648176)); }
              if (!((2 <= (Temporary22.kids).length))) {
              F.line = 282;
              var inst_553657884 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1166, Field2: 7};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657884.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(b_553657852.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
              }
              
              F.line = 1168;
              var Temporary23 = b_553657852;
              if (ConstSet372[Temporary23.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary23.kind, NTI553648176)); }
              var condition_553657885 = (Temporary24 = Temporary23.kids, Temporary24)[chckIndx(0, 0, (Temporary24).length - 1)];
              if ((condition_553657885.kind == 1)) {
              Label25: {
                F.line = 1171;
                var it_553657893 = null;
                F.line = 247;
                F.filename = "iterators.nim";
                var colontmp__553665473 = [];
                F.line = 1171;
                F.filename = "lisp.nim";
                var Temporary26 = condition_553657885;
                if (ConstSet373[Temporary26.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary26.kind, NTI553648176)); }
                colontmp__553665473 = Temporary26.kids;
                F.line = 249;
                F.filename = "iterators.nim";
                var i_553665474 = 0;
                F.line = 250;
                var L_553665475 = (colontmp__553665473).length;
                Label27: {
                  F.line = 251;
                    Label28: while (true) {
                    if (!(i_553665474 < L_553665475)) break Label28;
                      F.line = 1171;
                      F.filename = "lisp.nim";
                      it_553657893 = colontmp__553665473[chckIndx(i_553665474, 0, (colontmp__553665473).length - 1)];
                      F.line = 791;
                      var nHEX60gensym547_553657896 = it_553657893;
                      F.line = 792;
                      var kindHEX60gensym547_553657897 = 9;
                      F.line = 786;
                      var nHEX60gensym548_553657899 = nHEX60gensym547_553657896;
                      if (!(!((nHEX60gensym548_553657899 == null)))) {
                      F.line = 282;
                      var inst_553657904 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
                      F.line = 283;
                      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657904.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym548_553657899.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
                      }
                      
                      if (!((nHEX60gensym547_553657896.kind == kindHEX60gensym547_553657897))) {
                      F.line = 282;
                      var inst_553657919 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
                      F.line = 283;
                      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657919.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym547_553657896.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym547_553657897, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym547_553657896.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym547_553657896)));
                      }
                      
                      if (HEX3DHEX3D__lisp_u1499(it_553657893, compared_553657833)) {
                      F.line = 1174;
                      var Temporary29 = b_553657852;
                      if (ConstSet374[Temporary29.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary29.kind, NTI553648176)); }
                      result_553657498 = evaluate__lisp_u9364(s_p0, astList__lisp_u2689(HEX26__lisp_u9811([ast__lisp_u2661(8)], HEX5BHEX5D__lisp_u9400(Temporary29.kids, HEX2EHEX2E__stdZenumutils_u105(1, 1)))));
                      F.line = 1175;
                      break Label25;
                      }
                      
                      F.line = 13;
                      F.filename = "iterators.nim";
                      i_553665474 += 1;
                      if (!(((colontmp__553665473).length == L_553665475))) {
                      F.line = 254;
                      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                };
              };
              }
              else {
                F.line = 791;
                F.filename = "lisp.nim";
                var nHEX60gensym553_553657975 = condition_553657885;
                F.line = 792;
                var kindHEX60gensym553_553657976 = 9;
                F.line = 786;
                var nHEX60gensym554_553657978 = nHEX60gensym553_553657975;
                if (!(!((nHEX60gensym554_553657978 == null)))) {
                F.line = 282;
                var inst_553657983 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657983.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym554_553657978.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
                }
                
                if (!((nHEX60gensym553_553657975.kind == kindHEX60gensym553_553657976))) {
                F.line = 282;
                var inst_553657998 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553657998.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym553_553657975.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym553_553657976, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym553_553657975.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym553_553657975)));
                }
                
                if (HEX3DHEX3D__lisp_u1499(compared_553657833, condition_553657885)) {
                F.line = 1179;
                var Temporary30 = b_553657852;
                if (ConstSet375[Temporary30.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary30.kind, NTI553648176)); }
                result_553657498 = evaluate__lisp_u9364(s_p0, astList__lisp_u2689(HEX26__lisp_u9811([ast__lisp_u2661(8)], HEX5BHEX5D__lisp_u9400(Temporary30.kids, HEX2EHEX2E__stdZenumutils_u105(1, 1)))));
                }
                
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665478 += 1;
              if (!(((colontmp__553665477).length == L_553665479))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      if (!(!(HEX3DHEX3D__lisp_u1499(result_553657498, null)))) {
      F.line = 282;
      F.filename = "lisp.nim";
      var inst_553658023 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1181, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658023.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,78,111,32,109,97,116,99,104,105,110,103,32,99,97,115,101,32,98,114,97,110,99,104,32,102,111,117,110,100,32,102,111,114,58,32],HEX24__lisp_u6182(compared_553657833)));
      }
      
      break;
    case 49:
      if (!(((args_553657551).length == 1))) {
      F.line = 282;
      var inst_553658029 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1184, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658029.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1186;
      var valueType_553658030 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      if (!((ConstSet376[valueType_553658030.kind] != undefined))) {
      F.line = 282;
      var inst_553658036 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1187, Field2: 11};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658036.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(args_553657551[chckIndx(0, 0, (args_553657551).length - 1)].line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,116,121,112,101]));
      }
      
      F.line = 1189;
      result_553657498 = {kind: 13, arrayValueType: valueType_553658030, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null};
      break;
    case 48:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553658042 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1192, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658042.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1194;
      var keyType_553658043 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1195;
      var valueType_553658044 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      if (!((ConstSet377[keyType_553658043.kind] != undefined))) {
      F.line = 282;
      var inst_553658050 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1197, Field2: 11};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658050.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(args_553657551[chckIndx(0, 0, (args_553657551).length - 1)].line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,116,121,112,101]));
      }
      
      if (!((ConstSet378[valueType_553658044.kind] != undefined))) {
      F.line = 282;
      var inst_553658056 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1198, Field2: 11};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658056.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(args_553657551[chckIndx(1, 0, (args_553657551).length - 1)].line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,116,121,112,101]));
      }
      
      F.line = 1200;
      result_553657498 = {kind: 12, tableKeyType: keyType_553658043, tableValueType: valueType_553658044, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], arrayValueType: null};
      break;
    case 44:
      if (!((1 <= (args_553657551).length))) {
      F.line = 282;
      var inst_553658062 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1203, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658062.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1205;
      result_553657498 = {kind: 7, enumTypeValues: [], line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label31: {
        F.line = 1207;
        var a_553658066 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665482 = 0;
        F.line = 250;
        var L_553665483 = (args_553657551).length;
        Label32: {
          F.line = 251;
            Label33: while (true) {
            if (!(i_553665482 < L_553665483)) break Label33;
              F.line = 1207;
              F.filename = "lisp.nim";
              a_553658066 = args_553657551[chckIndx(i_553665482, 0, (args_553657551).length - 1)];
              F.line = 1208;
              var a_553658067 = evaluate__lisp_u9364(s_p0, a_553658066);
              F.line = 1209;
              var Temporary34 = result_553657498;
              if (ConstSet379[Temporary34.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'enumTypeValues\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary34.kind, NTI553648176)); }
              Temporary34.enumTypeValues.push(a_553658067);;
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665482 += 1;
              if (!(((args_553657551).length == L_553665483))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 46:
    case 47:
      if (true) {
      F.line = 282;
      F.filename = "lisp.nim";
      var inst_553658073 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1212, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658073.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),makeNimstrLit("): Except and finally blocks are not allowed outside of a try block")));
      }
      
      break;
    case 45:
      if (!((1 <= (args_553657551).length))) {
      F.line = 282;
      var inst_553658079 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1215, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658079.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1217;
      var body_553658084 = astList__lisp_u2689([ast__lisp_u2661(8)]);
      F.line = 1218;
      var exceptBlock_553658085 = null;
      F.line = 1219;
      var finallyBlock_553658086 = null;
      Label35: {
        F.line = 1221;
        var a_553658090 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665486 = 0;
        F.line = 250;
        var L_553665487 = (args_553657551).length;
        Label36: {
          F.line = 251;
            Label37: while (true) {
            if (!(i_553665486 < L_553665487)) break Label37;
              F.line = 1221;
              F.filename = "lisp.nim";
              a_553658090 = args_553657551[chckIndx(i_553665486, 0, (args_553657551).length - 1)];
              F.line = 1222;
              var didFind_553658091 = false;
              if ((a_553658090.kind == 1)) {
                var Temporary38 = a_553658090;
                if (ConstSet380[Temporary38.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary38.kind, NTI553648176)); }
              if (!((0 < (Temporary38.kids).length))) {
              F.line = 282;
              var inst_553658100 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1225, Field2: 9};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658100.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553658090.line),[41,58,32,69,109,112,116,121,32,108,105,115,116,32,105,115,32,105,110,118,97,108,105,100]));
              }
              
              F.line = 1226;
              var Temporary39 = HEX5BHEX5D__lisp_u8216(a_553658090, 0);
              if (ConstSet381[Temporary39.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'keyword\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary39.kind, NTI553648176)); }
              switch (Temporary39.keyword) {
              case 46:
                if (!(HEX3DHEX3D__lisp_u1499(exceptBlock_553658085, null))) {
                F.line = 282;
                var inst_553658102 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1228, Field2: 11};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658102.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553658090.line),[41,58,32,79,110,108,121,32,111,110,101,32,101,120,99,101,112,116,32,98,108,111,99,107,32,97,108,108,111,119,101,100]));
                }
                
                if (!(HEX3DHEX3D__lisp_u1499(finallyBlock_553658086, null))) {
                F.line = 282;
                var inst_553658104 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1229, Field2: 11};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658104.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553658090.line),[41,58,32,70,105,110,97,108,108,121,32,98,108,111,99,107,32,109,117,115,116,32,98,101,32,116,104,101,32,108,97,115,116,32,111,110,101]));
                }
                
                F.line = 1230;
                var Temporary40 = a_553658090;
                if (ConstSet382[Temporary40.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary40.kind, NTI553648176)); }
                exceptBlock_553658085 = astList__lisp_u2689(HEX26__lisp_u9811([ast__lisp_u2661(8)], HEX5BHEX5D__lisp_u9400(Temporary40.kids, HEX2EHEX2E__stdZenumutils_u105(1, 1))));
                F.line = 1231;
                didFind_553658091 = true;
                break;
              case 47:
                if (!(HEX3DHEX3D__lisp_u1499(finallyBlock_553658086, null))) {
                F.line = 282;
                var inst_553658129 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1233, Field2: 11};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658129.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553658090.line),[41,58,32,79,110,108,121,32,111,110,101,32,102,105,110,97,108,108,121,32,98,108,111,99,107,32,97,108,108,111,119,101,100]));
                }
                
                F.line = 1234;
                var Temporary41 = a_553658090;
                if (ConstSet383[Temporary41.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary41.kind, NTI553648176)); }
                finallyBlock_553658086 = astList__lisp_u2689(HEX26__lisp_u9811([ast__lisp_u2661(8)], HEX5BHEX5D__lisp_u9400(Temporary41.kids, HEX2EHEX2E__stdZenumutils_u105(1, 1))));
                F.line = 1235;
                didFind_553658091 = true;
                break;
              default: 
                break;
              }
              }
              
              if (!(didFind_553658091)) {
              if (!(HEX3DHEX3D__lisp_u1499(exceptBlock_553658085, null))) {
              F.line = 282;
              var inst_553658154 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1240, Field2: 9};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658154.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553658090.line),[41,58,32,69,120,99,101,112,116,32,98,108,111,99,107,32,109,117,115,116,32,98,101,32,100,101,99,108,97,114,101,100,32,97,102,116,101,114,32,116,104,101,32,98,111,100,121]));
              }
              
              if (!(HEX3DHEX3D__lisp_u1499(finallyBlock_553658086, null))) {
              F.line = 282;
              var inst_553658156 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1241, Field2: 9};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658156.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553658090.line),[41,58,32,70,105,110,97,108,108,121,32,98,108,111,99,107,32,109,117,115,116,32,98,101,32,100,101,99,108,97,114,101,100,32,97,102,116,101,114,32,116,104,101,32,98,111,100,121]));
              }
              
              F.line = 1242;
              var Temporary42 = body_553658084;
              if (ConstSet384[Temporary42.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary42.kind, NTI553648176)); }
              Temporary42.kids.push(a_553658090);;
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665486 += 1;
              if (!(((args_553657551).length == L_553665487))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 1244;
      F.filename = "lisp.nim";
++excHandler;
      try {
      F.line = 1245;
      result_553657498 = evaluate__lisp_u9364(s_p0, body_553658084);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      framePtr = F;
      if (lastJSError && (isObj(lastJSError.m_type, NTI553648183))) {
      F.line = 1248;
      reraiseException();
      }
      else       if (lastJSError && (isObj(lastJSError.m_type, NTI33555171))) {
      if (!(HEX3DHEX3D__lisp_u1499(exceptBlock_553658085, null))) {
      F.line = 1252;
      result_553657498 = evaluate__lisp_u9364(s_p0, exceptBlock_553658085);
      }
      else {
        F.line = 1254;
        reraiseException();
      }
      
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      framePtr = F;
      if (!(HEX3DHEX3D__lisp_u1499(finallyBlock_553658086, null))) {
      F.line = 1258;
      result_553657498 = evaluate__lisp_u9364(s_p0, finallyBlock_553658086);
      }
      
      }
      break;
    case 43:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553658165 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1261, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658165.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,100,100,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1263;
      var a_553658166 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1264;
      var b_553658167 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym592_553658170 = a_553658166;
      F.line = 792;
      var kindHEX60gensym592_553658171 = 1;
      F.line = 786;
      var nHEX60gensym593_553658173 = nHEX60gensym592_553658170;
      if (!(!((nHEX60gensym593_553658173 == null)))) {
      F.line = 282;
      var inst_553658178 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658178.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym593_553658173.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym592_553658170.kind == kindHEX60gensym592_553658171))) {
      F.line = 282;
      var inst_553658193 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658193.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym592_553658170.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym592_553658171, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym592_553658170.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym592_553658170)));
      }
      
      F.line = 1268;
      var Temporary44 = a_553658166;
      if (ConstSet385[Temporary44.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary44.kind, NTI553648176)); }
      Temporary44.kids.push(b_553658167);;
      F.line = 1270;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 56:
      if (!((2 <= (args_553657551).length))) {
      F.line = 282;
      var inst_553658202 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1273, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658202.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,106,111,105,110,45,108,105,115,116,115,32,116,97,107,101,115,32,97,116,32,108,101,97,115,116,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1275;
      result_553657498 = {kind: 1, kids: [], listType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label45: {
        F.line = 1277;
        var a_553658206 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665490 = 0;
        F.line = 250;
        var L_553665491 = (args_553657551).length;
        Label46: {
          F.line = 251;
            Label47: while (true) {
            if (!(i_553665490 < L_553665491)) break Label47;
              F.line = 1277;
              F.filename = "lisp.nim";
              a_553658206 = args_553657551[chckIndx(i_553665490, 0, (args_553657551).length - 1)];
              F.line = 1278;
              var a_553658207 = evaluate__lisp_u9364(s_p0, a_553658206);
              F.line = 791;
              var nHEX60gensym598_553658210 = a_553658207;
              F.line = 792;
              var kindHEX60gensym598_553658211 = 1;
              F.line = 786;
              var nHEX60gensym599_553658213 = nHEX60gensym598_553658210;
              if (!(!((nHEX60gensym599_553658213 == null)))) {
              F.line = 282;
              var inst_553658218 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658218.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym599_553658213.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym598_553658210.kind == kindHEX60gensym598_553658211))) {
              F.line = 282;
              var inst_553658233 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658233.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym598_553658210.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym598_553658211, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym598_553658210.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym598_553658210)));
              }
              
              F.line = 1280;
              var Temporary48 = result_553657498;
              if (ConstSet386[Temporary48.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary48.kind, NTI553648176)); }
              var Temporary49 = a_553658207;
              if (ConstSet387[Temporary49.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary49.kind, NTI553648176)); }
              add__lisp_u8865(Temporary48, "kids", Temporary49.kids);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665490 += 1;
              if (!(((args_553657551).length == L_553665491))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 42:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      F.filename = "lisp.nim";
      var inst_553658242 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1283, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658242.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,71,114,101,97,116,101,114,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1285;
      var a_553658243 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1286;
      var b_553658244 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 798;
      var nHEX60gensym603_553658247 = a_553658243;
      F.line = 799;
      var kindHEX60gensym603_553658248 = 0;
      F.line = 791;
      var nHEX60gensym604_553658251 = nHEX60gensym603_553658247;
      F.line = 792;
      var kindHEX60gensym604_553658252 = 9;
      F.line = 786;
      var nHEX60gensym605_553658254 = nHEX60gensym604_553658251;
      if (!(!((nHEX60gensym605_553658254 == null)))) {
      F.line = 282;
      var inst_553658259 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658259.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym605_553658254.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym604_553658251.kind == kindHEX60gensym604_553658252))) {
      F.line = 282;
      var inst_553658274 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658274.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym604_553658251.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym604_553658252, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym604_553658251.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym604_553658251)));
      }
      
        var Temporary50 = nHEX60gensym603_553658247;
        if (ConstSet388[Temporary50.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary50.kind, NTI553648176)); }
      if (!((Temporary50.atomicKind == kindHEX60gensym603_553658248))) {
      F.line = 282;
      var inst_553658286 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary51 = nHEX60gensym603_553658247;
      if (ConstSet389[Temporary51.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary51.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658286.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym603_553658247.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym603_553658248, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary51.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym603_553658247)));
      }
      
      F.line = 798;
      var nHEX60gensym609_553658289 = b_553658244;
      F.line = 799;
      var kindHEX60gensym609_553658290 = 0;
      F.line = 791;
      var nHEX60gensym610_553658293 = nHEX60gensym609_553658289;
      F.line = 792;
      var kindHEX60gensym610_553658294 = 9;
      F.line = 786;
      var nHEX60gensym611_553658296 = nHEX60gensym610_553658293;
      if (!(!((nHEX60gensym611_553658296 == null)))) {
      F.line = 282;
      var inst_553658301 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658301.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym611_553658296.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym610_553658293.kind == kindHEX60gensym610_553658294))) {
      F.line = 282;
      var inst_553658316 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658316.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym610_553658293.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym610_553658294, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym610_553658293.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym610_553658293)));
      }
      
        var Temporary52 = nHEX60gensym609_553658289;
        if (ConstSet390[Temporary52.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary52.kind, NTI553648176)); }
      if (!((Temporary52.atomicKind == kindHEX60gensym609_553658290))) {
      F.line = 282;
      var inst_553658328 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary53 = nHEX60gensym609_553658289;
      if (ConstSet391[Temporary53.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary53.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658328.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym609_553658289.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym609_553658290, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary53.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym609_553658289)));
      }
      
      F.line = 1291;
      var Temporary54 = b_553658244;
      if (ConstSet392[Temporary54.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary54.atomicKind, NTI553648175)); }
      var Temporary55 = a_553658243;
      if (ConstSet393[Temporary55.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary55.atomicKind, NTI553648175)); }
      result_553657498 = ast__lisp_u2683((Temporary54.num < Temporary55.num));
      break;
    case 41:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553658333 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1294, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658333.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,76,101,115,115,101,114,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1296;
      var a_553658334 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1297;
      var b_553658335 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 798;
      var nHEX60gensym617_553658338 = a_553658334;
      F.line = 799;
      var kindHEX60gensym617_553658339 = 0;
      F.line = 791;
      var nHEX60gensym618_553658342 = nHEX60gensym617_553658338;
      F.line = 792;
      var kindHEX60gensym618_553658343 = 9;
      F.line = 786;
      var nHEX60gensym619_553658345 = nHEX60gensym618_553658342;
      if (!(!((nHEX60gensym619_553658345 == null)))) {
      F.line = 282;
      var inst_553658350 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658350.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym619_553658345.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym618_553658342.kind == kindHEX60gensym618_553658343))) {
      F.line = 282;
      var inst_553658365 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658365.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym618_553658342.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym618_553658343, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym618_553658342.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym618_553658342)));
      }
      
        var Temporary56 = nHEX60gensym617_553658338;
        if (ConstSet394[Temporary56.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary56.kind, NTI553648176)); }
      if (!((Temporary56.atomicKind == kindHEX60gensym617_553658339))) {
      F.line = 282;
      var inst_553658377 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary57 = nHEX60gensym617_553658338;
      if (ConstSet395[Temporary57.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary57.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658377.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym617_553658338.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym617_553658339, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary57.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym617_553658338)));
      }
      
      F.line = 798;
      var nHEX60gensym623_553658380 = b_553658335;
      F.line = 799;
      var kindHEX60gensym623_553658381 = 0;
      F.line = 791;
      var nHEX60gensym624_553658384 = nHEX60gensym623_553658380;
      F.line = 792;
      var kindHEX60gensym624_553658385 = 9;
      F.line = 786;
      var nHEX60gensym625_553658387 = nHEX60gensym624_553658384;
      if (!(!((nHEX60gensym625_553658387 == null)))) {
      F.line = 282;
      var inst_553658392 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658392.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym625_553658387.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym624_553658384.kind == kindHEX60gensym624_553658385))) {
      F.line = 282;
      var inst_553658407 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658407.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym624_553658384.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym624_553658385, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym624_553658384.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym624_553658384)));
      }
      
        var Temporary58 = nHEX60gensym623_553658380;
        if (ConstSet396[Temporary58.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary58.kind, NTI553648176)); }
      if (!((Temporary58.atomicKind == kindHEX60gensym623_553658381))) {
      F.line = 282;
      var inst_553658419 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary59 = nHEX60gensym623_553658380;
      if (ConstSet397[Temporary59.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary59.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658419.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym623_553658380.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym623_553658381, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary59.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym623_553658380)));
      }
      
      F.line = 1302;
      var Temporary60 = a_553658334;
      if (ConstSet398[Temporary60.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary60.atomicKind, NTI553648175)); }
      var Temporary61 = b_553658335;
      if (ConstSet399[Temporary61.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary61.atomicKind, NTI553648175)); }
      result_553657498 = ast__lisp_u2683((Temporary60.num < Temporary61.num));
      break;
    case 40:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553658424 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1305, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658424.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,71,114,101,97,116,101,114,79,114,69,113,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1307;
      var a_553658425 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1308;
      var b_553658426 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 798;
      var nHEX60gensym630_553658429 = a_553658425;
      F.line = 799;
      var kindHEX60gensym630_553658430 = 0;
      F.line = 791;
      var nHEX60gensym631_553658433 = nHEX60gensym630_553658429;
      F.line = 792;
      var kindHEX60gensym631_553658434 = 9;
      F.line = 786;
      var nHEX60gensym632_553658436 = nHEX60gensym631_553658433;
      if (!(!((nHEX60gensym632_553658436 == null)))) {
      F.line = 282;
      var inst_553658441 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658441.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym632_553658436.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym631_553658433.kind == kindHEX60gensym631_553658434))) {
      F.line = 282;
      var inst_553658456 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658456.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym631_553658433.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym631_553658434, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym631_553658433.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym631_553658433)));
      }
      
        var Temporary62 = nHEX60gensym630_553658429;
        if (ConstSet400[Temporary62.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary62.kind, NTI553648176)); }
      if (!((Temporary62.atomicKind == kindHEX60gensym630_553658430))) {
      F.line = 282;
      var inst_553658468 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary63 = nHEX60gensym630_553658429;
      if (ConstSet401[Temporary63.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary63.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658468.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym630_553658429.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym630_553658430, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary63.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym630_553658429)));
      }
      
      F.line = 798;
      var nHEX60gensym636_553658471 = b_553658426;
      F.line = 799;
      var kindHEX60gensym636_553658472 = 0;
      F.line = 791;
      var nHEX60gensym637_553658475 = nHEX60gensym636_553658471;
      F.line = 792;
      var kindHEX60gensym637_553658476 = 9;
      F.line = 786;
      var nHEX60gensym638_553658478 = nHEX60gensym637_553658475;
      if (!(!((nHEX60gensym638_553658478 == null)))) {
      F.line = 282;
      var inst_553658483 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658483.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym638_553658478.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym637_553658475.kind == kindHEX60gensym637_553658476))) {
      F.line = 282;
      var inst_553658498 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658498.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym637_553658475.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym637_553658476, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym637_553658475.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym637_553658475)));
      }
      
        var Temporary64 = nHEX60gensym636_553658471;
        if (ConstSet402[Temporary64.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary64.kind, NTI553648176)); }
      if (!((Temporary64.atomicKind == kindHEX60gensym636_553658472))) {
      F.line = 282;
      var inst_553658510 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary65 = nHEX60gensym636_553658471;
      if (ConstSet403[Temporary65.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary65.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658510.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym636_553658471.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym636_553658472, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary65.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym636_553658471)));
      }
      
      F.line = 1313;
      var Temporary66 = b_553658426;
      if (ConstSet404[Temporary66.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary66.atomicKind, NTI553648175)); }
      var Temporary67 = a_553658425;
      if (ConstSet405[Temporary67.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary67.atomicKind, NTI553648175)); }
      result_553657498 = ast__lisp_u2683((Temporary66.num <= Temporary67.num));
      break;
    case 39:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553658515 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1316, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658515.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,76,101,115,115,79,114,69,113,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1318;
      var a_553658516 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1319;
      var b_553658517 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 798;
      var nHEX60gensym644_553658520 = a_553658516;
      F.line = 799;
      var kindHEX60gensym644_553658521 = 0;
      F.line = 791;
      var nHEX60gensym645_553658524 = nHEX60gensym644_553658520;
      F.line = 792;
      var kindHEX60gensym645_553658525 = 9;
      F.line = 786;
      var nHEX60gensym646_553658527 = nHEX60gensym645_553658524;
      if (!(!((nHEX60gensym646_553658527 == null)))) {
      F.line = 282;
      var inst_553658532 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658532.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym646_553658527.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym645_553658524.kind == kindHEX60gensym645_553658525))) {
      F.line = 282;
      var inst_553658547 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658547.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym645_553658524.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym645_553658525, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym645_553658524.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym645_553658524)));
      }
      
        var Temporary68 = nHEX60gensym644_553658520;
        if (ConstSet406[Temporary68.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary68.kind, NTI553648176)); }
      if (!((Temporary68.atomicKind == kindHEX60gensym644_553658521))) {
      F.line = 282;
      var inst_553658559 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary69 = nHEX60gensym644_553658520;
      if (ConstSet407[Temporary69.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary69.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658559.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym644_553658520.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym644_553658521, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary69.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym644_553658520)));
      }
      
      F.line = 798;
      var nHEX60gensym650_553658562 = b_553658517;
      F.line = 799;
      var kindHEX60gensym650_553658563 = 0;
      F.line = 791;
      var nHEX60gensym651_553658566 = nHEX60gensym650_553658562;
      F.line = 792;
      var kindHEX60gensym651_553658567 = 9;
      F.line = 786;
      var nHEX60gensym652_553658569 = nHEX60gensym651_553658566;
      if (!(!((nHEX60gensym652_553658569 == null)))) {
      F.line = 282;
      var inst_553658574 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658574.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym652_553658569.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym651_553658566.kind == kindHEX60gensym651_553658567))) {
      F.line = 282;
      var inst_553658589 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658589.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym651_553658566.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym651_553658567, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym651_553658566.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym651_553658566)));
      }
      
        var Temporary70 = nHEX60gensym650_553658562;
        if (ConstSet408[Temporary70.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary70.kind, NTI553648176)); }
      if (!((Temporary70.atomicKind == kindHEX60gensym650_553658563))) {
      F.line = 282;
      var inst_553658601 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary71 = nHEX60gensym650_553658562;
      if (ConstSet409[Temporary71.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary71.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658601.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym650_553658562.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym650_553658563, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary71.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym650_553658562)));
      }
      
      F.line = 1324;
      var Temporary72 = a_553658516;
      if (ConstSet410[Temporary72.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary72.atomicKind, NTI553648175)); }
      var Temporary73 = b_553658517;
      if (ConstSet411[Temporary73.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary73.atomicKind, NTI553648175)); }
      result_553657498 = ast__lisp_u2683((Temporary72.num <= Temporary73.num));
      break;
    case 38:
      if (!((2 <= (args_553657551).length))) {
      F.line = 282;
      var inst_553658606 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1327, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658606.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,87,104,105,108,101,32,116,97,107,101,115,32,97,116,32,108,101,97,115,116,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1329;
      var condition_553658607 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      F.line = 1330;
      var body_553658631 = astList__lisp_u2689(HEX26__lisp_u9811([ast__lisp_u2661(8)], HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(1, 1))));
      F.line = 1332;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label74: {
        F.line = 1334;
          Label75: while (true) {
          if (!getBool__lisp_u8125(evaluate__lisp_u9364(s_p0, condition_553658607))) break Label75;
            F.line = 522;
            var initialStacksHEX60gensym660_553658638 = (s_p0.stacks).length;
            F.line = 524;
            var newStackHEX60gensym660_553658639 = {kind: 0, symbols: ({data: [], counter: 0}), currentClassObj: null};
            F.line = 525;
            s_p0.stacks.push(newStackHEX60gensym660_553658639);;
            F.line = 527;
            try {
            F.line = 1336;
            (evaluate__lisp_u9364(s_p0, body_553658631));
            } finally {
            framePtr = F;
            if (!(((Temporary77 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary77)[0][Temporary77[1]] == newStackHEX60gensym660_553658639))) {
            F.line = 530;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(530, 5) `s.stacks[BackwardsIndex(1)] == newStack`gensym660` "));
            }
            
            F.line = 531;
            delete__lisp_u10553(s_p0, "stacks", chckRange((s_p0.stacks).length - 1, 0, 2147483647));
            }
            if (!(((s_p0.stacks).length == initialStacksHEX60gensym660_553658638))) {
            F.line = 1335;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1335, 7) `len(s.stacks) == initialStacks`gensym660` Stack imbalance"));
            }
            
          }
      };
      break;
    case 37:
      if (!((2 <= (args_553657551).length))) {
      F.line = 282;
      var inst_553658722 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1352, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658722.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1354;
      var params_553658723 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      F.line = 791;
      var nHEX60gensym671_553658726 = params_553658723;
      F.line = 792;
      var kindHEX60gensym671_553658727 = 1;
      F.line = 786;
      var nHEX60gensym672_553658729 = nHEX60gensym671_553658726;
      if (!(!((nHEX60gensym672_553658729 == null)))) {
      F.line = 282;
      var inst_553658734 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658734.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym672_553658729.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym671_553658726.kind == kindHEX60gensym671_553658727))) {
      F.line = 282;
      var inst_553658749 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658749.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym671_553658726.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym671_553658727, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym671_553658726.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym671_553658726)));
      }
      
      Label78: {
        F.line = 1357;
        var p_553658753 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665495 = [];
        F.line = 1357;
        F.filename = "lisp.nim";
        var Temporary79 = params_553658723;
        if (ConstSet415[Temporary79.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary79.kind, NTI553648176)); }
        colontmp__553665495 = Temporary79.kids;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665496 = 0;
        F.line = 250;
        var L_553665497 = (colontmp__553665495).length;
        Label80: {
          F.line = 251;
            Label81: while (true) {
            if (!(i_553665496 < L_553665497)) break Label81;
              F.line = 1357;
              F.filename = "lisp.nim";
              p_553658753 = colontmp__553665495[chckIndx(i_553665496, 0, (colontmp__553665495).length - 1)];
              F.line = 791;
              var nHEX60gensym675_553658756 = p_553658753;
              F.line = 792;
              var kindHEX60gensym675_553658757 = 0;
              F.line = 786;
              var nHEX60gensym676_553658759 = nHEX60gensym675_553658756;
              if (!(!((nHEX60gensym676_553658759 == null)))) {
              F.line = 282;
              var inst_553658764 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658764.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym676_553658759.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym675_553658756.kind == kindHEX60gensym675_553658757))) {
              F.line = 282;
              var inst_553658779 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658779.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym675_553658756.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym675_553658757, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym675_553658756.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym675_553658756)));
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665496 += 1;
              if (!(((colontmp__553665495).length == L_553665497))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 1360;
      F.filename = "lisp.nim";
      var body_553658803 = astList__lisp_u2689(HEX26__lisp_u9811([ast__lisp_u2661(8)], HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(1, 1))));
      F.line = 1362;
      Label82: {
        F.line = 1362;
        var Temporary83 = params_553658723;
        if (ConstSet416[Temporary83.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary83.kind, NTI553648176)); }
        var HEX3Atmp_553658822 = nimCopy(null, Temporary83.kids, NTI553648221);
        F.line = 1041;
        F.filename = "sequtils.nim";
        var iHEX60gensym681_553658825 = 0;
        F.line = 1042;
        var resultHEX60gensym681_553658849 = newSeq__stdZsyncio_u559(chckRange((HEX3Atmp_553658822).length, 0, 2147483647));
        Label84: {
          F.line = 1043;
          var it_553658853 = null;
          F.line = 249;
          F.filename = "iterators.nim";
          var i_553665501 = 0;
          F.line = 250;
          var L_553665502 = (HEX3Atmp_553658822).length;
          Label85: {
            F.line = 251;
              Label86: while (true) {
              if (!(i_553665501 < L_553665502)) break Label86;
                F.line = 1043;
                F.filename = "sequtils.nim";
                it_553658853 = HEX3Atmp_553658822[chckIndx(i_553665501, 0, (HEX3Atmp_553658822).length - 1)];
                F.line = 1362;
                F.filename = "lisp.nim";
                var Temporary87 = it_553658853;
                if (ConstSet417[Temporary87.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary87.kind, NTI553648176)); }
                resultHEX60gensym681_553658849[chckIndx(iHEX60gensym681_553658825, 0, (resultHEX60gensym681_553658849).length - 1)] = nimCopy(null, Temporary87.sym, NTI33554449);
                F.line = 1045;
                F.filename = "sequtils.nim";
                iHEX60gensym681_553658825 = addInt(iHEX60gensym681_553658825, 1);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665501 += 1;
                if (!(((HEX3Atmp_553658822).length == L_553665502))) {
                F.line = 254;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
      };
      result_553657498 = {kind: 11, templateParams: nimCopy(null, resultHEX60gensym681_553658849, NTI520094029), templateBody: body_553658803, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 36:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      F.filename = "lisp.nim";
      var inst_553658862 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1365, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658862.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,67,111,110,116,97,105,110,115,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1367;
      var l_553658863 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym685_553658866 = l_553658863;
      F.line = 792;
      var kindHEX60gensym685_553658867 = 1;
      F.line = 786;
      var nHEX60gensym686_553658869 = nHEX60gensym685_553658866;
      if (!(!((nHEX60gensym686_553658869 == null)))) {
      F.line = 282;
      var inst_553658874 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658874.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym686_553658869.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym685_553658866.kind == kindHEX60gensym685_553658867))) {
      F.line = 282;
      var inst_553658889 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658889.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym685_553658866.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym685_553658867, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym685_553658866.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym685_553658866)));
      }
      
      F.line = 1370;
      var val_553658890 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 1372;
      var Temporary88 = l_553658863;
      if (ConstSet418[Temporary88.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary88.kind, NTI553648176)); }
      result_553657498 = ast__lisp_u2683(contains__lisp_u7992(Temporary88.kids, val_553658890));
      break;
    case 27:
      if (!((3 <= (args_553657551).length))) {
      F.line = 282;
      var inst_553658899 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1375, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658899.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32],HEX24__lisp_u6182(n_p1)));
      }
      
      F.line = 1377;
      var keySym_553658900 = null;
      F.line = 1377;
      var valSym_553658901 = null;
      if ((args_553657551[chckIndx(0, 0, (args_553657551).length - 1)].kind == 1)) {
      F.line = 1380;
      keySym_553658900 = HEX5BHEX5D__lisp_u8216(args_553657551[chckIndx(0, 0, (args_553657551).length - 1)], 0);
      F.line = 1381;
      valSym_553658901 = HEX5BHEX5D__lisp_u8216(args_553657551[chckIndx(0, 0, (args_553657551).length - 1)], 1);
      F.line = 791;
      var nHEX60gensym692_553658908 = keySym_553658900;
      F.line = 792;
      var kindHEX60gensym692_553658909 = 0;
      F.line = 786;
      var nHEX60gensym693_553658911 = nHEX60gensym692_553658908;
      if (!(!((nHEX60gensym693_553658911 == null)))) {
      F.line = 282;
      var inst_553658916 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658916.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym693_553658911.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym692_553658908.kind == kindHEX60gensym692_553658909))) {
      F.line = 282;
      var inst_553658931 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658931.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym692_553658908.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym692_553658909, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym692_553658908.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym692_553658908)));
      }
      
      F.line = 791;
      var nHEX60gensym696_553658934 = valSym_553658901;
      F.line = 792;
      var kindHEX60gensym696_553658935 = 0;
      F.line = 786;
      var nHEX60gensym697_553658937 = nHEX60gensym696_553658934;
      if (!(!((nHEX60gensym697_553658937 == null)))) {
      F.line = 282;
      var inst_553658942 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658942.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym697_553658937.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym696_553658934.kind == kindHEX60gensym696_553658935))) {
      F.line = 282;
      var inst_553658957 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658957.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym696_553658934.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym696_553658935, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym696_553658934.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym696_553658934)));
      }
      
      }
      else {
        F.line = 791;
        var nHEX60gensym700_553658960 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
        F.line = 792;
        var kindHEX60gensym700_553658961 = 0;
        F.line = 786;
        var nHEX60gensym701_553658963 = nHEX60gensym700_553658960;
        if (!(!((nHEX60gensym701_553658963 == null)))) {
        F.line = 282;
        var inst_553658968 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658968.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym701_553658963.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
        }
        
        if (!((nHEX60gensym700_553658960.kind == kindHEX60gensym700_553658961))) {
        F.line = 282;
        var inst_553658983 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658983.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym700_553658960.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym700_553658961, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym700_553658960.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym700_553658960)));
        }
        
        F.line = 1386;
        valSym_553658901 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
        F.line = 791;
        var nHEX60gensym704_553658986 = valSym_553658901;
        F.line = 792;
        var kindHEX60gensym704_553658987 = 0;
        F.line = 786;
        var nHEX60gensym705_553658989 = nHEX60gensym704_553658986;
        if (!(!((nHEX60gensym705_553658989 == null)))) {
        F.line = 282;
        var inst_553658994 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553658994.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym705_553658989.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
        }
        
        if (!((nHEX60gensym704_553658986.kind == kindHEX60gensym704_553658987))) {
        F.line = 282;
        var inst_553659009 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659009.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym704_553658986.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym704_553658987, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym704_553658986.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym704_553658986)));
        }
        
      }
      
      F.line = 1389;
      var items_553659010 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym708_553659013 = items_553659010;
      F.line = 792;
      var kindHEX60gensym708_553659014 = 1;
      F.line = 786;
      var nHEX60gensym709_553659016 = nHEX60gensym708_553659013;
      if (!(!((nHEX60gensym709_553659016 == null)))) {
      F.line = 282;
      var inst_553659021 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659021.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym709_553659016.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym708_553659013.kind == kindHEX60gensym708_553659014))) {
      F.line = 282;
      var inst_553659036 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659036.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym708_553659013.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym708_553659014, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym708_553659013.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym708_553659013)));
      }
      
      F.line = 1392;
      var body_553659041 = {kind: 1, kids: [{kind: 3, keyword: 8, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null}], listType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label89: {
        F.line = 1393;
        var n_553659060 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665505 = [];
        F.line = 1393;
        F.filename = "lisp.nim";
        colontmp__553665505 = HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(2, 1));
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665506 = 0;
        F.line = 250;
        var L_553665507 = (colontmp__553665505).length;
        Label90: {
          F.line = 251;
            Label91: while (true) {
            if (!(i_553665506 < L_553665507)) break Label91;
              F.line = 1393;
              F.filename = "lisp.nim";
              n_553659060 = colontmp__553665505[chckIndx(i_553665506, 0, (colontmp__553665505).length - 1)];
              F.line = 1394;
              var Temporary92 = body_553659041;
              if (ConstSet419[Temporary92.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary92.kind, NTI553648176)); }
              Temporary92.kids.push(n_553659060);;
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665506 += 1;
              if (!(((colontmp__553665505).length == L_553665507))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 1396;
      F.filename = "lisp.nim";
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label93: {
        F.line = 1398;
        var i_553659070 = 0;
        F.line = 1398;
        var item_553659071 = null;
        F.line = 180;
        F.filename = "iterators.nim";
        var colontmp__553665511 = [];
        F.line = 1398;
        F.filename = "lisp.nim";
        var Temporary94 = items_553659010;
        if (ConstSet420[Temporary94.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary94.kind, NTI553648176)); }
        colontmp__553665511 = Temporary94.kids;
        F.line = 182;
        F.filename = "iterators.nim";
        var i_553665512 = 0;
        F.line = 183;
        var L_553665513 = (colontmp__553665511).length;
        Label95: {
          F.line = 184;
            Label96: while (true) {
            if (!(i_553665512 < L_553665513)) break Label96;
              F.line = 1398;
              F.filename = "lisp.nim";
              i_553659070 = i_553665512;
              F.line = 1398;
              item_553659071 = colontmp__553665511[chckIndx(i_553665512, 0, (colontmp__553665511).length - 1)];
              Label97: {
                F.line = 522;
                var initialStacksHEX60gensym714_553659077 = (s_p0.stacks).length;
                F.line = 524;
                var newStackHEX60gensym714_553659078 = {kind: 0, symbols: ({data: [], counter: 0}), currentClassObj: null};
                F.line = 525;
                s_p0.stacks.push(newStackHEX60gensym714_553659078);;
                F.line = 527;
                try {
                F.line = 1400;
++excHandler;
                try {
                F.line = 1401;
                var Temporary101 = valSym_553658901;
                if (ConstSet421[Temporary101.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary101.kind, NTI553648176)); }
                HEX5BHEX5DHEX3D__lisp_u2797((Temporary100 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary100)[0][Temporary100[1]].symbols, Temporary101.sym, item_553659071);
                if (!(HEX3DHEX3D__lisp_u1499(keySym_553658900, null))) {
                F.line = 1403;
                var Temporary103 = keySym_553658900;
                if (ConstSet422[Temporary103.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary103.kind, NTI553648176)); }
                HEX5BHEX5DHEX3D__lisp_u2797((Temporary102 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary102)[0][Temporary102[1]].symbols, Temporary103.sym, ast__lisp_u2680(i_553659070));
                }
                
                F.line = 1404;
                (evaluate__lisp_u9364(s_p0, body_553659041));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
                framePtr = F;
                if (lastJSError && (isObj(lastJSError.m_type, NTI553648184))) {
                F.line = 1406;
                break Label93;
                }
                else                 if (lastJSError && (isObj(lastJSError.m_type, NTI553648185))) {
                F.line = 1408;
                break Label97;
                }
                else {
                	reraiseException();
                }
                lastJSError = prevJSError;
                } finally {
                framePtr = F;
                }
                } finally {
                framePtr = F;
                if (!(((Temporary104 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary104)[0][Temporary104[1]] == newStackHEX60gensym714_553659078))) {
                F.line = 530;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(530, 5) `s.stacks[BackwardsIndex(1)] == newStack`gensym714` "));
                }
                
                F.line = 531;
                delete__lisp_u10553(s_p0, "stacks", chckRange((s_p0.stacks).length - 1, 0, 2147483647));
                }
                if (!(((s_p0.stacks).length == initialStacksHEX60gensym714_553659077))) {
                F.line = 1399;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1399, 7) `len(s.stacks) == initialStacks`gensym714` Stack imbalance"));
                }
                
              };
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665512 += 1;
              if (!(((colontmp__553665511).length == L_553665513))) {
              F.line = 187;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(187, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 23:
      if (!(((args_553657551).length == 1))) {
      F.line = 1411;
      F.filename = "lisp.nim";
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1411, 5) `len(args) == 1` "));
      }
      
      F.line = 1412;
      var l_553659211 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      if ((l_553659211.kind == 1)) {
      F.line = 1422;
      var Temporary105 = l_553659211;
      if (ConstSet423[Temporary105.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary105.kind, NTI553648176)); }
      result_553657498 = ast__lisp_u2683(((Temporary105.kids).length == 0));
      }
      else {
      if (isKind__lisp_u288(l_553659211, 1)) {
      F.line = 1424;
      var Temporary106 = l_553659211;
      if (ConstSet425[Temporary106.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary106.atomicKind, NTI553648175)); }
      result_553657498 = ast__lisp_u2683(((Temporary106.str).length == 0));
      }
      else {
        if (true) {
        F.line = 282;
        var inst_553659220 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1426, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659220.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,69,109,112,116,121,32,99,97,110,32,111,110,108,121,32,98,101,32,117,115,101,100,32,119,105,116,104,32,108,105,115,116,115,32,97,110,100,32,115,116,114,105,110,103,115]));
        }
        
      }
      }
      break;
    case 22:
      if (!(((args_553657551).length == 1))) {
      F.line = 1429;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1429, 5) `len(args) == 1` "));
      }
      
      F.line = 1430;
      var b_553659229 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 798;
      var nHEX60gensym728_553659232 = b_553659229;
      F.line = 799;
      var kindHEX60gensym728_553659233 = 2;
      F.line = 791;
      var nHEX60gensym729_553659236 = nHEX60gensym728_553659232;
      F.line = 792;
      var kindHEX60gensym729_553659237 = 9;
      F.line = 786;
      var nHEX60gensym730_553659239 = nHEX60gensym729_553659236;
      if (!(!((nHEX60gensym730_553659239 == null)))) {
      F.line = 282;
      var inst_553659244 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659244.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym730_553659239.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym729_553659236.kind == kindHEX60gensym729_553659237))) {
      F.line = 282;
      var inst_553659259 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659259.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym729_553659236.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym729_553659237, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym729_553659236.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym729_553659236)));
      }
      
        var Temporary107 = nHEX60gensym728_553659232;
        if (ConstSet426[Temporary107.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary107.kind, NTI553648176)); }
      if (!((Temporary107.atomicKind == kindHEX60gensym728_553659233))) {
      F.line = 282;
      var inst_553659271 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary108 = nHEX60gensym728_553659232;
      if (ConstSet427[Temporary108.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary108.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659271.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym728_553659232.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym728_553659233, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary108.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym728_553659232)));
      }
      
      F.line = 1432;
      var Temporary109 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      if (ConstSet428[Temporary109.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary109.atomicKind, NTI553648175)); }
      result_553657498 = ast__lisp_u2683(!(Temporary109.boolean));
      break;
    case 29:
      if (!((2 <= (args_553657551).length))) {
      F.line = 1435;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1435, 5) `\x0A2 <= len(args)` "));
      }
      
      F.line = 1437;
      var sym_553659280 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      F.line = 791;
      var nHEX60gensym737_553659283 = sym_553659280;
      F.line = 792;
      var kindHEX60gensym737_553659284 = 0;
      F.line = 786;
      var nHEX60gensym738_553659286 = nHEX60gensym737_553659283;
      if (!(!((nHEX60gensym738_553659286 == null)))) {
      F.line = 282;
      var inst_553659291 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659291.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym738_553659286.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym737_553659283.kind == kindHEX60gensym737_553659284))) {
      F.line = 282;
      var inst_553659306 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659306.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym737_553659283.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym737_553659284, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym737_553659283.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym737_553659283)));
      }
      
      F.line = 1440;
      var symVal_553659307 = evaluate__lisp_u9364(s_p0, sym_553659280);
      F.line = 798;
      var nHEX60gensym741_553659310 = symVal_553659307;
      F.line = 799;
      var kindHEX60gensym741_553659311 = 0;
      F.line = 791;
      var nHEX60gensym742_553659314 = nHEX60gensym741_553659310;
      F.line = 792;
      var kindHEX60gensym742_553659315 = 9;
      F.line = 786;
      var nHEX60gensym743_553659317 = nHEX60gensym742_553659314;
      if (!(!((nHEX60gensym743_553659317 == null)))) {
      F.line = 282;
      var inst_553659322 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659322.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym743_553659317.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym742_553659314.kind == kindHEX60gensym742_553659315))) {
      F.line = 282;
      var inst_553659337 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659337.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym742_553659314.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym742_553659315, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym742_553659314.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym742_553659314)));
      }
      
        var Temporary110 = nHEX60gensym741_553659310;
        if (ConstSet429[Temporary110.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary110.kind, NTI553648176)); }
      if (!((Temporary110.atomicKind == kindHEX60gensym741_553659311))) {
      F.line = 282;
      var inst_553659349 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary111 = nHEX60gensym741_553659310;
      if (ConstSet430[Temporary111.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary111.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659349.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym741_553659310.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym741_553659311, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary111.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym741_553659310)));
      }
      
      Label112: {
        F.line = 1443;
        var a_553659368 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665516 = [];
        F.line = 1443;
        F.filename = "lisp.nim";
        colontmp__553665516 = HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(1, 1));
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665517 = 0;
        F.line = 250;
        var L_553665518 = (colontmp__553665516).length;
        Label113: {
          F.line = 251;
            Label114: while (true) {
            if (!(i_553665517 < L_553665518)) break Label114;
              F.line = 1443;
              F.filename = "lisp.nim";
              a_553659368 = colontmp__553665516[chckIndx(i_553665517, 0, (colontmp__553665516).length - 1)];
              F.line = 1444;
              var a_553659369 = evaluate__lisp_u9364(s_p0, a_553659368);
              F.line = 798;
              var nHEX60gensym749_553659372 = a_553659369;
              F.line = 799;
              var kindHEX60gensym749_553659373 = 0;
              F.line = 791;
              var nHEX60gensym750_553659376 = nHEX60gensym749_553659372;
              F.line = 792;
              var kindHEX60gensym750_553659377 = 9;
              F.line = 786;
              var nHEX60gensym751_553659379 = nHEX60gensym750_553659376;
              if (!(!((nHEX60gensym751_553659379 == null)))) {
              F.line = 282;
              var inst_553659384 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659384.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym751_553659379.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym750_553659376.kind == kindHEX60gensym750_553659377))) {
              F.line = 282;
              var inst_553659399 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659399.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym750_553659376.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym750_553659377, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym750_553659376.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym750_553659376)));
              }
              
                var Temporary115 = nHEX60gensym749_553659372;
                if (ConstSet431[Temporary115.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary115.kind, NTI553648176)); }
              if (!((Temporary115.atomicKind == kindHEX60gensym749_553659373))) {
              F.line = 282;
              var inst_553659411 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
              F.line = 283;
              var Temporary116 = nHEX60gensym749_553659372;
              if (ConstSet432[Temporary116.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary116.kind, NTI553648176)); }
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659411.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym749_553659372.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym749_553659373, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary116.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym749_553659372)));
              }
              
              F.line = 1447;
              var Temporary117 = symVal_553659307;
              if (ConstSet433[Temporary117.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary117.atomicKind, NTI553648175)); }
              var Temporary118 = a_553659369;
              if (ConstSet434[Temporary118.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary118.atomicKind, NTI553648175)); }
              HEX2BHEX3D__pureZstrutils_u2340(Temporary117, "num", Temporary118.num);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665517 += 1;
              if (!(((colontmp__553665516).length == L_553665518))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 1449;
      F.filename = "lisp.nim";
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 30:
      if (!((2 <= (args_553657551).length))) {
      F.line = 1452;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1452, 5) `\x0A2 <= len(args)` "));
      }
      
      F.line = 1454;
      var sym_553659424 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      F.line = 791;
      var nHEX60gensym758_553659427 = sym_553659424;
      F.line = 792;
      var kindHEX60gensym758_553659428 = 0;
      F.line = 786;
      var nHEX60gensym759_553659430 = nHEX60gensym758_553659427;
      if (!(!((nHEX60gensym759_553659430 == null)))) {
      F.line = 282;
      var inst_553659435 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659435.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym759_553659430.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym758_553659427.kind == kindHEX60gensym758_553659428))) {
      F.line = 282;
      var inst_553659450 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659450.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym758_553659427.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym758_553659428, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym758_553659427.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym758_553659427)));
      }
      
      F.line = 1457;
      var symVal_553659451 = evaluate__lisp_u9364(s_p0, sym_553659424);
      F.line = 798;
      var nHEX60gensym762_553659454 = symVal_553659451;
      F.line = 799;
      var kindHEX60gensym762_553659455 = 0;
      F.line = 791;
      var nHEX60gensym763_553659458 = nHEX60gensym762_553659454;
      F.line = 792;
      var kindHEX60gensym763_553659459 = 9;
      F.line = 786;
      var nHEX60gensym764_553659461 = nHEX60gensym763_553659458;
      if (!(!((nHEX60gensym764_553659461 == null)))) {
      F.line = 282;
      var inst_553659466 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659466.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym764_553659461.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym763_553659458.kind == kindHEX60gensym763_553659459))) {
      F.line = 282;
      var inst_553659481 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659481.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym763_553659458.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym763_553659459, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym763_553659458.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym763_553659458)));
      }
      
        var Temporary119 = nHEX60gensym762_553659454;
        if (ConstSet435[Temporary119.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary119.kind, NTI553648176)); }
      if (!((Temporary119.atomicKind == kindHEX60gensym762_553659455))) {
      F.line = 282;
      var inst_553659493 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary120 = nHEX60gensym762_553659454;
      if (ConstSet436[Temporary120.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary120.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659493.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym762_553659454.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym762_553659455, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary120.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym762_553659454)));
      }
      
      F.line = 1460;
      result_553657498 = ast__lisp_u2680(0.0);
      Label121: {
        F.line = 1462;
        var a_553659512 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665521 = [];
        F.line = 1462;
        F.filename = "lisp.nim";
        colontmp__553665521 = HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(1, 1));
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665522 = 0;
        F.line = 250;
        var L_553665523 = (colontmp__553665521).length;
        Label122: {
          F.line = 251;
            Label123: while (true) {
            if (!(i_553665522 < L_553665523)) break Label123;
              F.line = 1462;
              F.filename = "lisp.nim";
              a_553659512 = colontmp__553665521[chckIndx(i_553665522, 0, (colontmp__553665521).length - 1)];
              F.line = 1463;
              var a_553659513 = evaluate__lisp_u9364(s_p0, a_553659512);
              F.line = 798;
              var nHEX60gensym770_553659516 = a_553659513;
              F.line = 799;
              var kindHEX60gensym770_553659517 = 0;
              F.line = 791;
              var nHEX60gensym771_553659520 = nHEX60gensym770_553659516;
              F.line = 792;
              var kindHEX60gensym771_553659521 = 9;
              F.line = 786;
              var nHEX60gensym772_553659523 = nHEX60gensym771_553659520;
              if (!(!((nHEX60gensym772_553659523 == null)))) {
              F.line = 282;
              var inst_553659528 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659528.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym772_553659523.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym771_553659520.kind == kindHEX60gensym771_553659521))) {
              F.line = 282;
              var inst_553659543 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659543.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym771_553659520.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym771_553659521, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym771_553659520.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym771_553659520)));
              }
              
                var Temporary124 = nHEX60gensym770_553659516;
                if (ConstSet437[Temporary124.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary124.kind, NTI553648176)); }
              if (!((Temporary124.atomicKind == kindHEX60gensym770_553659517))) {
              F.line = 282;
              var inst_553659555 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
              F.line = 283;
              var Temporary125 = nHEX60gensym770_553659516;
              if (ConstSet438[Temporary125.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary125.kind, NTI553648176)); }
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659555.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym770_553659516.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym770_553659517, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary125.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym770_553659516)));
              }
              
              F.line = 1466;
              var Temporary126 = symVal_553659451;
              if (ConstSet439[Temporary126.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary126.atomicKind, NTI553648175)); }
              var Temporary127 = a_553659513;
              if (ConstSet440[Temporary127.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary127.atomicKind, NTI553648175)); }
              HEX2DHEX3D__lisp_u11428(Temporary126, "num", Temporary127.num);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665522 += 1;
              if (!(((colontmp__553665521).length == L_553665523))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 1468;
      F.filename = "lisp.nim";
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 20:
      if (!(((args_553657551).length == 2))) {
      F.line = 1471;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1471, 5) `len(args) == 2` "));
      }
      
      F.line = 1473;
      var a_553659568 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1474;
      var b_553659569 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 1476;
      result_553657498 = ast__lisp_u2683(HEX3DHEX3D__lisp_u1499(a_553659568, b_553659569));
      break;
    case 21:
      if (!(((args_553657551).length == 2))) {
      F.line = 1486;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1486, 5) `len(args) == 2` "));
      }
      
      F.line = 1487;
      result_553657498 = ast__lisp_u2683(!(HEX3DHEX3D__lisp_u1499(evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]), evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]))));
      break;
    case 18:
      if (!(((args_553657551).length == 1))) {
      F.line = 1490;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1490, 5) `len(args) == 1` "));
      }
      
      F.line = 1491;
      result_553657498 = ast__lisp_u2686(HEX24__lisp_u6182(evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)])));
      break;
    case 35:
      if (!((0 < (args_553657551).length))) {
      F.line = 1495;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1495, 5) `\x0A0 < len(args)` "));
      }
      
      F.line = 1497;
      result_553657498 = ast__lisp_u2683(true);
      Label128: {
        F.line = 1498;
        var a_553659597 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665526 = 0;
        F.line = 250;
        var L_553665527 = (args_553657551).length;
        Label129: {
          F.line = 251;
            Label130: while (true) {
            if (!(i_553665526 < L_553665527)) break Label130;
              F.line = 1498;
              F.filename = "lisp.nim";
              a_553659597 = args_553657551[chckIndx(i_553665526, 0, (args_553657551).length - 1)];
              if (!(getBool__lisp_u8125(evaluate__lisp_u9364(s_p0, n_p1)))) {
              var Temporary131 = result_553657498;
              if (ConstSet441[Temporary131.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary131.atomicKind, NTI553648175)); }
              F.line = 1501;
              Temporary131.boolean = false;
              F.line = 1502;
              break Label128;
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665526 += 1;
              if (!(((args_553657551).length == L_553665527))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 34:
      if (!((0 < (args_553657551).length))) {
      F.line = 1505;
      F.filename = "lisp.nim";
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1505, 5) `\x0A0 < len(args)` "));
      }
      
      F.line = 1507;
      result_553657498 = ast__lisp_u2683(false);
      Label132: {
        F.line = 1508;
        var a_553659609 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665530 = 0;
        F.line = 250;
        var L_553665531 = (args_553657551).length;
        Label133: {
          F.line = 251;
            Label134: while (true) {
            if (!(i_553665530 < L_553665531)) break Label134;
              F.line = 1508;
              F.filename = "lisp.nim";
              a_553659609 = args_553657551[chckIndx(i_553665530, 0, (args_553657551).length - 1)];
              if (getBool__lisp_u8125(evaluate__lisp_u9364(s_p0, a_553659609))) {
              var Temporary135 = result_553657498;
              if (ConstSet442[Temporary135.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary135.atomicKind, NTI553648175)); }
              F.line = 1511;
              Temporary135.boolean = true;
              F.line = 1512;
              break Label132;
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665530 += 1;
              if (!(((args_553657551).length == L_553665531))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 33:
      if (!((ConstSet443[chckRange((args_553657551).length, 0, 255)] != undefined))) {
      F.line = 1515;
      F.filename = "lisp.nim";
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1515, 5) `contains({0, 1}, len(args))` "));
      }
      
      F.line = 1517;
      if (((args_553657551).length == 0)) {
      Temporary136 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      }
      else {
        if (!(((args_553657551).length == 1))) {
        F.line = 1521;
        failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1521, 9) `len(args) == 1` "));
        }
        
      Temporary136 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      }
      
      var res_553659634 = Temporary136;
      if (!(!(HEX3DHEX3D__lisp_u1499(res_553659634, null)))) {
      F.line = 282;
      var inst_553659637 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1524, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659637.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1526;
      raiseException({value: res_553659634, m_type: NTI553648183, parent: null, name: null, message: [], trace: [], up: null}, "Return:ObjectType");
      break;
    case 31:
      if (!(((args_553657551).length == 1))) {
      F.line = 1529;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1529, 5) `len(args) == 1` "));
      }
      
      F.line = 1530;
      result_553657498 = ast__lisp_u2683(isKind__lisp_u288(evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]), 1));
      break;
    case 19:
      if (!(((args_553657551).length == 1))) {
      F.line = 1533;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1533, 5) `len(args) == 1` "));
      }
      
      F.line = 1534;
      result_553657498 = ast__lisp_u2683((evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]).kind == 1));
      break;
    case 17:
      if (!(((args_553657551).length == 2))) {
      F.line = 1537;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1537, 5) `len(args) == 2` "));
      }
      
      F.line = 1539;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      F.line = 1541;
      var a_553659666 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1542;
      var b_553659667 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      if (!(HEX3DHEX3D__lisp_u1499(a_553659666, b_553659667))) {
      F.line = 282;
      var inst_553659669 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1544, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659669.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32],([69,120,112,101,99,116,97,116,105,111,110,32,102,97,105,108,101,100,32,61,62,32]).concat(HEX24__lisp_u6182(n_p1),[10],HEX24__lisp_u6182(args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]),[32,61,62,32],HEX24__lisp_u6182(a_553659666),[10],HEX24__lisp_u6182(args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]),[32,61,62,32],HEX24__lisp_u6182(b_553659667))));
      }
      
      break;
    case 28:
      if (!(((args_553657551).length == 1))) {
      F.line = 1552;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1552, 5) `len(args) == 1` "));
      }
      
      F.line = 1554;
      var l_553659678 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym806_553659681 = l_553659678;
      F.line = 792;
      var kindHEX60gensym806_553659682 = 1;
      F.line = 786;
      var nHEX60gensym807_553659684 = nHEX60gensym806_553659681;
      if (!(!((nHEX60gensym807_553659684 == null)))) {
      F.line = 282;
      var inst_553659689 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659689.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym807_553659684.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym806_553659681.kind == kindHEX60gensym806_553659682))) {
      F.line = 282;
      var inst_553659704 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659704.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym806_553659681.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym806_553659682, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym806_553659681.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym806_553659681)));
      }
      
      F.line = 1557;
      var Temporary137 = l_553659678;
      if (ConstSet444[Temporary137.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary137.kind, NTI553648176)); }
      result_553657498 = ast__lisp_u2680((Temporary137.kids).length);
      break;
    case 15:
      if (!(((args_553657551).length == 1))) {
      F.line = 1560;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1560, 5) `len(args) == 1` "));
      }
      
      F.line = 1562;
      var l_553659716 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym812_553659719 = l_553659716;
      F.line = 792;
      var kindHEX60gensym812_553659720 = 1;
      F.line = 786;
      var nHEX60gensym813_553659722 = nHEX60gensym812_553659719;
      if (!(!((nHEX60gensym813_553659722 == null)))) {
      F.line = 282;
      var inst_553659727 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659727.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym813_553659722.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym812_553659719.kind == kindHEX60gensym812_553659720))) {
      F.line = 282;
      var inst_553659742 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659742.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym812_553659719.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym812_553659720, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym812_553659719.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym812_553659719)));
      }
      
      F.line = 1565;
      result_553657498 = ast__lisp_u2680(0.0);
      break;
    case 14:
      if (!(((args_553657551).length == 1))) {
      F.line = 1568;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1568, 5) `len(args) == 1` "));
      }
      
      F.line = 1570;
      var l_553659754 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym818_553659757 = l_553659754;
      F.line = 792;
      var kindHEX60gensym818_553659758 = 1;
      F.line = 786;
      var nHEX60gensym819_553659760 = nHEX60gensym818_553659757;
      if (!(!((nHEX60gensym819_553659760 == null)))) {
      F.line = 282;
      var inst_553659765 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659765.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym819_553659760.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym818_553659757.kind == kindHEX60gensym818_553659758))) {
      F.line = 282;
      var inst_553659780 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659780.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym818_553659757.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym818_553659758, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym818_553659757.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym818_553659757)));
      }
      
      F.line = 1573;
      var Temporary138 = l_553659754;
      if (ConstSet445[Temporary138.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary138.kind, NTI553648176)); }
      result_553657498 = ast__lisp_u2680((Temporary138.kids).length - 1);
      break;
    case 16:
      if (!(((args_553657551).length == 2))) {
      F.line = 1576;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1576, 5) `len(args) == 2` "));
      }
      
      F.line = 1578;
      var a_553659792 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1579;
      expectInt__lisp_u8170(a_553659792);
      F.line = 1581;
      var b_553659793 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 1582;
      expectInt__lisp_u8170(a_553659792);
      F.line = 1584;
      result_553657498 = {kind: 1, kids: [], listType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label139: {
        F.line = 1586;
        var i_553659798 = 0;
        F.line = 81;
        F.filename = "iterators_1.nim";
        var colontmp__553665534 = 0;
        F.line = 81;
        var colontmp__553665535 = 0;
        F.line = 1586;
        F.filename = "lisp.nim";
        var Temporary140 = a_553659792;
        if (ConstSet446[Temporary140.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary140.atomicKind, NTI553648175)); }
        colontmp__553665534 = ((Temporary140.num) | 0);
        F.line = 1586;
        var Temporary141 = b_553659793;
        if (ConstSet447[Temporary141.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary141.atomicKind, NTI553648175)); }
        colontmp__553665535 = ((Temporary141.num) | 0);
        F.line = 96;
        F.filename = "iterators_1.nim";
        var res_553665536 = colontmp__553665534;
        Label142: {
          F.line = 97;
            Label143: while (true) {
            if (!(res_553665536 <= colontmp__553665535)) break Label143;
              F.line = 1586;
              F.filename = "lisp.nim";
              i_553659798 = res_553665536;
              F.line = 1587;
              var Temporary144 = result_553657498;
              if (ConstSet448[Temporary144.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary144.kind, NTI553648176)); }
              Temporary144.kids.push(ast__lisp_u2680(i_553659798));;
              F.line = 102;
              F.filename = "iterators_1.nim";
              res_553665536 = addInt(res_553665536, 1);
            }
        };
      };
      break;
    case 13:
      if (!((2 <= (args_553657551).length))) {
      F.line = 1590;
      F.filename = "lisp.nim";
      failedAssertImpl__stdZassertions_u84((makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1590, 5) `\x0A2 <= len(args)` ")).concat(HEX24__systemZdollars_u8(n_p1.line)));
      }
      
      F.line = 1592;
      var sym_553659811 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      F.line = 791;
      var nHEX60gensym827_553659814 = sym_553659811;
      F.line = 792;
      var kindHEX60gensym827_553659815 = 0;
      F.line = 786;
      var nHEX60gensym828_553659817 = nHEX60gensym827_553659814;
      if (!(!((nHEX60gensym828_553659817 == null)))) {
      F.line = 282;
      var inst_553659822 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659822.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym828_553659817.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym827_553659814.kind == kindHEX60gensym827_553659815))) {
      F.line = 282;
      var inst_553659837 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659837.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym827_553659814.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym827_553659815, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym827_553659814.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym827_553659814)));
      }
      
      F.line = 1595;
      var symVal_553659838 = evaluate__lisp_u9364(s_p0, sym_553659811);
      F.line = 798;
      var nHEX60gensym831_553659841 = symVal_553659838;
      F.line = 799;
      var kindHEX60gensym831_553659842 = 1;
      F.line = 791;
      var nHEX60gensym832_553659845 = nHEX60gensym831_553659841;
      F.line = 792;
      var kindHEX60gensym832_553659846 = 9;
      F.line = 786;
      var nHEX60gensym833_553659848 = nHEX60gensym832_553659845;
      if (!(!((nHEX60gensym833_553659848 == null)))) {
      F.line = 282;
      var inst_553659853 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659853.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym833_553659848.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym832_553659845.kind == kindHEX60gensym832_553659846))) {
      F.line = 282;
      var inst_553659868 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659868.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym832_553659845.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym832_553659846, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym832_553659845.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym832_553659845)));
      }
      
        var Temporary145 = nHEX60gensym831_553659841;
        if (ConstSet449[Temporary145.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary145.kind, NTI553648176)); }
      if (!((Temporary145.atomicKind == kindHEX60gensym831_553659842))) {
      F.line = 282;
      var inst_553659880 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
      F.line = 283;
      var Temporary146 = nHEX60gensym831_553659841;
      if (ConstSet450[Temporary146.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary146.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659880.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym831_553659841.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym831_553659842, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary146.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym831_553659841)));
      }
      
      Label147: {
        F.line = 1598;
        var a_553659899 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665539 = [];
        F.line = 1598;
        F.filename = "lisp.nim";
        colontmp__553665539 = HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(1, 1));
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665540 = 0;
        F.line = 250;
        var L_553665541 = (colontmp__553665539).length;
        Label148: {
          F.line = 251;
            Label149: while (true) {
            if (!(i_553665540 < L_553665541)) break Label149;
              F.line = 1598;
              F.filename = "lisp.nim";
              a_553659899 = colontmp__553665539[chckIndx(i_553665540, 0, (colontmp__553665539).length - 1)];
              F.line = 1599;
              var str_553659900 = evaluate__lisp_u9364(s_p0, a_553659899);
              F.line = 798;
              var nHEX60gensym839_553659903 = str_553659900;
              F.line = 799;
              var kindHEX60gensym839_553659904 = 1;
              F.line = 791;
              var nHEX60gensym840_553659907 = nHEX60gensym839_553659903;
              F.line = 792;
              var kindHEX60gensym840_553659908 = 9;
              F.line = 786;
              var nHEX60gensym841_553659910 = nHEX60gensym840_553659907;
              if (!(!((nHEX60gensym841_553659910 == null)))) {
              F.line = 282;
              var inst_553659915 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659915.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym841_553659910.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym840_553659907.kind == kindHEX60gensym840_553659908))) {
              F.line = 282;
              var inst_553659930 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659930.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym840_553659907.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym840_553659908, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym840_553659907.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym840_553659907)));
              }
              
                var Temporary150 = nHEX60gensym839_553659903;
                if (ConstSet451[Temporary150.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary150.kind, NTI553648176)); }
              if (!((Temporary150.atomicKind == kindHEX60gensym839_553659904))) {
              F.line = 282;
              var inst_553659942 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
              F.line = 283;
              var Temporary151 = nHEX60gensym839_553659903;
              if (ConstSet452[Temporary151.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary151.kind, NTI553648176)); }
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659942.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym839_553659903.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym839_553659904, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary151.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym839_553659903)));
              }
              
              F.line = 1601;
              var Temporary152 = symVal_553659838;
              if (ConstSet453[Temporary152.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary152.atomicKind, NTI553648175)); }
              var Temporary153 = str_553659900;
              if (ConstSet454[Temporary153.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary153.atomicKind, NTI553648175)); }
              (Temporary154 = Temporary152.str, Temporary154).push.apply(Temporary154, Temporary153.str);;
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665540 += 1;
              if (!(((colontmp__553665539).length == L_553665541))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 1603;
      F.filename = "lisp.nim";
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 12:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553659947 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1606, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659947.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,105,103,110,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1609;
      var lsym_553659948 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      if (!((lsym_553659948.kind == 0))) {
      F.line = 282;
      var inst_553659954 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1610, Field2: 8};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659954.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(lsym_553659948.line),[41,58,32,70,105,114,115,116,32,97,114,103,117,109,101,110,116,32,116,111,32,97,115,115,105,103,110,32,109,117,115,116,32,98,101,32,97,32,115,121,109,98,111,108]));
      }
      
      F.line = 1613;
      var lval_553659955 = evaluate__lisp_u9364(s_p0, lsym_553659948);
      F.line = 1614;
      var ltype_553659956 = getType__lisp_u8338(lval_553659955);
      F.line = 1616;
      var rval_553659957 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 1617;
      var rtype_553659958 = getType__lisp_u8338(rval_553659957);
      if (!(!((ConstSet455[lval_553659955.kind] != undefined)))) {
      F.line = 282;
      var inst_553659964 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1619, Field2: 11};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659964.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(args_553657551[chckIndx(1, 0, (args_553657551).length - 1)].line),[41,58,32,82,101,98,105,110,100,105,110,103,32,116,121,112,101,115,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100]));
      }
      
      F.line = 1621;
      var converted_553659965 = convertValueToType__lisp_u8486(copyTree__lisp_u2692(rval_553659957), ltype_553659956);
      F.line = 1623;
      lval_553659955 = nimCopy(lval_553659955, converted_553659965, NTI553648190);
      F.line = 1625;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 32:
      if (!((0 < (args_553657551).length))) {
      F.line = 282;
      var inst_553659970 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1628, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659970.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,73,110,118,97,108,105,100,32,99,108,97,115,115,32,100,101,99,108,97,114,97,116,105,111,110]));
      }
      
      F.line = 1630;
      var name_553659971 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      F.line = 791;
      var nHEX60gensym851_553659974 = name_553659971;
      F.line = 792;
      var kindHEX60gensym851_553659975 = 0;
      F.line = 786;
      var nHEX60gensym852_553659977 = nHEX60gensym851_553659974;
      if (!(!((nHEX60gensym852_553659977 == null)))) {
      F.line = 282;
      var inst_553659982 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659982.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym852_553659977.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym851_553659974.kind == kindHEX60gensym851_553659975))) {
      F.line = 282;
      var inst_553659997 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553659997.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym851_553659974.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym851_553659975, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym851_553659974.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym851_553659974)));
      }
      
      F.line = 1633;
      var parent_553659998 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      if ((parent_553659998.kind == 15)) {
      F.line = 1635;
      parent_553659998 = null;
      }
      else {
        F.line = 791;
        var nHEX60gensym855_553660005 = parent_553659998;
        F.line = 792;
        var kindHEX60gensym855_553660006 = 17;
        F.line = 786;
        var nHEX60gensym856_553660008 = nHEX60gensym855_553660005;
        if (!(!((nHEX60gensym856_553660008 == null)))) {
        F.line = 282;
        var inst_553660013 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660013.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym856_553660008.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
        }
        
        if (!((nHEX60gensym855_553660005.kind == kindHEX60gensym855_553660006))) {
        F.line = 282;
        var inst_553660028 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660028.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym855_553660005.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym855_553660006, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym855_553660005.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym855_553660005)));
        }
        
      }
      
      F.line = 1639;
      var Temporary155 = name_553659971;
      if (ConstSet456[Temporary155.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary155.kind, NTI553648176)); }
      result_553657498 = {kind: 17, classParent: parent_553659998, className: nimCopy(null, Temporary155.sym, NTI33554449), classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), line: 0, tags: {}, enumType: null, member: [], classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label156: {
        F.line = 1641;
        var a_553660047 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665544 = [];
        F.line = 1641;
        F.filename = "lisp.nim";
        colontmp__553665544 = HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(2, 1));
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665545 = 0;
        F.line = 250;
        var L_553665546 = (colontmp__553665544).length;
        Label157: {
          F.line = 251;
            Label158: while (true) {
            if (!(i_553665545 < L_553665546)) break Label158;
              F.line = 1641;
              F.filename = "lisp.nim";
              a_553660047 = colontmp__553665544[chckIndx(i_553665545, 0, (colontmp__553665544).length - 1)];
              F.line = 791;
              var nHEX60gensym861_553660050 = a_553660047;
              F.line = 792;
              var kindHEX60gensym861_553660051 = 1;
              F.line = 786;
              var nHEX60gensym862_553660053 = nHEX60gensym861_553660050;
              if (!(!((nHEX60gensym862_553660053 == null)))) {
              F.line = 282;
              var inst_553660058 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660058.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym862_553660053.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym861_553660050.kind == kindHEX60gensym861_553660051))) {
              F.line = 282;
              var inst_553660073 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660073.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym861_553660050.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym861_553660051, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym861_553660050.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym861_553660050)));
              }
              
              F.line = 791;
              var nHEX60gensym865_553660076 = HEX5BHEX5D__lisp_u8216(a_553660047, 0);
              F.line = 792;
              var kindHEX60gensym865_553660077 = 0;
              F.line = 786;
              var nHEX60gensym866_553660079 = nHEX60gensym865_553660076;
              if (!(!((nHEX60gensym866_553660079 == null)))) {
              F.line = 282;
              var inst_553660084 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660084.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym866_553660079.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym865_553660076.kind == kindHEX60gensym865_553660077))) {
              F.line = 282;
              var inst_553660099 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660099.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym865_553660076.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym865_553660077, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym865_553660076.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym865_553660076)));
              }
              
              F.line = 1648;
              var Temporary159 = HEX5BHEX5D__lisp_u8216(a_553660047, 0);
              if (ConstSet457[Temporary159.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary159.kind, NTI553648176)); }
              switch (toJSStr(Temporary159.sym)) {
              case "field":
                  var Temporary160 = a_553660047;
                  if (ConstSet458[Temporary160.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary160.kind, NTI553648176)); }
                if (!(((Temporary160.kids).length == 3))) {
                F.line = 282;
                var inst_553660104 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1651, Field2: 9};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660104.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553660047.line),[41,58,32,70,105,101,108,100,32,100,101,99,108,97,114,97,116,105,111,110,32,109,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,50,32,97,114,103,117,109,101,110,116,115]));
                }
                
                F.line = 1655;
                var fieldName_553660105 = HEX5BHEX5D__lisp_u8216(a_553660047, 1);
                F.line = 791;
                var nHEX60gensym870_553660108 = fieldName_553660105;
                F.line = 792;
                var kindHEX60gensym870_553660109 = 0;
                F.line = 786;
                var nHEX60gensym871_553660111 = nHEX60gensym870_553660108;
                if (!(!((nHEX60gensym871_553660111 == null)))) {
                F.line = 282;
                var inst_553660116 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660116.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym871_553660111.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
                }
                
                if (!((nHEX60gensym870_553660108.kind == kindHEX60gensym870_553660109))) {
                F.line = 282;
                var inst_553660131 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660131.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym870_553660108.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym870_553660109, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym870_553660108.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym870_553660108)));
                }
                
                  var Temporary161 = result_553657498;
                  if (ConstSet459[Temporary161.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary161.kind, NTI553648176)); }
                  var Temporary162 = fieldName_553660105;
                  if (ConstSet460[Temporary162.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary162.kind, NTI553648176)); }
                if (!(!(contains__lisp_u8776(Temporary161.classFields, Temporary162.sym)))) {
                F.line = 282;
                var inst_553660176 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1657, Field2: 17};
                F.line = 283;
                var Temporary163 = fieldName_553660105;
                if (ConstSet461[Temporary163.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary163.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660176.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(fieldName_553660105.line),[41,58,32,70,105,101,108,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32],Temporary163.sym));
                }
                
                F.line = 1659;
                var fieldType_553660177 = evaluate__lisp_u9364(s_p0, HEX5BHEX5D__lisp_u8216(a_553660047, 2));
                if (!((ConstSet462[fieldType_553660177.kind] != undefined))) {
                F.line = 282;
                var inst_553660183 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1660, Field2: 17};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660183.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(fieldType_553660177.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,116,121,112,101]));
                }
                
                F.line = 1662;
                var Temporary164 = result_553657498;
                if (ConstSet463[Temporary164.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary164.kind, NTI553648176)); }
                var Temporary165 = fieldName_553660105;
                if (ConstSet464[Temporary165.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary165.kind, NTI553648176)); }
                HEX5BHEX5DHEX3D__lisp_u2797(Temporary164.classFields, Temporary165.sym, fieldType_553660177);
                break;
              case "method":
                  var Temporary166 = a_553660047;
                  if (ConstSet465[Temporary166.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary166.kind, NTI553648176)); }
                if (!((2 <= (Temporary166.kids).length))) {
                F.line = 282;
                var inst_553660230 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1665, Field2: 9};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660230.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553660047.line),[41,58,32,77,101,116,104,111,100,32,100,101,99,108,97,114,97,116,105,111,110,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
                }
                
                F.line = 1667;
                var methodName_553660231 = HEX5BHEX5D__lisp_u8216(a_553660047, 1);
                F.line = 791;
                var nHEX60gensym880_553660234 = methodName_553660231;
                F.line = 792;
                var kindHEX60gensym880_553660235 = 0;
                F.line = 786;
                var nHEX60gensym881_553660237 = nHEX60gensym880_553660234;
                if (!(!((nHEX60gensym881_553660237 == null)))) {
                F.line = 282;
                var inst_553660242 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660242.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym881_553660237.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
                }
                
                if (!((nHEX60gensym880_553660234.kind == kindHEX60gensym880_553660235))) {
                F.line = 282;
                var inst_553660257 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660257.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym880_553660234.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym880_553660235, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym880_553660234.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym880_553660234)));
                }
                
                  var Temporary167 = result_553657498;
                  if (ConstSet466[Temporary167.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary167.kind, NTI553648176)); }
                  var Temporary168 = methodName_553660231;
                  if (ConstSet467[Temporary168.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary168.kind, NTI553648176)); }
                if (!(!(contains__lisp_u8776(Temporary167.classMethods, Temporary168.sym)))) {
                F.line = 282;
                var inst_553660302 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1669, Field2: 18};
                F.line = 283;
                var Temporary169 = methodName_553660231;
                if (ConstSet468[Temporary169.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary169.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660302.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(methodName_553660231.line),[41,58,32,77,101,116,104,111,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32],Temporary169.sym));
                }
                
                F.line = 1671;
                var funcNode_553660303 = evaluate__lisp_u9364(s_p0, HEX5BHEX5D__lisp_u8216(a_553660047, 2));
                F.line = 791;
                var nHEX60gensym886_553660306 = funcNode_553660303;
                F.line = 792;
                var kindHEX60gensym886_553660307 = 2;
                F.line = 786;
                var nHEX60gensym887_553660309 = nHEX60gensym886_553660306;
                if (!(!((nHEX60gensym887_553660309 == null)))) {
                F.line = 282;
                var inst_553660314 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660314.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym887_553660309.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
                }
                
                if (!((nHEX60gensym886_553660306.kind == kindHEX60gensym886_553660307))) {
                F.line = 282;
                var inst_553660329 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660329.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym886_553660306.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym886_553660307, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym886_553660306.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym886_553660306)));
                }
                
                F.line = 1674;
                var Temporary170 = result_553657498;
                if (ConstSet469[Temporary170.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary170.kind, NTI553648176)); }
                var Temporary171 = methodName_553660231;
                if (ConstSet470[Temporary171.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary171.kind, NTI553648176)); }
                HEX5BHEX5DHEX3D__lisp_u2797(Temporary170.classMethods, Temporary171.sym, funcNode_553660303);
                break;
              default: 
                if (true) {
                F.line = 282;
                var inst_553660373 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1677, Field2: 9};
                F.line = 283;
                var Temporary172 = HEX5BHEX5D__lisp_u8216(a_553660047, 0);
                if (ConstSet471[Temporary172.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary172.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660373.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,73,110,118,97,108,105,100,32,99,108,97,115,115,32,109,101,109,98,101,114,58,32],Temporary172.sym));
                }
                
                break;
              }
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665545 += 1;
              if (!(((colontmp__553665544).length == L_553665546))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 1679;
      F.filename = "lisp.nim";
      var Temporary174 = name_553659971;
      if (ConstSet472[Temporary174.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary174.kind, NTI553648176)); }
      HEX5BHEX5DHEX3D__lisp_u2797((Temporary173 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary173)[0][Temporary173[1]].symbols, Temporary174.sym, result_553657498);
      F.line = 1681;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 11:
      if (!(((args_553657551).length == 1))) {
      F.line = 282;
      var inst_553660424 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1684, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660424.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,84,121,112,101,32,100,101,99,108,97,114,97,116,105,111,110,32,104,97,115,32,110,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1686;
      var fields_553660425 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      if (!((fields_553660425.kind == 1))) {
      F.line = 282;
      var inst_553660431 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1687, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660431.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,84,121,112,101,32,102,105,101,108,100,115,32,109,117,115,116,32,98,101,32,97,32,108,105,115,116]));
      }
      
      F.line = 1689;
      result_553657498 = {kind: 6, objectTypeFields: ({data: [], counter: 0}), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label175: {
        F.line = 1691;
        var f_553660435 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665549 = [];
        F.line = 1691;
        F.filename = "lisp.nim";
        var Temporary176 = fields_553660425;
        if (ConstSet473[Temporary176.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary176.kind, NTI553648176)); }
        colontmp__553665549 = Temporary176.kids;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665550 = 0;
        F.line = 250;
        var L_553665551 = (colontmp__553665549).length;
        Label177: {
          F.line = 251;
            Label178: while (true) {
            if (!(i_553665550 < L_553665551)) break Label178;
              F.line = 1691;
              F.filename = "lisp.nim";
              f_553660435 = colontmp__553665549[chckIndx(i_553665550, 0, (colontmp__553665549).length - 1)];
              if (!((f_553660435.kind == 1))) {
              F.line = 282;
              var inst_553660441 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1692, Field2: 7};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660441.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(f_553660435.line),[41,58,32,84,121,112,101,32,102,105,101,108,100,115,32,109,117,115,116,32,98,101,32,108,105,115,116,115]));
              }
              
                var Temporary179 = f_553660435;
                if (ConstSet474[Temporary179.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary179.kind, NTI553648176)); }
              if (!(((Temporary179.kids).length == 2))) {
              F.line = 282;
              var inst_553660446 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1693, Field2: 7};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660446.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(f_553660435.line),[41,58,32,84,121,112,101,32,102,105,101,108,100,115,32,109,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,116,119,111,32,101,108,101,109,101,110,116,115]));
              }
              
              F.line = 1695;
              var Temporary180 = f_553660435;
              if (ConstSet475[Temporary180.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary180.kind, NTI553648176)); }
              var name_553660447 = (Temporary181 = Temporary180.kids, Temporary181)[chckIndx(0, 0, (Temporary181).length - 1)];
              if (!((name_553660447.kind == 0))) {
              F.line = 282;
              var inst_553660453 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1696, Field2: 10};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660453.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(name_553660447.line),[41,58,32,84,121,112,101,32,102,105,101,108,100,32,110,97,109,101,115,32,109,117,115,116,32,98,101,32,115,121,109,98,111,108,115]));
              }
              
                var Temporary182 = result_553657498;
                if (ConstSet476[Temporary182.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary182.kind, NTI553648176)); }
                var Temporary183 = name_553660447;
                if (ConstSet477[Temporary183.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary183.kind, NTI553648176)); }
              if (!(!(contains__lisp_u8776(Temporary182.objectTypeFields, Temporary183.sym)))) {
              F.line = 282;
              var inst_553660498 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1697, Field2: 10};
              F.line = 283;
              var Temporary184 = name_553660447;
              if (ConstSet478[Temporary184.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary184.kind, NTI553648176)); }
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660498.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(name_553660447.line),[41,58,32,70,105,101,108,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32],Temporary184.sym));
              }
              
              F.line = 1699;
              var Temporary185 = f_553660435;
              if (ConstSet479[Temporary185.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary185.kind, NTI553648176)); }
              var typ_553660499 = evaluate__lisp_u9364(s_p0, (Temporary186 = Temporary185.kids, Temporary186)[chckIndx(1, 0, (Temporary186).length - 1)]);
              if (!((ConstSet480[typ_553660499.kind] != undefined))) {
              F.line = 282;
              var inst_553660508 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1700, Field2: 9};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660508.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(typ_553660499.line),[41,58,32],([69,120,112,101,99,116,101,100,32,97,32,116,121,112,101,58,32]).concat(reprEnum(typ_553660499.kind, NTI553648176))));
              }
              
              F.line = 1702;
              var Temporary187 = result_553657498;
              if (ConstSet481[Temporary187.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary187.kind, NTI553648176)); }
              var Temporary188 = name_553660447;
              if (ConstSet482[Temporary188.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary188.kind, NTI553648176)); }
              HEX5BHEX5DHEX3D__lisp_u2797(Temporary187.objectTypeFields, Temporary188.sym, typ_553660499);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665550 += 1;
              if (!(((colontmp__553665549).length == L_553665551))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 10:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      F.filename = "lisp.nim";
      var inst_553660555 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1705, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660555.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,84,101,115,116,32,116,97,107,101,115,32,50,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1706;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      F.line = 1709;
      var expected_553660556 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1710;
      var actual_553660557 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 1718;
      var cond_553660558 = HEX3DHEX3D__lisp_u1499(expected_553660556, actual_553660557);
      if (!(cond_553660558)) {
      F.line = 282;
      var inst_553660560 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1720, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660560.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,10],HEX24__lisp_u6182(n_p1),[10],HEX24__lisp_u6182(args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]),[32,61,62,32],HEX24__lisp_u6182(expected_553660556),[10],HEX24__lisp_u6182(args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]),[32,61,62,32],HEX24__lisp_u6182(actual_553660557)));
      }
      
      break;
    case 9:
      F.line = 1724;
      result_553657498 = {kind: 4, tableType: {kind: 12, tableKeyType: null, tableValueType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], arrayValueType: null}, tableVal: ({data: [], counter: 0}), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary189 = result_553657498;
      if (ConstSet484[Temporary189.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary189.kind, NTI553648176)); }
      var Temporary190 = Temporary189.tableType;
      if (ConstSet483[Temporary190.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableKeyType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary190.kind, NTI553648176)); }
      F.line = 1725;
      Temporary190.tableKeyType = {kind: 14, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      var Temporary191 = result_553657498;
      if (ConstSet486[Temporary191.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary191.kind, NTI553648176)); }
      var Temporary192 = Temporary191.tableType;
      if (ConstSet485[Temporary192.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableValueType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary192.kind, NTI553648176)); }
      F.line = 1726;
      Temporary192.tableValueType = {kind: 14, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label193: {
        F.line = 1728;
        var a_553660564 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665554 = 0;
        F.line = 250;
        var L_553665555 = (args_553657551).length;
        Label194: {
          F.line = 251;
            Label195: while (true) {
            if (!(i_553665554 < L_553665555)) break Label195;
              F.line = 1728;
              F.filename = "lisp.nim";
              a_553660564 = args_553657551[chckIndx(i_553665554, 0, (args_553657551).length - 1)];
              if (!((a_553660564.kind == 1))) {
              F.line = 282;
              var inst_553660570 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1729, Field2: 7};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660570.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,69,120,112,101,99,116,101,100,32,112,97,105,114,115,32,111,102,32,107,101,121,115,32,97,110,100,32,118,97,108,117,101,115]));
              }
              
                var Temporary196 = a_553660564;
                if (ConstSet487[Temporary196.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary196.kind, NTI553648176)); }
              if (!(((Temporary196.kids).length == 2))) {
              F.line = 282;
              var inst_553660575 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1730, Field2: 7};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660575.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,69,120,112,101,99,116,101,100,32,112,97,105,114,115,32,111,102,32,107,101,121,115,32,97,110,100,32,118,97,108,117,101,115]));
              }
              
              F.line = 1731;
              var Temporary197 = a_553660564;
              if (ConstSet488[Temporary197.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary197.kind, NTI553648176)); }
              var key_553660576 = evaluate__lisp_u9364(s_p0, (Temporary198 = Temporary197.kids, Temporary198)[chckIndx(0, 0, (Temporary198).length - 1)]);
              F.line = 1732;
              var Temporary199 = a_553660564;
              if (ConstSet489[Temporary199.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary199.kind, NTI553648176)); }
              var value_553660577 = evaluate__lisp_u9364(s_p0, (Temporary200 = Temporary199.kids, Temporary200)[chckIndx(1, 0, (Temporary200).length - 1)]);
              F.line = 1733;
              var Temporary201 = result_553657498;
              if (ConstSet490[Temporary201.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary201.kind, NTI553648176)); }
              HEX5BHEX5DHEX3D__lisp_u4056(Temporary201.tableVal, key_553660576, value_553660577);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665554 += 1;
              if (!(((args_553657551).length == L_553665555))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 8:
      F.line = 522;
      F.filename = "lisp.nim";
      var initialStacksHEX60gensym905_553660625 = (s_p0.stacks).length;
      F.line = 524;
      var newStackHEX60gensym905_553660626 = {kind: 0, symbols: ({data: [], counter: 0}), currentClassObj: null};
      F.line = 525;
      s_p0.stacks.push(newStackHEX60gensym905_553660626);;
      F.line = 527;
      try {
      F.line = 1738;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label203: {
        F.line = 1739;
        var a_553660634 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665558 = 0;
        F.line = 250;
        var L_553665559 = (args_553657551).length;
        Label204: {
          F.line = 251;
            Label205: while (true) {
            if (!(i_553665558 < L_553665559)) break Label205;
              F.line = 1739;
              F.filename = "lisp.nim";
              a_553660634 = args_553657551[chckIndx(i_553665558, 0, (args_553657551).length - 1)];
              F.line = 1740;
              result_553657498 = evaluate__lisp_u9364(s_p0, a_553660634);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665558 += 1;
              if (!(((args_553657551).length == L_553665559))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      } finally {
      framePtr = F;
      if (!(((Temporary206 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary206)[0][Temporary206[1]] == newStackHEX60gensym905_553660626))) {
      F.line = 530;
      F.filename = "lisp.nim";
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(530, 5) `s.stacks[BackwardsIndex(1)] == newStack`gensym905` "));
      }
      
      F.line = 531;
      delete__lisp_u10553(s_p0, "stacks", chckRange((s_p0.stacks).length - 1, 0, 2147483647));
      }
      if (!(((s_p0.stacks).length == initialStacksHEX60gensym905_553660625))) {
      F.line = 1737;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1737, 5) `len(s.stacks) == initialStacks`gensym905` Stack imbalance"));
      }
      
      break;
    case 7:
      if (!(((args_553657551).length == 1))) {
      F.line = 282;
      var inst_553660667 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1744, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660667.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,82,101,112,114,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,111,110,101,32,97,114,103,117,109,101,110,116]));
      }
      
      F.line = 1746;
      var arg_553660668 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1749;
      if (isKind__lisp_u288(arg_553660668, 1)) {
      var Temporary208 = arg_553660668;
      if (ConstSet491[Temporary208.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'str\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary208.atomicKind, NTI553648175)); }
      Temporary207 = [34].concat(Temporary208.str,[34]);
      }
      else {
      Temporary207 = HEX24__lisp_u6182(arg_553660668);
      }
      
      var str_553660669 = nimCopy(null, Temporary207, NTI33554449);
      F.line = 1755;
      print__lisp_u13(([91]).concat(HEX24__systemZdollars_u8(n_p1.line),[93,32],HEX24__lisp_u6182(n_p1),[32,61,62,32],str_553660669));
      F.line = 1757;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 6:
      if (!(((args_553657551).length == 1))) {
      F.line = 282;
      var inst_553660674 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1767, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660674.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,69,99,104,111,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,111,110,101,32,97,114,103,117,109,101,110,116]));
      }
      
      F.line = 1768;
      result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      F.line = 1770;
      var arg_553660675 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 1772;
      print__lisp_u13(HEX24__lisp_u6182(arg_553660675));
      break;
    case 5:
      if (!((2 <= (args_553657551).length))) {
      F.line = 1775;
      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(1775, 5) `\x0A2 <= len(args)` "));
      }
      
      F.line = 1777;
      var params_553660684 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      F.line = 791;
      var nHEX60gensym916_553660687 = params_553660684;
      F.line = 792;
      var kindHEX60gensym916_553660688 = 1;
      F.line = 786;
      var nHEX60gensym917_553660690 = nHEX60gensym916_553660687;
      if (!(!((nHEX60gensym917_553660690 == null)))) {
      F.line = 282;
      var inst_553660695 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660695.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym917_553660690.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym916_553660687.kind == kindHEX60gensym916_553660688))) {
      F.line = 282;
      var inst_553660710 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660710.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym916_553660687.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym916_553660688, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym916_553660687.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym916_553660687)));
      }
      
      F.line = 1781;
      var funcReturnType_553660711 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      if (!((ConstSet492[funcReturnType_553660711.kind] != undefined))) {
      F.line = 282;
      var inst_553660717 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1782, Field2: 11};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660717.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(args_553657551[chckIndx(1, 0, (args_553657551).length - 1)].line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,114,101,116,117,114,110,32,116,121,112,101,58,32],HEX24__lisp_u6182(funcReturnType_553660711)));
      }
      
      F.line = 1784;
      var funcParams_553660718 = [];
      F.line = 1785;
      var funcTypes_553660719 = [];
      Label209: {
        F.line = 1787;
        var p_553660723 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665562 = [];
        F.line = 1787;
        F.filename = "lisp.nim";
        var Temporary210 = params_553660684;
        if (ConstSet493[Temporary210.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary210.kind, NTI553648176)); }
        colontmp__553665562 = Temporary210.kids;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665563 = 0;
        F.line = 250;
        var L_553665564 = (colontmp__553665562).length;
        Label211: {
          F.line = 251;
            Label212: while (true) {
            if (!(i_553665563 < L_553665564)) break Label212;
              F.line = 1787;
              F.filename = "lisp.nim";
              p_553660723 = colontmp__553665562[chckIndx(i_553665563, 0, (colontmp__553665562).length - 1)];
              if ((p_553660723.kind == 0)) {
              F.line = 1789;
              var Temporary213 = p_553660723;
              if (ConstSet494[Temporary213.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary213.kind, NTI553648176)); }
              var Temporary214 = nimCopy(null, Temporary213.sym, NTI33554449);
              funcParams_553660718.push(Temporary214);;
              F.line = 1790;
              funcTypes_553660719.push(null);;
              }
              else {
                if (!((p_553660723.kind == 1))) {
                F.line = 282;
                var inst_553660741 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1792, Field2: 9};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660741.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,73,110,118,97,108,105,100,32,108,97,109,98,100,97,32,112,97,114,97,109,101,116,101,114,58,32],HEX24__lisp_u6182(p_553660723)));
                }
                
                  var Temporary215 = p_553660723;
                  if (ConstSet495[Temporary215.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary215.kind, NTI553648176)); }
                if (!(((Temporary215.kids).length == 2))) {
                F.line = 282;
                var inst_553660746 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1793, Field2: 9};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660746.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(p_553660723.line),[41,58,32,73,110,118,97,108,105,100,32,108,97,109,98,100,97,32,112,97,114,97,109,101,116,101,114,58,32],HEX24__lisp_u6182(p_553660723)));
                }
                
                F.line = 1795;
                var Temporary216 = p_553660723;
                if (ConstSet496[Temporary216.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary216.kind, NTI553648176)); }
                var name_553660747 = (Temporary217 = Temporary216.kids, Temporary217)[chckIndx(0, 0, (Temporary217).length - 1)];
                if (!((name_553660747.kind == 0))) {
                F.line = 282;
                var inst_553660753 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1796, Field2: 12};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660753.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(name_553660747.line),[41,58,32,73,110,118,97,108,105,100,32,108,97,109,98,100,97,32,112,97,114,97,109,101,116,101,114,58,32],HEX24__lisp_u6182(p_553660723)));
                }
                
                F.line = 1798;
                var Temporary218 = p_553660723;
                if (ConstSet497[Temporary218.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary218.kind, NTI553648176)); }
                var typ_553660754 = evaluate__lisp_u9364(s_p0, (Temporary219 = Temporary218.kids, Temporary219)[chckIndx(1, 0, (Temporary219).length - 1)]);
                if (!((ConstSet498[typ_553660754.kind] != undefined))) {
                F.line = 282;
                var inst_553660760 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1799, Field2: 11};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660760.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(typ_553660754.line),[41,58,32,73,110,118,97,108,105,100,32,108,97,109,98,100,97,32,112,97,114,97,109,101,116,101,114,58,32],HEX24__lisp_u6182(p_553660723)));
                }
                
                F.line = 1801;
                var Temporary220 = name_553660747;
                if (ConstSet499[Temporary220.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary220.kind, NTI553648176)); }
                var Temporary221 = nimCopy(null, Temporary220.sym, NTI33554449);
                funcParams_553660718.push(Temporary221);;
                F.line = 1802;
                funcTypes_553660719.push(typ_553660754);;
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665563 += 1;
              if (!(((colontmp__553665562).length == L_553665564))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 1804;
      F.filename = "lisp.nim";
      var body_553660773 = astList__lisp_u2689([ast__lisp_u2661(8)]);
      F.line = 1805;
      var Temporary222 = body_553660773;
      if (ConstSet500[Temporary222.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary222.kind, NTI553648176)); }
      add__lisp_u8865(Temporary222, "kids", HEX5BHEX5D__lisp_u9400(args_553657551, HEX2EHEX2E__stdZenumutils_u105(1, 1)));
      if (!(!((body_553660773 == null)))) {
      F.line = 282;
      var inst_553660798 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1807, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660798.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      if (!(!((funcReturnType_553660711 == null)))) {
      F.line = 282;
      var inst_553660804 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1808, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660804.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1810;
      result_553657498 = {kind: 2, funcParams: nimCopy(null, funcParams_553660718, NTI553657039), funcTypes: nimCopy(null, funcTypes_553660719, NTI553657040), funcBody: body_553660773, funcReturnType: funcReturnType_553660711, funcObj: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      break;
    case 0:
      if (!(((args_553657551).length == 1))) {
      F.line = 282;
      var inst_553660809 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1814, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660809.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,81,117,111,116,101,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,111,110,101,32,97,114,103,117,109,101,110,116]));
      }
      
      F.line = 1815;
      result_553657498 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      break;
    case 1:
      if (!(((args_553657551).length == 1))) {
      F.line = 282;
      var inst_553660814 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1818, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660814.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,69,118,97,108,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,111,110,101,32,97,114,103,117,109,101,110,116]));
      }
      
      F.line = 1819;
      var a_553660815 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      if ((a_553660815.kind == 0)) {
      F.line = 1821;
      a_553660815 = evaluate__lisp_u9364(s_p0, a_553660815);
      }
      
      if (!((a_553660815.kind == 1))) {
      F.line = 282;
      var inst_553660825 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1822, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660825.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,69,118,97,108,32,116,97,107,101,115,32,97,32,108,105,115,116,32,97,115,32,97,110,32,97,114,103,117,109,101,110,116]));
      }
      
      F.line = 1823;
      result_553657498 = evaluate__lisp_u9364(s_p0, a_553660815);
      break;
    case 2:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553660830 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1826, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660830.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,86,97,114,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1828;
      var sym_553660831 = args_553657551[chckIndx(0, 0, (args_553657551).length - 1)];
      if (!((sym_553660831.kind == 0))) {
      F.line = 282;
      var inst_553660837 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1829, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660837.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,70,105,114,115,116,32,97,114,103,117,109,101,110,116,32,116,111,32,118,97,114,32,109,117,115,116,32,98,101,32,97,32,115,121,109,98,111,108]));
      }
      
        var Temporary224 = sym_553660831;
        if (ConstSet501[Temporary224.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary224.kind, NTI553648176)); }
      if (!(!(hasKey__lisp_u2089((Temporary223 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary223)[0][Temporary223[1]].symbols, Temporary224.sym)))) {
      F.line = 282;
      var inst_553660884 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1830, Field2: 5};
      F.line = 283;
      var Temporary225 = sym_553660831;
      if (ConstSet502[Temporary225.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary225.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660884.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,83,121,109,98,111,108,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32],Temporary225.sym));
      }
      
      F.line = 1832;
      var value_553660885 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      if (!(!((value_553660885.kind == 0)))) {
      F.line = 282;
      var inst_553660891 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1834, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553660891.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),makeNimstrLit("): This is why Common Lisp uses keywords instead of symbols for this purpose.")));
      }
      
      F.line = 1836;
      var Temporary227 = sym_553660831;
      if (ConstSet503[Temporary227.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary227.kind, NTI553648176)); }
      HEX5BHEX5DHEX3D__lisp_u2797((Temporary226 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary226)[0][Temporary226[1]].symbols, Temporary227.sym, value_553660885);
      F.line = 1838;
      result_553657498 = value_553660885;
      break;
    case 3:
      if (!(contains__lisp_u12851(new Int32Array([2, 3]), (args_553657551).length))) {
      F.line = 282;
      var inst_553661016 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1847, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661016.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,73,102,32,116,97,107,101,115,32,116,119,111,32,111,114,32,116,104,114,101,101,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1849;
      var condition_553661017 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      if (!((getAtomicValueKind__lisp_u5514(condition_553661017) == 2))) {
      F.line = 282;
      var inst_553661023 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1850, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661023.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,70,105,114,115,116,32,97,114,103,117,109,101,110,116,32,116,111,32,105,102,32,109,117,115,116,32,98,101,32,97,32,98,111,111,108,101,97,110]));
      }
      
        var Temporary228 = condition_553661017;
        if (ConstSet504[Temporary228.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary228.atomicKind, NTI553648175)); }
      if (Temporary228.boolean) {
      F.line = 1853;
      result_553657498 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      }
      else {
        if (((args_553657551).length == 3)) {
        F.line = 1856;
        result_553657498 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(2, 0, (args_553657551).length - 1)]);
        }
        else {
          F.line = 1858;
          result_553657498 = {kind: 16, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
        }
        
      }
      
      break;
    case 25:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      var inst_553661031 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1861, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661031.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,102,105,108,116,101,114,45,97,114,114,97,121,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1863;
      var arr_553661032 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym947_553661035 = arr_553661032;
      F.line = 792;
      var kindHEX60gensym947_553661036 = 1;
      F.line = 786;
      var nHEX60gensym948_553661038 = nHEX60gensym947_553661035;
      if (!(!((nHEX60gensym948_553661038 == null)))) {
      F.line = 282;
      var inst_553661043 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661043.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym948_553661038.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym947_553661035.kind == kindHEX60gensym947_553661036))) {
      F.line = 282;
      var inst_553661058 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661058.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym947_553661035.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym947_553661036, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym947_553661035.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym947_553661035)));
      }
      
      F.line = 1866;
      var compare_553661059 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym951_553661062 = compare_553661059;
      F.line = 792;
      var kindHEX60gensym951_553661063 = 2;
      F.line = 786;
      var nHEX60gensym952_553661065 = nHEX60gensym951_553661062;
      if (!(!((nHEX60gensym952_553661065 == null)))) {
      F.line = 282;
      var inst_553661070 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661070.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym952_553661065.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym951_553661062.kind == kindHEX60gensym951_553661063))) {
      F.line = 282;
      var inst_553661085 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661085.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym951_553661062.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym951_553661063, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym951_553661062.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym951_553661062)));
      }
      
      F.line = 1869;
      result_553657498 = {kind: 1, kids: [], listType: null, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label229: {
        F.line = 1871;
        var a_553661089 = null;
        F.line = 247;
        F.filename = "iterators.nim";
        var colontmp__553665567 = [];
        F.line = 1871;
        F.filename = "lisp.nim";
        var Temporary230 = arr_553661032;
        if (ConstSet505[Temporary230.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary230.kind, NTI553648176)); }
        colontmp__553665567 = Temporary230.kids;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665568 = 0;
        F.line = 250;
        var L_553665569 = (colontmp__553665567).length;
        Label231: {
          F.line = 251;
            Label232: while (true) {
            if (!(i_553665568 < L_553665569)) break Label232;
              F.line = 1871;
              F.filename = "lisp.nim";
              a_553661089 = colontmp__553665567[chckIndx(i_553665568, 0, (colontmp__553665567).length - 1)];
              F.line = 1872;
              var res_553661094 = evaluate__lisp_u9364(s_p0, astList__lisp_u2689([compare_553661059, a_553661089]));
              F.line = 791;
              var nHEX60gensym955_553661097 = res_553661094;
              F.line = 792;
              var kindHEX60gensym955_553661098 = 9;
              F.line = 786;
              var nHEX60gensym956_553661100 = nHEX60gensym955_553661097;
              if (!(!((nHEX60gensym956_553661100 == null)))) {
              F.line = 282;
              var inst_553661105 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661105.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym956_553661100.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym955_553661097.kind == kindHEX60gensym955_553661098))) {
              F.line = 282;
              var inst_553661120 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661120.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym955_553661097.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym955_553661098, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym955_553661097.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym955_553661097)));
              }
              
              F.line = 798;
              var nHEX60gensym959_553661123 = res_553661094;
              F.line = 799;
              var kindHEX60gensym959_553661124 = 2;
              F.line = 791;
              var nHEX60gensym960_553661127 = nHEX60gensym959_553661123;
              F.line = 792;
              var kindHEX60gensym960_553661128 = 9;
              F.line = 786;
              var nHEX60gensym961_553661130 = nHEX60gensym960_553661127;
              if (!(!((nHEX60gensym961_553661130 == null)))) {
              F.line = 282;
              var inst_553661135 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661135.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym961_553661130.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym960_553661127.kind == kindHEX60gensym960_553661128))) {
              F.line = 282;
              var inst_553661150 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661150.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym960_553661127.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym960_553661128, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym960_553661127.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym960_553661127)));
              }
              
                var Temporary233 = nHEX60gensym959_553661123;
                if (ConstSet506[Temporary233.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary233.kind, NTI553648176)); }
              if (!((Temporary233.atomicKind == kindHEX60gensym959_553661124))) {
              F.line = 282;
              var inst_553661162 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
              F.line = 283;
              var Temporary234 = nHEX60gensym959_553661123;
              if (ConstSet507[Temporary234.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary234.kind, NTI553648176)); }
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661162.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym959_553661123.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym959_553661124, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary234.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym959_553661123)));
              }
              
                var Temporary235 = res_553661094;
                if (ConstSet508[Temporary235.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'boolean\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary235.atomicKind, NTI553648175)); }
              if (Temporary235.boolean) {
              F.line = 1876;
              var Temporary236 = result_553657498;
              if (ConstSet509[Temporary236.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary236.kind, NTI553648176)); }
              Temporary236.kids.push(a_553661089);;
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665568 += 1;
              if (!(((colontmp__553665567).length == L_553665569))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    case 24:
      if (!(((args_553657551).length == 2))) {
      F.line = 282;
      F.filename = "lisp.nim";
      var inst_553661171 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1879, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661171.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,97,114,114,97,121,45,103,101,116,32,116,97,107,101,115,32,101,120,97,99,116,108,121,32,116,119,111,32,97,114,103,117,109,101,110,116,115]));
      }
      
      F.line = 1881;
      var arr_553661172 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(0, 0, (args_553657551).length - 1)]);
      F.line = 791;
      var nHEX60gensym966_553661175 = arr_553661172;
      F.line = 792;
      var kindHEX60gensym966_553661176 = 1;
      F.line = 786;
      var nHEX60gensym967_553661178 = nHEX60gensym966_553661175;
      if (!(!((nHEX60gensym967_553661178 == null)))) {
      F.line = 282;
      var inst_553661183 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661183.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym967_553661178.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
      }
      
      if (!((nHEX60gensym966_553661175.kind == kindHEX60gensym966_553661176))) {
      F.line = 282;
      var inst_553661198 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661198.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym966_553661175.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym966_553661176, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym966_553661175.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym966_553661175)));
      }
      
      F.line = 1884;
      var idx_553661199 = evaluate__lisp_u9364(s_p0, args_553657551[chckIndx(1, 0, (args_553657551).length - 1)]);
      F.line = 1885;
      expectInt__lisp_u8170(idx_553661199);
      F.line = 1887;
      var Temporary237 = arr_553661172;
      if (ConstSet510[Temporary237.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary237.kind, NTI553648176)); }
      var Temporary238 = idx_553661199;
      if (ConstSet511[Temporary238.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary238.atomicKind, NTI553648175)); }
      result_553657498 = (Temporary239 = Temporary237.kids, Temporary239)[chckIndx(((Temporary238.num) | 0), 0, (Temporary239).length - 1)];
      break;
    case 26:
      if (!((0 < (args_553657551).length))) {
      F.line = 282;
      var inst_553661205 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1890, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661205.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
      }
      
      F.line = 1892;
      Label240: {
        F.line = 1041;
        F.filename = "sequtils.nim";
        var iHEX60gensym973_553661226 = 0;
        F.line = 1042;
        var resultHEX60gensym973_553661250 = newSeq__lisp_u3899(chckRange((args_553657551).length, 0, 2147483647));
        Label241: {
          F.line = 1043;
          var it_553661254 = null;
          F.line = 249;
          F.filename = "iterators.nim";
          var i_553665573 = 0;
          F.line = 250;
          var L_553665574 = (args_553657551).length;
          Label242: {
            F.line = 251;
              Label243: while (true) {
              if (!(i_553665573 < L_553665574)) break Label243;
                F.line = 1043;
                F.filename = "sequtils.nim";
                it_553661254 = args_553657551[chckIndx(i_553665573, 0, (args_553657551).length - 1)];
                F.line = 1892;
                F.filename = "lisp.nim";
                resultHEX60gensym973_553661250[chckIndx(iHEX60gensym973_553661226, 0, (resultHEX60gensym973_553661250).length - 1)] = evaluate__lisp_u9364(s_p0, it_553661254);
                F.line = 1045;
                F.filename = "sequtils.nim";
                iHEX60gensym973_553661226 = addInt(iHEX60gensym973_553661226, 1);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665573 += 1;
                if (!(((args_553657551).length == L_553665574))) {
                F.line = 254;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
      };
      var args_553661259 = nimCopy(null, resultHEX60gensym973_553661250, NTI553650670);
      Label244: {
        F.line = 1893;
        F.filename = "lisp.nim";
        var a_553661263 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665577 = 0;
        F.line = 250;
        var L_553665578 = (args_553661259).length;
        Label245: {
          F.line = 251;
            Label246: while (true) {
            if (!(i_553665577 < L_553665578)) break Label246;
              F.line = 1893;
              F.filename = "lisp.nim";
              a_553661263 = args_553661259[chckIndx(i_553665577, 0, (args_553661259).length - 1)];
              F.line = 798;
              var nHEX60gensym976_553661266 = a_553661263;
              F.line = 799;
              var kindHEX60gensym976_553661267 = 0;
              F.line = 791;
              var nHEX60gensym977_553661270 = nHEX60gensym976_553661266;
              F.line = 792;
              var kindHEX60gensym977_553661271 = 9;
              F.line = 786;
              var nHEX60gensym978_553661273 = nHEX60gensym977_553661270;
              if (!(!((nHEX60gensym978_553661273 == null)))) {
              F.line = 282;
              var inst_553661278 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661278.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym978_553661273.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
              }
              
              if (!((nHEX60gensym977_553661270.kind == kindHEX60gensym977_553661271))) {
              F.line = 282;
              var inst_553661293 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661293.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym977_553661270.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym977_553661271, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym977_553661270.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym977_553661270)));
              }
              
                var Temporary247 = nHEX60gensym976_553661266;
                if (ConstSet512[Temporary247.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary247.kind, NTI553648176)); }
              if (!((Temporary247.atomicKind == kindHEX60gensym976_553661267))) {
              F.line = 282;
              var inst_553661305 = {Field0: [108,105,115,112,46,110,105,109], Field1: 801, Field2: 3};
              F.line = 283;
              var Temporary248 = nHEX60gensym976_553661266;
              if (ConstSet513[Temporary248.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'atomicKind\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary248.kind, NTI553648176)); }
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661305.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym976_553661266.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym976_553661267, NTI553648175),[32,98,117,116,32,103,111,116,32],reprEnum(Temporary248.atomicKind, NTI553648175),[32,105,110,32],HEX24__lisp_u6182(nHEX60gensym976_553661266)));
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665577 += 1;
              if (!(((args_553661259).length == L_553665578))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      if (((args_553661259).length == 1)) {
      F.line = 1897;
      F.filename = "lisp.nim";
      var Temporary249 = evaluate__lisp_u9364(s_p0, args_553661259[chckIndx(0, 0, (args_553661259).length - 1)]);
      if (ConstSet514[Temporary249.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary249.atomicKind, NTI553648175)); }
      result_553657498 = ast__lisp_u2680(-(Temporary249.num));
      }
      else {
        F.line = 1899;
        var Temporary250 = evaluate__lisp_u9364(s_p0, args_553661259[chckIndx(0, 0, (args_553661259).length - 1)]);
        if (ConstSet515[Temporary250.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary250.atomicKind, NTI553648175)); }
        result_553657498 = ast__lisp_u2680(Temporary250.num);
        Label251: {
          F.line = 1900;
          var a_553661327 = null;
          F.line = 247;
          F.filename = "iterators.nim";
          var colontmp__553665581 = [];
          F.line = 1900;
          F.filename = "lisp.nim";
          colontmp__553665581 = HEX5BHEX5D__lisp_u9400(args_553661259, HEX2EHEX2E__stdZenumutils_u105(1, 1));
          F.line = 249;
          F.filename = "iterators.nim";
          var i_553665582 = 0;
          F.line = 250;
          var L_553665583 = (colontmp__553665581).length;
          Label252: {
            F.line = 251;
              Label253: while (true) {
              if (!(i_553665582 < L_553665583)) break Label253;
                F.line = 1900;
                F.filename = "lisp.nim";
                a_553661327 = colontmp__553665581[chckIndx(i_553665582, 0, (colontmp__553665581).length - 1)];
                F.line = 1901;
                var Temporary254 = result_553657498;
                if (ConstSet516[Temporary254.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary254.atomicKind, NTI553648175)); }
                var Temporary255 = evaluate__lisp_u9364(s_p0, a_553661327);
                if (ConstSet517[Temporary255.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary255.atomicKind, NTI553648175)); }
                HEX2DHEX3D__lisp_u11428(Temporary254, "num", Temporary255.num);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665582 += 1;
                if (!(((colontmp__553665581).length == L_553665583))) {
                F.line = 254;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
      }
      
      break;
    case 4:
      F.line = 1904;
      F.filename = "lisp.nim";
      result_553657498 = {kind: 9, atomicKind: 0, num: 0.0, line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
      Label256: {
        F.line = 1905;
        var a_553661335 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665586 = 0;
        F.line = 250;
        var L_553665587 = (args_553657551).length;
        Label257: {
          F.line = 251;
            Label258: while (true) {
            if (!(i_553665586 < L_553665587)) break Label258;
              F.line = 1905;
              F.filename = "lisp.nim";
              a_553661335 = args_553657551[chckIndx(i_553665586, 0, (args_553657551).length - 1)];
              F.line = 1906;
              var a_553661336 = evaluate__lisp_u9364(s_p0, a_553661335);
              if (!((getAtomicValueKind__lisp_u5514(a_553661336) == 0))) {
              F.line = 282;
              var inst_553661342 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1907, Field2: 7};
              F.line = 283;
              raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661342.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,114,103,117,109,101,110,116,32,116,111,32,43,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114]));
              }
              
              F.line = 1909;
              var Temporary259 = result_553657498;
              if (ConstSet518[Temporary259.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary259.atomicKind, NTI553648175)); }
              var Temporary260 = a_553661336;
              if (ConstSet519[Temporary260.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary260.atomicKind, NTI553648175)); }
              HEX2BHEX3D__pureZstrutils_u2340(Temporary259, "num", Temporary260.num);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665586 += 1;
              if (!(((args_553657551).length == L_553665587))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      break;
    }
  framePtr = F.prev;

  return result_553657498;

}

function insert__lisp_u15138(dest_p0, dest_p0_Idx, src_p1, pos_p2) {
    var Temporary1;

  var F = {procname: "insert.insert", prev: framePtr, filename: "/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/sequtils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 624;
    F.filename = "sequtils.nim";
    var j_553663274 = subInt((dest_p0[dest_p0_Idx]).length, 1);
    F.line = 625;
    var i_553663278 = addInt(j_553663274, (src_p1).length);
    if ((i_553663278 == j_553663274)) {
    F.line = 626;
    break BeforeRet;
    }
    
    F.line = 627;
    if (dest_p0[dest_p0_Idx].length < (Temporary1 = chckRange(addInt(i_553663278, 1), 0, 2147483647), Temporary1)) { for (var i = dest_p0[dest_p0_Idx].length ; i < Temporary1 ; ++i) dest_p0[dest_p0_Idx].push(null); }
               else { dest_p0[dest_p0_Idx].length = Temporary1; };
    Label2: {
      F.line = 630;
        Label3: while (true) {
        if (!(pos_p2 <= j_553663274)) break Label3;
          F.line = 634;
          dest_p0[dest_p0_Idx][chckIndx(i_553663278, 0, (dest_p0[dest_p0_Idx]).length - 1)] = dest_p0[dest_p0_Idx][chckIndx(j_553663274, 0, (dest_p0[dest_p0_Idx]).length - 1)];
          F.line = 635;
          i_553663278 = subInt(i_553663278, 1);
          F.line = 636;
          j_553663274 = subInt(j_553663274, 1);
        }
    };
    F.line = 638;
    j_553663274 = addInt(j_553663274, 1);
    Label4: {
      F.line = 639;
      var item_553663305 = null;
      F.line = 18;
      F.filename = "iterators.nim";
      var i_553665608 = 0;
      Label5: {
        F.line = 19;
          Label6: while (true) {
          if (!(i_553665608 < (src_p1).length)) break Label6;
            F.line = 639;
            F.filename = "sequtils.nim";
            item_553663305 = src_p1[chckIndx(i_553665608, 0, (src_p1).length - 1)];
            F.line = 640;
            dest_p0[dest_p0_Idx][chckIndx(j_553663274, 0, (dest_p0[dest_p0_Idx]).length - 1)] = item_553663305;
            F.line = 641;
            j_553663274 = addInt(j_553663274, 1);
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665608 += 1;
          }
      };
    };
  };
  framePtr = F.prev;

  
}

function update__lisp_u14793(s_p0, n_p1, n_p1_Idx, templateArgs_p2, parent_p3, indexInParent_p4) {
      var Temporary1;
    var Temporary2;
    var Temporary3;
      var Temporary4;
    var Temporary5;
      var Temporary6;
    var Temporary7;
    var Temporary8;
    var Temporary9;
    var Temporary10;
          var Temporary13;
          var Temporary14;
          var Temporary15;

  var F = {procname: "evaluate.update", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(!((n_p1[n_p1_Idx] == null)))) {
    F.line = 2097;
    F.filename = "lisp.nim";
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(2097, 9) `not isNil(n)` "));
    }
    
    if ((n_p1[n_p1_Idx].tags[0] != undefined)) {
    F.line = 2100;
    delete n_p1[n_p1_Idx].tags[0];
      var Temporary1 = n_p1[n_p1_Idx];
      if (ConstSet523[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI553648176)); }
    if (!(contains__lisp_u8776(templateArgs_p2, Temporary1.sym))) {
    F.line = 282;
    var inst_553662989 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2102, Field2: 11};
    F.line = 283;
    var Temporary2 = n_p1[n_p1_Idx];
    if (ConstSet524[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI553648176)); }
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662989.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1[n_p1_Idx].line),[41,58,32],([84,101,109,112,108,97,116,101,32,99,97,108,108,32,104,97,115,32,110,111,32,97,114,103,117,109,101,110,116,32,116,111,32,117,110,113,117,111,116,101,58,32]).concat(Temporary2.sym)));
    }
    
    F.line = 2105;
    var Temporary3 = n_p1[n_p1_Idx];
    if (ConstSet525[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI553648176)); }
    n_p1[n_p1_Idx] = HEX5BHEX5D__lisp_u14028(templateArgs_p2, Temporary3.sym);
    if (!(!((n_p1[n_p1_Idx] == null)))) {
    F.line = 2107;
    failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(2107, 11) `not isNil(n)` "));
    }
    
    }
    else {
    if ((n_p1[n_p1_Idx].tags[1] != undefined)) {
      var Temporary4 = n_p1[n_p1_Idx];
      if (ConstSet526[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
    if (!(contains__lisp_u8776(templateArgs_p2, Temporary4.sym))) {
    F.line = 282;
    var inst_553663100 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2110, Field2: 11};
    F.line = 283;
    var Temporary5 = n_p1[n_p1_Idx];
    if (ConstSet527[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663100.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1[n_p1_Idx].line),[41,58,32],([84,101,109,112,108,97,116,101,32,99,97,108,108,32,104,97,115,32,110,111,32,97,114,103,117,109,101,110,116,32,116,111,32,117,110,113,117,111,116,101,45,115,112,108,105,99,105,110,103,58,32]).concat(Temporary5.sym)));
    }
    
    if (!(!(HEX3DHEX3D__lisp_u1499(parent_p3, null)))) {
    F.line = 282;
    var inst_553663102 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2111, Field2: 11};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663102.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1[n_p1_Idx].line),[41,58,32,67,97,110,39,116,32,117,110,113,117,111,116,101,45,115,112,108,105,99,101,32,97,116,32,116,104,101,32,116,111,112,32,108,101,118,101,108]));
    }
    
    if (!(!((parent_p3 == null)))) {
    F.line = 282;
    var inst_553663107 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2112, Field2: 11};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663107.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1[n_p1_Idx].line),[41,58,32,67,97,110,39,116,32,117,110,113,117,111,116,101,45,115,112,108,105,99,101,32,97,116,32,116,104,101,32,116,111,112,32,108,101,118,101,108]));
    }
    
    if (!((parent_p3.kind == 1))) {
    F.line = 282;
    var inst_553663113 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2113, Field2: 11};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663113.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1[n_p1_Idx].line),[41,58,32,67,97,110,39,116,32,117,110,113,117,111,116,101,45,115,112,108,105,99,101,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,105,115,116]));
    }
    
      var Temporary6 = parent_p3;
      if (ConstSet528[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
    if (!(contains__lisp_u8292(HEX2EHEX2E__stdZstrbasics_u48(0, (Temporary6.kids).length - 1), indexInParent_p4))) {
    F.line = 282;
    var inst_553663170 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2114, Field2: 11};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663170.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1[n_p1_Idx].line),[41,58,32,73,110,118,97,108,105,100,32,105,110,100,101,120,73,110,80,97,114,101,110,116]));
    }
    
    if (false) {
    F.line = 282;
    var inst_553663176 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2115, Field2: 11};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663176.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1[n_p1_Idx].line),[41,58,32,67,97,110,39,116,32,117,110,113,117,111,116,101,45,115,112,108,105,99,101,32,97,32,110,111,110,45,108,105,115,116]));
    }
    
    F.line = 2117;
    delete n_p1[n_p1_Idx].tags[1];
    F.line = 2119;
    var Temporary7 = n_p1[n_p1_Idx];
    if (ConstSet529[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI553648176)); }
    var argToSplice_553663235 = HEX5BHEX5D__lisp_u14028(templateArgs_p2, Temporary7.sym);
    F.line = 791;
    var nHEX60gensym1055_553663238 = argToSplice_553663235;
    F.line = 792;
    var kindHEX60gensym1055_553663239 = 1;
    F.line = 786;
    var nHEX60gensym1056_553663241 = nHEX60gensym1055_553663238;
    if (!(!((nHEX60gensym1056_553663241 == null)))) {
    F.line = 282;
    var inst_553663246 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663246.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym1056_553663241.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
    }
    
    if (!((nHEX60gensym1055_553663238.kind == kindHEX60gensym1055_553663239))) {
    F.line = 282;
    var inst_553663261 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663261.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym1055_553663238.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym1055_553663239, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym1055_553663238.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym1055_553663238)));
    }
    
    F.line = 2128;
    var Temporary8 = parent_p3;
    if (ConstSet530[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI553648176)); }
    delete__lisp_u9180(Temporary8, "kids", chckRange(indexInParent_p4, 0, 2147483647));
    F.line = 2130;
    var Temporary9 = parent_p3;
    if (ConstSet531[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
    var Temporary10 = argToSplice_553663235;
    if (ConstSet532[Temporary10.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary10.kind, NTI553648176)); }
    insert__lisp_u15138(Temporary9, "kids", Temporary10.kids, indexInParent_p4);
    }
    else {
    if ((n_p1[n_p1_Idx].kind == 1)) {
    F.line = 2133;
    var i_553663318 = 0;
    Label11: {
      F.line = 2134;
        Label12: while (true) {
          var Temporary13 = n_p1[n_p1_Idx];
          if (ConstSet533[Temporary13.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary13.kind, NTI553648176)); }
        if (!(i_553663318 <= (Temporary13.kids).length - 1)) break Label12;
          F.line = 791;
          var nHEX60gensym1059_553663324 = n_p1[n_p1_Idx];
          F.line = 792;
          var kindHEX60gensym1059_553663325 = 1;
          F.line = 786;
          var nHEX60gensym1060_553663327 = nHEX60gensym1059_553663324;
          if (!(!((nHEX60gensym1060_553663327 == null)))) {
          F.line = 282;
          var inst_553663332 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
          F.line = 283;
          raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663332.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym1060_553663327.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
          }
          
          if (!((nHEX60gensym1059_553663324.kind == kindHEX60gensym1059_553663325))) {
          F.line = 282;
          var inst_553663347 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
          F.line = 283;
          raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663347.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym1059_553663324.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym1059_553663325, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym1059_553663324.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym1059_553663324)));
          }
          
          F.line = 2136;
          var Temporary14 = n_p1[n_p1_Idx];
          if (ConstSet534[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648176)); }
          update__lisp_u14793(s_p0, (Temporary15 = Temporary14.kids, Temporary15), chckIndx(i_553663318, 0, (Temporary15).length - 1), templateArgs_p2, n_p1[n_p1_Idx], i_553663318);
          F.line = 2137;
          i_553663318 = addInt(i_553663318, 1);
        }
    };
    }
    else {
    }
    }}
  framePtr = F.prev;

  
}

function getCurrentException() {
  var result_33556452 = null;

    if (isNimException__system_u2017()) {
    result_33556452 = lastJSError;
    }
    

  return result_33556452;

}

function evaluate__lisp_u9364(s_p0, n_p1) {
              var Temporary4;
              var Temporary5;
      var Temporary6;
          var Temporary9;
                    var Temporary14;
                    var Temporary15;
                    var Temporary16;
                var Temporary17;
        var Temporary18;
      var Temporary19;
      var Temporary20;
      var Temporary21;
        var Temporary22;
      var Temporary23;
        var Temporary24;
        var Temporary25;
        var Temporary26;
                  var Temporary30;
                var Temporary31;
                  var Temporary32;
                  var Temporary33;
                var Temporary34;
                  var Temporary35;
                var Temporary36;
                var Temporary37;
                    var Temporary42;
        var Temporary43;
                var Temporary47;
                          var Temporary51;
                        var Temporary52;
                        var Temporary53;
                        var Temporary54;
                        var Temporary55;
              var Temporary56;
          var Temporary58;
                  var Temporary61;
                var Temporary62;
                var Temporary63;
                  var Temporary64;
                  var Temporary65;
                var Temporary66;
                var Temporary67;
                var Temporary68;
                var Temporary69;
                var Temporary70;
                var Temporary71;
                var Temporary72;
                var Temporary73;
                var Temporary74;
                var Temporary75;
                var Temporary76;
          var Temporary78;
                    var Temporary82;
        var Temporary83;
        var Temporary84;
        var Temporary85;
          var Temporary86;
          var Temporary88;
        var Temporary91;
          var Temporary92;
          var Temporary93;
        var Temporary96;
        var Temporary97;
          var Temporary98;
        var Temporary99;
          var Temporary101;
                var Temporary104;
                var Temporary105;
                var Temporary106;
                var Temporary107;
                var Temporary108;
                var Temporary109;
                var Temporary110;
        var Temporary111;
        var Temporary112;
          var Temporary113;

  var result_553661526 = null;

  var F = {procname: "lisp.evaluate", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 1915;
    F.filename = "lisp.nim";
    switch (n_p1.kind) {
    case 3:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 11:
    case 7:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 17:
      F.line = 1919;
      result_553661526 = n_p1;
      break;
    case 19:
      Label1: {
        F.line = 1922;
        var i_553661538 = 0;
        F.line = 6;
        F.filename = "iterators_1.nim";
        var colontmp__553665087 = 0;
        F.line = 1922;
        F.filename = "lisp.nim";
        colontmp__553665087 = (s_p0.stacks).length - 1;
        F.line = 33;
        F.filename = "iterators_1.nim";
        var res_553665088 = colontmp__553665087;
        Label2: {
          F.line = 34;
            Label3: while (true) {
            if (!(0 <= res_553665088)) break Label3;
              F.line = 1922;
              F.filename = "lisp.nim";
              i_553661538 = res_553665088;
              F.line = 1923;
              var s_553661539 = s_p0.stacks[chckIndx(i_553661538, 0, (s_p0.stacks).length - 1)];
              if (!((s_553661539.currentClassObj == null))) {
              F.line = 1926;
              var Temporary4 = s_553661539.currentClassObj;
              if (ConstSet69[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI553648176)); }
              var Temporary5 = n_p1;
              if (ConstSet70[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'member\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI553648176)); }
              var field_553661610 = getOrDefault__lisp_u2366(Temporary4.classObjFields, Temporary5.member);
              if (!((field_553661610 == null))) {
              F.line = 1928;
              result_553661526 = field_553661610;
              F.line = 1929;
              break Label1;
              }
              
              }
              
              F.line = 39;
              F.filename = "iterators_1.nim";
              res_553665088 = subInt(res_553665088, 1);
            }
        };
      };
      if ((result_553661526 == null)) {
      if (true) {
      F.line = 282;
      F.filename = "lisp.nim";
      var inst_553661618 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1931, Field2: 7};
      F.line = 283;
      var Temporary6 = n_p1;
      if (ConstSet71[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'member\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI553648176)); }
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661618.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,77,101,109,98,101,114,32,110,111,116,32,102,111,117,110,100,58,32],Temporary6.member));
      }
      
      }
      
      break;
    case 10:
      Label7: {
        F.line = 1935;
        var i_553661637 = (-1);
        Label8: {
          F.line = 1934;
          var sym_553661638 = [];
          F.line = 508;
          F.filename = "strutils.nim";
          var colontmp__553665092 = [];
          F.line = 1934;
          F.filename = "lisp.nim";
          var Temporary9 = n_p1;
          if (ConstSet72[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'dot\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI553648176)); }
          colontmp__553665092 = Temporary9.dot;
          F.line = 535;
          F.filename = "strutils.nim";
          var sepLen_553665095 = 1;
          F.line = 389;
          var lastHEX60gensym41_553665096 = 0;
          F.line = 390;
          var splitsHEX60gensym41_553665097 = (-1);
          Label10: {
            F.line = 537;
              Label11: while (true) {
              if (!(lastHEX60gensym41_553665096 <= (colontmp__553665092).length)) break Label11;
                F.line = 393;
                var firstHEX60gensym41_553665099 = lastHEX60gensym41_553665096;
                Label12: {
                  F.line = 394;
                    Label13: while (true) {
                    if (!((lastHEX60gensym41_553665096 < (colontmp__553665092).length) && !(substrEq__pureZstrutils_u255(colontmp__553665092, lastHEX60gensym41_553665096, [46])))) break Label13;
                      F.line = 395;
                      lastHEX60gensym41_553665096 = addInt(lastHEX60gensym41_553665096, 1);
                    }
                };
                if ((splitsHEX60gensym41_553665097 == 0)) {
                F.line = 396;
                lastHEX60gensym41_553665096 = (colontmp__553665092).length;
                }
                
                F.line = 1935;
                F.filename = "lisp.nim";
                sym_553661638 = substr__system_u3700(colontmp__553665092, firstHEX60gensym41_553665099, subInt(lastHEX60gensym41_553665096, 1));
                F.line = 1935;
                i_553661637 = addInt(i_553661637, 1);
                if ((i_553661637 == 0)) {
                F.line = 1936;
                result_553661526 = evalSymbol__lisp_u5228(s_p0, {kind: 0, sym: nimCopy(null, sym_553661638, NTI33554449), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null});
                }
                else {
                  F.line = 1938;
                  switch (result_553661526.kind) {
                  case 8:
                    F.line = 1940;
                    var Temporary14 = result_553661526;
                    if (ConstSet77[Temporary14.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary14.kind, NTI553648176)); }
                    result_553661526 = getOrDefault__lisp_u2366(Temporary14.objectFields, sym_553661638);
                    break;
                  case 18:
                    F.line = 1943;
                    var Temporary15 = result_553661526;
                    if (ConstSet78[Temporary15.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary15.kind, NTI553648176)); }
                    var tmp_553661778 = getOrDefault__lisp_u2366(Temporary15.classObjFields, sym_553661638);
                    if ((tmp_553661778 == null)) {
                    F.line = 1945;
                    var Temporary16 = result_553661526;
                    if (ConstSet79[Temporary16.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary16.kind, NTI553648176)); }
                    tmp_553661778 = getOrDefault__lisp_u2366(Temporary16.classObjMethods, sym_553661638);
                    }
                    
                    F.line = 1949;
                    result_553661526 = tmp_553661778;
                    break;
                  default: 
                    if (true) {
                    F.line = 282;
                    var inst_553661850 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1951, Field2: 11};
                    F.line = 283;
                    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661850.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,68,111,116,32,99,97,108,108,32,111,110,32,110,111,110,45,111,98,106,101,99,116,58,32],HEX24__lisp_u6182(result_553661526)));
                    }
                    
                    break;
                  }
                }
                
                if (!(!(HEX3DHEX3D__lisp_u1499(result_553661526, null)))) {
                F.line = 282;
                var inst_553661917 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1953, Field2: 7};
                F.line = 283;
                var Temporary17 = n_p1;
                if (ConstSet180[Temporary17.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'dot\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary17.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661917.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,68,111,116,32,99,97,108,108,32,115,121,109,98,111,108,32,110,111,116,32,102,111,117,110,100,58,32],sym_553661638,[32,102,114,111,109,32],Temporary17.dot,[32,119,104,101,114,101,32,115,116,97,99,107,115,32],HEX24__lisp_u13723(s_p0.stacks)));
                }
                
                if ((splitsHEX60gensym41_553665097 == 0)) {
                F.line = 398;
                F.filename = "strutils.nim";
                break Label10;
                }
                
                F.line = 399;
                splitsHEX60gensym41_553665097 = subInt(splitsHEX60gensym41_553665097, 1);
                F.line = 400;
                lastHEX60gensym41_553665096 = addInt(lastHEX60gensym41_553665096, sepLen_553665095);
              }
          };
        };
      };
      break;
    case 1:
        var Temporary18 = n_p1;
        if (ConstSet181[Temporary18.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary18.kind, NTI553648176)); }
      if (!((0 < (Temporary18.kids).length))) {
      F.line = 282;
      F.filename = "lisp.nim";
      var inst_553661922 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1957, Field2: 5};
      F.line = 283;
      raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661922.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,69,109,112,116,121,32,108,105,115,116,32,99,97,110,110,111,116,32,98,101,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,32,114,111,117,116,105,110,101,32,99,97,108,108]));
      }
      
      F.line = 1960;
      var Temporary19 = n_p1;
      if (ConstSet182[Temporary19.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary19.kind, NTI553648176)); }
      var f_553661923 = evaluate__lisp_u9364(s_p0, (Temporary20 = Temporary19.kids, Temporary20)[chckIndx(0, 0, (Temporary20).length - 1)]);
      F.line = 1962;
        var Temporary22 = n_p1;
        if (ConstSet183[Temporary22.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary22.kind, NTI553648176)); }
      if ((1 < (Temporary22.kids).length)) {
      var Temporary23 = n_p1;
      if (ConstSet184[Temporary23.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary23.kind, NTI553648176)); }
      Temporary21 = HEX5BHEX5D__lisp_u9400(Temporary23.kids, HEX2EHEX2E__stdZenumutils_u105(1, 1));
      }
      else {
      Temporary21 = [];
      }
      
      var args_553661946 = nimCopy(null, Temporary21, NTI553654761);
      F.line = 1965;
      switch (f_553661923.kind) {
      case 0:
      case 10:
      case 19:
        if (true) {
        F.line = 282;
        var inst_553661948 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1969, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661948.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),makeNimstrLit("): This node should have been evaluated before getting passed here")));
        }
        
        break;
      case 5:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
        if (true) {
        F.line = 282;
        var inst_553661950 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1972, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661950.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,70,105,114,115,116,32,101,108,101,109,101,110,116,32,111,102,32,108,105,115,116,32,105,115,32,110,111,116,32,99,97,108,108,97,98,108,101,58,32],HEX24__lisp_u6182(n_p1),[44,32],HEX24__lisp_u6182(f_553661923)));
        }
        
        break;
      case 7:
        if (!(((args_553661946).length == 1))) {
        F.line = 282;
        var inst_553661955 = {Field0: [108,105,115,112,46,110,105,109], Field1: 1975, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661955.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,69,110,117,109,32,116,121,112,101,32,118,97,114,105,97,98,108,101,32,100,101,99,108,97,114,97,116,105,111,110,32,114,101,113,117,105,114,101,115,32,101,120,97,99,116,108,121,32,49,32,97,114,103,117,109,101,110,116]));
        }
        
        F.line = 1977;
        result_553661526 = evaluate__lisp_u9364(s_p0, args_553661946[chckIndx(0, 0, (args_553661946).length - 1)]);
        F.line = 1978;
        result_553661526.enumType = f_553661923;
        F.line = 1979;
        expectValidEnumValue__lisp_u6543(result_553661526);
        break;
      case 1:
        F.line = 1982;
        expectListLen__lisp_u8301(n_p1, 2);
        F.line = 1983;
        var idx_553661956 = evaluate__lisp_u9364(s_p0, args_553661946[chckIndx(0, 0, (args_553661946).length - 1)]);
        F.line = 1984;
        expectInt__lisp_u8170(idx_553661956);
        F.line = 1985;
        var Temporary24 = f_553661923;
        if (ConstSet239[Temporary24.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary24.kind, NTI553648176)); }
        var Temporary25 = idx_553661956;
        if (ConstSet240[Temporary25.atomicKind]===undefined) { raiseFieldError2(makeNimstrLit("field \'num\' is not accessible for type \'Node\' using \'atomicKind = "), reprDiscriminant(Temporary25.atomicKind, NTI553648175)); }
        result_553661526 = (Temporary26 = Temporary24.kids, Temporary26)[chckIndx(((Temporary25.num) | 0), 0, (Temporary26).length - 1)];
        break;
      case 17:
        F.line = 1994;
        var obj_553661957 = {kind: 18, classObjType: f_553661923, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), objectType: null, objectFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
        F.line = 1996;
        var allFields_553661958 = allInheritedClassFields__lisp_u8700(f_553661923);
        Label27: {
          F.line = 1998;
          var a_553661962 = null;
          F.line = 249;
          F.filename = "iterators.nim";
          var i_553665103 = 0;
          F.line = 250;
          var L_553665104 = (args_553661946).length;
          Label28: {
            F.line = 251;
              Label29: while (true) {
              if (!(i_553665103 < L_553665104)) break Label29;
                F.line = 1998;
                F.filename = "lisp.nim";
                a_553661962 = args_553661946[chckIndx(i_553665103, 0, (args_553661946).length - 1)];
                F.line = 791;
                var nHEX60gensym999_553661965 = a_553661962;
                F.line = 792;
                var kindHEX60gensym999_553661966 = 1;
                F.line = 786;
                var nHEX60gensym1000_553661968 = nHEX60gensym999_553661965;
                if (!(!((nHEX60gensym1000_553661968 == null)))) {
                F.line = 282;
                var inst_553661973 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661973.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym1000_553661968.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
                }
                
                if (!((nHEX60gensym999_553661965.kind == kindHEX60gensym999_553661966))) {
                F.line = 282;
                var inst_553661988 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553661988.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym999_553661965.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym999_553661966, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym999_553661965.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym999_553661965)));
                }
                
                F.line = 2000;
                expectListLen__lisp_u8301(a_553661962, 2);
                F.line = 2002;
                var fieldName_553661989 = HEX5BHEX5D__lisp_u8216(a_553661962, 0);
                F.line = 791;
                var nHEX60gensym1003_553661992 = fieldName_553661989;
                F.line = 792;
                var kindHEX60gensym1003_553661993 = 0;
                F.line = 786;
                var nHEX60gensym1004_553661995 = nHEX60gensym1003_553661992;
                if (!(!((nHEX60gensym1004_553661995 == null)))) {
                F.line = 282;
                var inst_553662000 = {Field0: [108,105,115,112,46,110,105,109], Field1: 787, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662000.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym1004_553661995.line),[41,58,32,69,120,112,101,99,116,101,100,32,97,32,110,111,110,45,110,105,108,32,110,111,100,101]));
                }
                
                if (!((nHEX60gensym1003_553661992.kind == kindHEX60gensym1003_553661993))) {
                F.line = 282;
                var inst_553662015 = {Field0: [108,105,115,112,46,110,105,109], Field1: 794, Field2: 3};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662015.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(nHEX60gensym1003_553661992.line),[41,58,32,69,120,112,101,99,116,101,100,32],reprEnum(kindHEX60gensym1003_553661993, NTI553648176),[32,98,117,116,32,103,111,116,32],reprEnum(nHEX60gensym1003_553661992.kind, NTI553648176),[32,105,110,32],HEX24__lisp_u6568(nHEX60gensym1003_553661992)));
                }
                
                  var Temporary30 = fieldName_553661989;
                  if (ConstSet247[Temporary30.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary30.kind, NTI553648176)); }
                if (!(contains__lisp_u8776(allFields_553661958, Temporary30.sym))) {
                F.line = 282;
                var inst_553662060 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2004, Field2: 17};
                F.line = 283;
                var Temporary31 = fieldName_553661989;
                if (ConstSet248[Temporary31.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary31.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662060.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(fieldName_553661989.line),[41,58,32,70,105,101,108,100,32,110,111,116,32,102,111,117,110,100,32,105,110,32,99,108,97,115,115,32,116,121,112,101,58,32],Temporary31.sym));
                }
                
                  var Temporary32 = obj_553661957;
                  if (ConstSet249[Temporary32.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary32.kind, NTI553648176)); }
                  var Temporary33 = fieldName_553661989;
                  if (ConstSet250[Temporary33.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary33.kind, NTI553648176)); }
                if (!(!(contains__lisp_u8776(Temporary32.classObjFields, Temporary33.sym)))) {
                F.line = 282;
                var inst_553662105 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2005, Field2: 17};
                F.line = 283;
                var Temporary34 = fieldName_553661989;
                if (ConstSet251[Temporary34.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary34.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662105.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(fieldName_553661989.line),[41,58,32,70,105,101,108,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32],Temporary34.sym));
                }
                
                F.line = 2007;
                var fieldValue_553662106 = evaluate__lisp_u9364(s_p0, HEX5BHEX5D__lisp_u8216(a_553661962, 1));
                  var Temporary35 = fieldName_553661989;
                  if (ConstSet271[Temporary35.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary35.kind, NTI553648176)); }
                if (!(canConvertToType__lisp_u8439(fieldValue_553662106, HEX5BHEX5D__lisp_u14028(allFields_553661958, Temporary35.sym)))) {
                F.line = 282;
                var inst_553662223 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2008, Field2: 18};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662223.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(fieldValue_553662106.line),[41,58,32,73,110,118,97,108,105,100,32,102,105,101,108,100,32,116,121,112,101]));
                }
                
                F.line = 2010;
                var Temporary36 = obj_553661957;
                if (ConstSet272[Temporary36.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary36.kind, NTI553648176)); }
                var Temporary37 = fieldName_553661989;
                if (ConstSet273[Temporary37.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary37.kind, NTI553648176)); }
                HEX5BHEX5DHEX3D__lisp_u2797(Temporary36.classObjFields, Temporary37.sym, fieldValue_553662106);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665103 += 1;
                if (!(((args_553661946).length == L_553665104))) {
                F.line = 254;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
        Label38: {
          F.line = 2012;
          F.filename = "lisp.nim";
          var name_553662270 = [];
          F.line = 748;
          F.filename = "tables.nim";
          var L_553665111 = len__lisp_u498(allFields_553661958);
          Label39: {
            F.line = 749;
            var h_553665113 = 0;
            F.line = 81;
            F.filename = "iterators_1.nim";
            var colontmp__553665114 = 0;
            F.line = 749;
            F.filename = "tables.nim";
            colontmp__553665114 = (allFields_553661958.data).length - 1;
            F.line = 96;
            F.filename = "iterators_1.nim";
            var res_553665115 = 0;
            Label40: {
              F.line = 97;
                Label41: while (true) {
                if (!(res_553665115 <= colontmp__553665114)) break Label41;
                  F.line = 749;
                  F.filename = "tables.nim";
                  h_553665113 = res_553665115;
                  if (isFilled__pureZcollectionsZtables_u31(allFields_553661958.data[chckIndx(h_553665113, 0, (allFields_553661958.data).length - 1)].Field0)) {
                  F.line = 2012;
                  F.filename = "lisp.nim";
                  name_553662270 = allFields_553661958.data[chckIndx(h_553665113, 0, (allFields_553661958.data).length - 1)]["Field1"];
                    var Temporary42 = obj_553661957;
                    if (ConstSet274[Temporary42.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary42.kind, NTI553648176)); }
                  if (!(contains__lisp_u8776(Temporary42.classObjFields, name_553662270))) {
                  F.line = 282;
                  var inst_553662315 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2013, Field2: 9};
                  F.line = 283;
                  raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662315.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,70,105,101,108,100,32,109,105,115,115,105,110,103,58,32],name_553662270));
                  }
                  
                  if (!((len__lisp_u498(allFields_553661958) == L_553665111))) {
                  F.line = 752;
                  F.filename = "tables.nim";
                  failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(752, 13) `len(t) == L` the length of the table changed while iterating over it"));
                  }
                  
                  }
                  
                  F.line = 102;
                  F.filename = "iterators_1.nim";
                  res_553665115 = addInt(res_553665115, 1);
                }
            };
          };
        };
        F.line = 2015;
        F.filename = "lisp.nim";
        var Temporary43 = obj_553661957;
        if (ConstSet275[Temporary43.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary43.kind, NTI553648176)); }
        var currentAncestor_553662316 = Temporary43.classObjType;
        Label44: {
          F.line = 2016;
            Label45: while (true) {
            if (!!(HEX3DHEX3D__lisp_u1499(currentAncestor_553662316, null))) break Label45;
              Label46: {
                F.line = 2033;
                var methodName_553662321 = [];
                F.line = 733;
                F.filename = "tables.nim";
                var colontmp__553665119 = ({data: [], counter: 0});
                F.line = 2033;
                F.filename = "lisp.nim";
                var Temporary47 = currentAncestor_553662316;
                if (ConstSet276[Temporary47.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary47.kind, NTI553648176)); }
                colontmp__553665119 = nimCopy(colontmp__553665119, Temporary47.classMethods, NTI553648199);
                F.line = 748;
                F.filename = "tables.nim";
                var L_553665120 = len__lisp_u498(colontmp__553665119);
                Label48: {
                  F.line = 749;
                  var h_553665122 = 0;
                  F.line = 81;
                  F.filename = "iterators_1.nim";
                  var colontmp__553665123 = 0;
                  F.line = 749;
                  F.filename = "tables.nim";
                  colontmp__553665123 = (colontmp__553665119.data).length - 1;
                  F.line = 96;
                  F.filename = "iterators_1.nim";
                  var res_553665124 = 0;
                  Label49: {
                    F.line = 97;
                      Label50: while (true) {
                      if (!(res_553665124 <= colontmp__553665123)) break Label50;
                        F.line = 749;
                        F.filename = "tables.nim";
                        h_553665122 = res_553665124;
                        if (isFilled__pureZcollectionsZtables_u31(colontmp__553665119.data[chckIndx(h_553665122, 0, (colontmp__553665119.data).length - 1)].Field0)) {
                        F.line = 2033;
                        F.filename = "lisp.nim";
                        methodName_553662321 = colontmp__553665119.data[chckIndx(h_553665122, 0, (colontmp__553665119.data).length - 1)]["Field1"];
                          var Temporary51 = obj_553661957;
                          if (ConstSet277[Temporary51.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary51.kind, NTI553648176)); }
                        if (!(contains__lisp_u8776(Temporary51.classObjMethods, methodName_553662321))) {
                        F.line = 2035;
                        var Temporary52 = currentAncestor_553662316;
                        if (ConstSet326[Temporary52.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary52.kind, NTI553648176)); }
                        var meth_553662419 = copyTree__lisp_u2692((Temporary53 = HEX5BHEX5D__lisp_u5332(Temporary52.classMethods, methodName_553662321), Temporary53)[0][Temporary53[1]]);
                        var Temporary54 = meth_553662419;
                        if (ConstSet327[Temporary54.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary54.kind, NTI553648176)); }
                        F.line = 2036;
                        Temporary54.funcObj = obj_553661957;
                        F.line = 2037;
                        var Temporary55 = obj_553661957;
                        if (ConstSet328[Temporary55.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classObjMethods\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary55.kind, NTI553648176)); }
                        HEX5BHEX5DHEX3D__lisp_u2797(Temporary55.classObjMethods, methodName_553662321, meth_553662419);
                        }
                        
                        if (!((len__lisp_u498(colontmp__553665119) == L_553665120))) {
                        F.line = 752;
                        F.filename = "tables.nim";
                        failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(752, 13) `len(t) == L` the length of the table changed while iterating over it"));
                        }
                        
                        }
                        
                        F.line = 102;
                        F.filename = "iterators_1.nim";
                        res_553665124 = addInt(res_553665124, 1);
                      }
                  };
                };
              };
              F.line = 2039;
              F.filename = "lisp.nim";
              var Temporary56 = currentAncestor_553662316;
              if (ConstSet329[Temporary56.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'classParent\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary56.kind, NTI553648176)); }
              currentAncestor_553662316 = Temporary56.classParent;
            }
        };
        F.line = 2041;
        result_553661526 = obj_553661957;
        break;
      case 6:
        if (!(((args_553661946).length == 1))) {
        F.line = 282;
        var inst_553662466 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2044, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662466.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,79,98,106,101,99,116,32,116,121,112,101,32,118,97,114,105,97,98,108,101,32,100,101,99,108,97,114,97,116,105,111,110,32,114,101,113,117,105,114,101,115,32,101,120,97,99,116,108,121,32,49,32,97,114,103,117,109,101,110,116]));
        }
        
        F.line = 2045;
        var fields_553662467 = args_553661946[chckIndx(0, 0, (args_553661946).length - 1)];
        if (!((fields_553662467.kind == 1))) {
        F.line = 282;
        var inst_553662473 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2046, Field2: 12};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662473.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(fields_553662467.line),[41,58,32,79,98,106,101,99,116,32,102,105,101,108,100,115,32,109,117,115,116,32,98,101,32,97,32,108,105,115,116]));
        }
        
        F.line = 2048;
        result_553661526 = {kind: 8, objectType: f_553661923, objectFields: ({data: [], counter: 0}), line: 0, tags: {}, enumType: null, member: [], className: [], classParent: null, classFields: ({data: [], counter: 0}), classMethods: ({data: [], counter: 0}), classObjType: null, classObjFields: ({data: [], counter: 0}), classObjMethods: ({data: [], counter: 0}), dot: [], keyword: 0, atomicKind: 0, num: 0.0, str: [], boolean: false, sym: [], atomicType: 0, kids: [], listType: null, tableVal: ({data: [], counter: 0}), tableType: null, funcParams: [], funcTypes: [], funcBody: null, funcReturnType: null, funcObj: null, templateParams: [], templateBody: null, objectTypeFields: ({data: [], counter: 0}), enumTypeValues: [], tableKeyType: null, tableValueType: null, arrayValueType: null};
        Label57: {
          F.line = 2050;
          var a_553662477 = null;
          F.line = 247;
          F.filename = "iterators.nim";
          var colontmp__553665127 = [];
          F.line = 2050;
          F.filename = "lisp.nim";
          var Temporary58 = fields_553662467;
          if (ConstSet330[Temporary58.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary58.kind, NTI553648176)); }
          colontmp__553665127 = Temporary58.kids;
          F.line = 249;
          F.filename = "iterators.nim";
          var i_553665128 = 0;
          F.line = 250;
          var L_553665129 = (colontmp__553665127).length;
          Label59: {
            F.line = 251;
              Label60: while (true) {
              if (!(i_553665128 < L_553665129)) break Label60;
                F.line = 2050;
                F.filename = "lisp.nim";
                a_553662477 = colontmp__553665127[chckIndx(i_553665128, 0, (colontmp__553665127).length - 1)];
                if (!((a_553662477.kind == 1))) {
                F.line = 282;
                var inst_553662483 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2051, Field2: 9};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662483.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553662477.line),[41,58,32,69,120,112,101,99,116,101,100,32,112,97,105,114,115,32,111,102,32,107,101,121,115,32,97,110,100,32,118,97,108,117,101,115]));
                }
                
                  var Temporary61 = a_553662477;
                  if (ConstSet331[Temporary61.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary61.kind, NTI553648176)); }
                if (!(((Temporary61.kids).length == 2))) {
                F.line = 282;
                var inst_553662488 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2052, Field2: 9};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662488.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(a_553662477.line),[41,58,32,69,120,112,101,99,116,101,100,32,112,97,105,114,115,32,111,102,32,107,101,121,115,32,97,110,100,32,118,97,108,117,101,115]));
                }
                
                F.line = 2054;
                var Temporary62 = a_553662477;
                if (ConstSet332[Temporary62.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary62.kind, NTI553648176)); }
                var key_553662489 = (Temporary63 = Temporary62.kids, Temporary63)[chckIndx(0, 0, (Temporary63).length - 1)];
                if (!((key_553662489.kind == 0))) {
                F.line = 282;
                var inst_553662498 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2055, Field2: 11};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662498.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(key_553662489.line),[41,58,32,79,98,106,101,99,116,32,102,105,101,108,100,32,110,97,109,101,115,32,109,117,115,116,32,98,101,32,115,121,109,98,111,108,115,44,32,103,111,116,58,32],reprEnum(key_553662489.kind, NTI553648176)));
                }
                
                  var Temporary64 = result_553661526;
                  if (ConstSet333[Temporary64.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary64.kind, NTI553648176)); }
                  var Temporary65 = key_553662489;
                  if (ConstSet334[Temporary65.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary65.kind, NTI553648176)); }
                if (!(!(contains__lisp_u8776(Temporary64.objectFields, Temporary65.sym)))) {
                F.line = 282;
                var inst_553662543 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2056, Field2: 11};
                F.line = 283;
                var Temporary66 = key_553662489;
                if (ConstSet335[Temporary66.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary66.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662543.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(key_553662489.line),[41,58,32,70,105,101,108,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32],Temporary66.sym));
                }
                
                F.line = 2058;
                var Temporary67 = f_553661923;
                if (ConstSet336[Temporary67.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary67.kind, NTI553648176)); }
                var Temporary68 = key_553662489;
                if (ConstSet337[Temporary68.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary68.kind, NTI553648176)); }
                var fieldTyp0_553662611 = getOrDefault__lisp_u2366(Temporary67.objectTypeFields, Temporary68.sym);
                if (!(!((fieldTyp0_553662611 == null)))) {
                F.line = 282;
                var inst_553662616 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2059, Field2: 11};
                F.line = 283;
                var Temporary69 = key_553662489;
                if (ConstSet338[Temporary69.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary69.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662616.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(key_553662489.line),[41,58,32,70,105,101,108,100,32,110,111,116,32,102,111,117,110,100,32,105,110,32,111,98,106,101,99,116,32,116,121,112,101,58,32],Temporary69.sym));
                }
                
                F.line = 2061;
                var fieldTyp_553662617 = evaluate__lisp_u9364(s_p0, fieldTyp0_553662611);
                if (!((ConstSet339[fieldTyp_553662617.kind] != undefined))) {
                F.line = 282;
                var inst_553662626 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2062, Field2: 11};
                F.line = 283;
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662626.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(key_553662489.line),[41,58,32],([73,110,118,97,108,105,100,32,102,105,101,108,100,32,116,121,112,101,58,32]).concat(reprEnum(fieldTyp_553662617.kind, NTI553648176))));
                }
                
                F.line = 2066;
                var Temporary70 = a_553662477;
                if (ConstSet346[Temporary70.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary70.kind, NTI553648176)); }
                var value_553662627 = convertValueToType__lisp_u8486(evaluate__lisp_u9364(s_p0, (Temporary71 = Temporary70.kids, Temporary71)[chckIndx(1, 0, (Temporary71).length - 1)]), fieldTyp_553662617);
                if (!(!(HEX3DHEX3D__lisp_u1499(value_553662627, null)))) {
                F.line = 2068;
                var Temporary72 = a_553662477;
                if (ConstSet347[Temporary72.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary72.kind, NTI553648176)); }
                failedAssertImpl__stdZassertions_u84((makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(2068, 9) `\x0Anot (value == nil)` ")).concat(HEX24__lisp_u6182((Temporary73 = Temporary72.kids, Temporary73)[chckIndx(1, 0, (Temporary73).length - 1)])));
                }
                
                if (!(HEX3DHEX3D__lisp_u1499(getType__lisp_u8338(value_553662627), fieldTyp_553662617))) {
                F.line = 282;
                var inst_553662634 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2070, Field2: 13};
                F.line = 283;
                var Temporary74 = key_553662489;
                if (ConstSet348[Temporary74.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary74.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662634.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(value_553662627.line),[41,58,32],([84,121,112,101,32,109,105,115,109,97,116,99,104,32,102,111,114,32,102,105,101,108,100,32,96]).concat(Temporary74.sym,[96,46,32,69,120,112,101,99,116,101,100,32],HEX24__lisp_u6182(fieldTyp_553662617),[44,32,103,111,116,32],HEX24__lisp_u6182(getType__lisp_u8338(value_553662627)))));
                }
                
                F.line = 2073;
                var Temporary75 = result_553661526;
                if (ConstSet349[Temporary75.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary75.kind, NTI553648176)); }
                var Temporary76 = key_553662489;
                if (ConstSet350[Temporary76.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'sym\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary76.kind, NTI553648176)); }
                HEX5BHEX5DHEX3D__lisp_u2797(Temporary75.objectFields, Temporary76.sym, value_553662627);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665128 += 1;
                if (!(((colontmp__553665127).length == L_553665129))) {
                F.line = 254;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
        Label77: {
          F.line = 2075;
          F.filename = "lisp.nim";
          var field_553662681 = [];
          F.line = 733;
          F.filename = "tables.nim";
          var colontmp__553665132 = ({data: [], counter: 0});
          F.line = 2075;
          F.filename = "lisp.nim";
          var Temporary78 = f_553661923;
          if (ConstSet351[Temporary78.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectTypeFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary78.kind, NTI553648176)); }
          colontmp__553665132 = nimCopy(colontmp__553665132, Temporary78.objectTypeFields, NTI553648199);
          F.line = 748;
          F.filename = "tables.nim";
          var L_553665133 = len__lisp_u498(colontmp__553665132);
          Label79: {
            F.line = 749;
            var h_553665135 = 0;
            F.line = 81;
            F.filename = "iterators_1.nim";
            var colontmp__553665136 = 0;
            F.line = 749;
            F.filename = "tables.nim";
            colontmp__553665136 = (colontmp__553665132.data).length - 1;
            F.line = 96;
            F.filename = "iterators_1.nim";
            var res_553665137 = 0;
            Label80: {
              F.line = 97;
                Label81: while (true) {
                if (!(res_553665137 <= colontmp__553665136)) break Label81;
                  F.line = 749;
                  F.filename = "tables.nim";
                  h_553665135 = res_553665137;
                  if (isFilled__pureZcollectionsZtables_u31(colontmp__553665132.data[chckIndx(h_553665135, 0, (colontmp__553665132.data).length - 1)].Field0)) {
                  F.line = 2075;
                  F.filename = "lisp.nim";
                  field_553662681 = colontmp__553665132.data[chckIndx(h_553665135, 0, (colontmp__553665132.data).length - 1)]["Field1"];
                    var Temporary82 = result_553661526;
                    if (ConstSet352[Temporary82.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'objectFields\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary82.kind, NTI553648176)); }
                  if (!(contains__lisp_u8776(Temporary82.objectFields, field_553662681))) {
                  F.line = 282;
                  var inst_553662726 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2076, Field2: 9};
                  F.line = 283;
                  raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662726.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,70,105,101,108,100,32,109,105,115,115,105,110,103,58,32],field_553662681));
                  }
                  
                  if (!((len__lisp_u498(colontmp__553665132) == L_553665133))) {
                  F.line = 752;
                  F.filename = "tables.nim";
                  failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/pure/collections/tables.nim(752, 13) `len(t) == L` the length of the table changed while iterating over it"));
                  }
                  
                  }
                  
                  F.line = 102;
                  F.filename = "iterators_1.nim";
                  res_553665137 = addInt(res_553665137, 1);
                }
            };
          };
        };
        break;
      case 4:
        F.line = 2079;
        F.filename = "lisp.nim";
        var Temporary83 = n_p1;
        if (ConstSet353[Temporary83.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary83.kind, NTI553648176)); }
        var key_553662727 = evaluate__lisp_u9364(s_p0, (Temporary84 = Temporary83.kids, Temporary84)[chckIndx(1, 0, (Temporary84).length - 1)]);
        F.line = 2080;
        var Temporary85 = f_553661923;
        if (ConstSet354[Temporary85.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'tableVal\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary85.kind, NTI553648176)); }
        result_553661526 = getOrDefault__lisp_u1925(Temporary85.tableVal, key_553662727);
        if (!(!(HEX3DHEX3D__lisp_u1499(result_553661526, null)))) {
        F.line = 282;
        var inst_553662796 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2081, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662796.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,75,101,121,32,110,111,116,32,102,111,117,110,100,58,32],HEX24__lisp_u6182(key_553662727)));
        }
        
        break;
      case 3:
        F.line = 2084;
        result_553661526 = evaluateKeywordCall__lisp_u9367(s_p0, n_p1);
        break;
      case 11:
          var Temporary86 = f_553661923;
          if (ConstSet520[Temporary86.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary86.kind, NTI553648176)); }
        if (!(((args_553661946).length == (Temporary86.templateParams).length))) {
        F.line = 282;
        var inst_553662804 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2087, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553662804.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32],([87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,102,111,114,32,116,101,109,112,108,97,116,101,58,32]).concat(HEX24__lisp_u6182(n_p1))));
        }
        
        F.line = 2090;
        F.line = 2092;
        var collectResult_553662805 = [initTable__lisp_u2737(32)];
        Label87: {
          F.line = 2091;
          var i_553662876 = 0;
          F.line = 2091;
          var param_553662877 = [];
          F.line = 180;
          F.filename = "iterators.nim";
          var colontmp__553665140 = [];
          F.line = 2091;
          F.filename = "lisp.nim";
          var Temporary88 = f_553661923;
          if (ConstSet521[Temporary88.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary88.kind, NTI553648176)); }
          colontmp__553665140 = Temporary88.templateParams;
          F.line = 182;
          F.filename = "iterators.nim";
          var i_553665142 = 0;
          F.line = 183;
          var L_553665143 = (colontmp__553665140).length;
          Label89: {
            F.line = 184;
              Label90: while (true) {
              if (!(i_553665142 < L_553665143)) break Label90;
                F.line = 2091;
                F.filename = "lisp.nim";
                i_553662876 = i_553665142;
                F.line = 2091;
                param_553662877 = colontmp__553665140[chckIndx(i_553665142, 0, (colontmp__553665140).length - 1)];
                F.line = 326;
                F.filename = "sugar.nim";
                HEX5BHEX5DHEX3D__lisp_u2797(collectResult_553662805[0], param_553662877, args_553661946[chckIndx(i_553662876, 0, (args_553661946).length - 1)]);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665142 += 1;
                if (!(((colontmp__553665140).length == L_553665143))) {
                F.line = 187;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(187, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
        var templateArgs_553662920 = nimCopy(null, collectResult_553662805[0], NTI553648199);
        F.line = 2143;
        F.filename = "lisp.nim";
        var Temporary91 = f_553661923;
        if (ConstSet522[Temporary91.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'templateBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary91.kind, NTI553648176)); }
        var templateBody_553663353 = [copyTree__lisp_u2692(Temporary91.templateBody)];
        F.line = 2145;
        update__lisp_u14793(s_p0, templateBody_553663353, 0, templateArgs_553662920, null, (-1));
        F.line = 2147;
        result_553661526 = evaluate__lisp_u9364(s_p0, templateBody_553663353[0]);
        break;
      case 2:
          var Temporary92 = f_553661923;
          if (ConstSet535[Temporary92.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary92.kind, NTI553648176)); }
        if (!(!(HEX3DHEX3D__lisp_u1499(Temporary92.funcBody, null)))) {
        F.line = 282;
        var inst_553663356 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2150, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663356.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
        }
        
          var Temporary93 = f_553661923;
          if (ConstSet536[Temporary93.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcReturnType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary93.kind, NTI553648176)); }
        if (!(!(HEX3DHEX3D__lisp_u1499(Temporary93.funcReturnType, null)))) {
        F.line = 282;
        var inst_553663359 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2151, Field2: 7};
        F.line = 283;
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663359.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100]));
        }
        
        F.line = 522;
        var initialStacksHEX60gensym1069_553663365 = (s_p0.stacks).length;
        F.line = 524;
        var newStackHEX60gensym1069_553663366 = {kind: 1, symbols: ({data: [], counter: 0}), currentClassObj: null};
        F.line = 525;
        s_p0.stacks.push(newStackHEX60gensym1069_553663366);;
        F.line = 527;
        try {
        F.line = 2154;
++excHandler;
        try {
        F.line = 2155;
        var Temporary97 = f_553661923;
        if (ConstSet537[Temporary97.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcObj\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary97.kind, NTI553648176)); }
        (Temporary96 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary96)[0][Temporary96[1]].currentClassObj = Temporary97.funcObj;
          var Temporary98 = f_553661923;
          if (ConstSet538[Temporary98.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary98.kind, NTI553648176)); }
        if (!(((args_553661946).length == (Temporary98.funcParams).length))) {
        F.line = 282;
        var inst_553663388 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2157, Field2: 11};
        F.line = 283;
        var Temporary99 = f_553661923;
        if (ConstSet539[Temporary99.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary99.kind, NTI553648176)); }
        raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663388.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,46,32,71,111,116,32],HEX24__systemZdollars_u8((args_553661946).length),[44,32,101,120,112,101,99,116,101,100,32],HEX24__systemZdollars_u8((Temporary99.funcParams).length)));
        }
        
        Label100: {
          F.line = 2161;
          var i_553663394 = 0;
          F.line = 2161;
          var param_553663395 = [];
          F.line = 180;
          F.filename = "iterators.nim";
          var colontmp__553665146 = [];
          F.line = 2161;
          F.filename = "lisp.nim";
          var Temporary101 = f_553661923;
          if (ConstSet540[Temporary101.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcParams\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary101.kind, NTI553648176)); }
          colontmp__553665146 = Temporary101.funcParams;
          F.line = 182;
          F.filename = "iterators.nim";
          var i_553665147 = 0;
          F.line = 183;
          var L_553665148 = (colontmp__553665146).length;
          Label102: {
            F.line = 184;
              Label103: while (true) {
              if (!(i_553665147 < L_553665148)) break Label103;
                F.line = 2161;
                F.filename = "lisp.nim";
                i_553663394 = i_553665147;
                F.line = 2161;
                param_553663395 = colontmp__553665146[chckIndx(i_553665147, 0, (colontmp__553665146).length - 1)];
                F.line = 2162;
                var Temporary104 = n_p1;
                if (ConstSet541[Temporary104.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kids\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary104.kind, NTI553648176)); }
                var val_553663396 = evaluate__lisp_u9364(s_p0, (Temporary105 = Temporary104.kids, Temporary105)[chckIndx(addInt(i_553663394, 1), 0, (Temporary105).length - 1)]);
                F.line = 2163;
                var Temporary106 = f_553661923;
                if (ConstSet542[Temporary106.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcTypes\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary106.kind, NTI553648176)); }
                var typ_553663397 = (Temporary107 = Temporary106.funcTypes, Temporary107)[chckIndx(i_553663394, 0, (Temporary107).length - 1)];
                if (!((typ_553663397 == null))) {
                if (!((typ_553663397.kind == 14))) {
                if (!(HEX3DHEX3D__lisp_u1499(getType__lisp_u8338(val_553663396), typ_553663397))) {
                F.line = 282;
                var inst_553663406 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2168, Field2: 17};
                F.line = 283;
                var Temporary108 = f_553661923;
                if (ConstSet543[Temporary108.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcTypes\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary108.kind, NTI553648176)); }
                raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663406.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,84,121,112,101,32,109,105,115,109,97,116,99,104,32,102,111,114,32,112,97,114,97,109,101,116,101,114,32],param_553663395,[46,32,69,120,112,101,99,116,101,100,32],HEX24__lisp_u6182((Temporary109 = Temporary108.funcTypes, Temporary109)[chckIndx(i_553663394, 0, (Temporary109).length - 1)]),[44,32,103,111,116,32],HEX24__lisp_u6182(getType__lisp_u8338(val_553663396))));
                }
                
                }
                
                }
                
                F.line = 2172;
                HEX5BHEX5DHEX3D__lisp_u2797((Temporary110 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary110)[0][Temporary110[1]].symbols, param_553663395, val_553663396);
                F.line = 13;
                F.filename = "iterators.nim";
                i_553665147 += 1;
                if (!(((colontmp__553665146).length == L_553665148))) {
                F.line = 187;
                failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(187, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          };
        };
        F.line = 2174;
        F.filename = "lisp.nim";
        var Temporary111 = f_553661923;
        if (ConstSet544[Temporary111.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcBody\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary111.kind, NTI553648176)); }
        result_553661526 = evaluate__lisp_u9364(s_p0, copyTree__lisp_u2692(Temporary111.funcBody));
        if (!(!(HEX3DHEX3D__lisp_u1499(result_553661526, null)))) {
        F.line = 2177;
        failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(2177, 11) `\x0Anot (result == nil)` "));
        }
        
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
        framePtr = F;
        if (lastJSError && (isObj(lastJSError.m_type, NTI553648183))) {
        F.line = 2180;
        var r_553663458 = getCurrentException();
        if (!(!(HEX3DHEX3D__lisp_u1499(r_553663458.value, null)))) {
        F.line = 2180;
        failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(2180, 11) `\x0Anot (r.value == nil)` "));
        }
        
        F.line = 2181;
        result_553661526 = r_553663458.value;
        }
        else {
        	reraiseException();
        }
        lastJSError = prevJSError;
        } finally {
        framePtr = F;
        }
        if (!(!(HEX3DHEX3D__lisp_u1499(result_553661526, null)))) {
        F.line = 2183;
        failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(2183, 9) `\x0Anot (result == nil)` "));
        }
        
        F.line = 2184;
        var Temporary112 = f_553661923;
        if (ConstSet545[Temporary112.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'funcReturnType\' is not accessible for type \'Node\' using \'kind = "), reprDiscriminant(Temporary112.kind, NTI553648176)); }
        result_553661526 = convertValueToType__lisp_u8486(result_553661526, Temporary112.funcReturnType);
        if (!(!(HEX3DHEX3D__lisp_u1499(result_553661526, null)))) {
        F.line = 2185;
        failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(2185, 9) `\x0Anot (result == nil)` "));
        }
        
        } finally {
        framePtr = F;
        if (!(((Temporary113 = HEX5BHEX5D__lisp_u10516(s_p0.stacks, 1), Temporary113)[0][Temporary113[1]] == newStackHEX60gensym1069_553663366))) {
        F.line = 530;
        failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(530, 5) `s.stacks[BackwardsIndex(1)] == newStack`gensym1069` "));
        }
        
        F.line = 531;
        delete__lisp_u10553(s_p0, "stacks", chckRange((s_p0.stacks).length - 1, 0, 2147483647));
        }
        if (!(((s_p0.stacks).length == initialStacksHEX60gensym1069_553663365))) {
        F.line = 2153;
        failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/Documents/portfolio/lisp/src/lisp.nim(2153, 7) `len(s.stacks) == initialStacks`gensym1069` Stack imbalance"));
        }
        
        break;
      }
      break;
    case 0:
      F.line = 2188;
      result_553661526 = evalSymbol__lisp_u5228(s_p0, n_p1);
      break;
    }
    if (!(!(HEX3DHEX3D__lisp_u1499(result_553661526, null)))) {
    F.line = 282;
    var inst_553663503 = {Field0: [108,105,115,112,46,110,105,109], Field1: 2190, Field2: 3};
    F.line = 283;
    raiseAssert__stdZassertions_u42(([10,10,69,114,114,111,114,32,105,110,32,108,105,115,112,32,115,99,114,105,112,116,44,32,108,105,110,101,32]).concat(HEX24__systemZdollars_u8(inst_553663503.Field1),[32,40,115,99,114,105,112,116,32,108,105,110,101,32],HEX24__systemZdollars_u8(n_p1.line),[41,58,32,65,65,65,65,65,65,65,65,65,65,65,65]));
    }
    
  framePtr = F.prev;

  return result_553661526;

}

function newState__lisp_u15392() {
  var result_553663521 = null;

  var F = {procname: "lisp.newState", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2193;
    F.filename = "lisp.nim";
    result_553663521 = {stacks: [{kind: 0, symbols: ({data: [], counter: 0}), currentClassObj: null}]};
  framePtr = F.prev;

  return result_553663521;

}

function getStackTrace__system_u2221(e_p0) {
  var result_33556655 = [];

    result_33556655 = nimCopy(null, e_p0.trace, NTI33554449);

  return result_33556655;

}

function runScript__lisp_u15857(name_p0, code_p1, modified_p2) {
  var F = {procname: "lisp.runScript", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2237;
    F.filename = "lisp.nim";
    clearTerminal__lisp_u12();
    F.line = 2238;
++excHandler;
    try {
    if (modified_p2) {
    F.line = 2240;
    print__lisp_u13((styled__lisp_u15853(([82,117,110,110,110,105,110,103,58,32]).concat(name_p0), [49,59,51,51])).concat(styled__lisp_u15853([32,40,109,111,100,105,102,105,101,100,41], [49,59,51,49])));
    }
    else {
      F.line = 2242;
    print__lisp_u13(styled__lisp_u15853(([82,117,110,110,110,105,110,103,58,32]).concat(name_p0), [49,59,51,51]));
    }
    
    F.line = 2243;
    Label2: {
      F.line = 2243;
      var HEX3Atmp_553664121 = tokenize__lisp_u5532(code_p1);
      F.line = 812;
      F.filename = "sequtils.nim";
      var iHEX60gensym1108_553664124 = 0;
      F.line = 813;
      var resultHEX60gensym1108_553664153 = newSeq__lisp_u16016(chckRange((HEX3Atmp_553664121).length, 0, 2147483647));
      Label3: {
        F.line = 814;
        var itHEX60gensym1108_553664157 = null;
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553665038 = 0;
        F.line = 250;
        var L_553665039 = (HEX3Atmp_553664121).length;
        Label4: {
          F.line = 251;
            Label5: while (true) {
            if (!(i_553665038 < L_553665039)) break Label5;
              F.line = 814;
              F.filename = "sequtils.nim";
              itHEX60gensym1108_553664157 = HEX3Atmp_553664121[chckIndx(i_553665038, 0, (HEX3Atmp_553664121).length - 1)];
              F.line = 815;
              resultHEX60gensym1108_553664153[chckIndx(iHEX60gensym1108_553664124, 0, (resultHEX60gensym1108_553664153).length - 1)] = itHEX60gensym1108_553664157;
              F.line = 816;
              iHEX60gensym1108_553664124 = addInt(iHEX60gensym1108_553664124, 1);
              F.line = 13;
              F.filename = "iterators.nim";
              i_553665038 += 1;
              if (!(((HEX3Atmp_553664121).length == L_553665039))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
    var ast_553664162 = buildAst__lisp_u8946(resultHEX60gensym1108_553664153);
    F.line = 2244;
    F.filename = "lisp.nim";
    (evaluate__lisp_u9364(newState__lisp_u15392(), ast_553664162));
    F.line = 2245;
    print__lisp_u13(styled__lisp_u15853([83,99,114,105,112,116,32,102,105,110,105,115,104,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,46], [49,59,51,50]));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    framePtr = F;
    if (lastJSError && (isObj(lastJSError.m_type, NTI33555171))) {
    F.line = 2248;
    var e_553664163 = getCurrentException();
    F.line = 2248;
    print__lisp_u13(styled__lisp_u15853([69,120,99,101,112,116,105,111,110], [49,59,51,49,59,49]));
    F.line = 2249;
    print__lisp_u13(styled__lisp_u15853(e_553664163.message, [49,59,51,49]));
    F.line = 2250;
    print__lisp_u13(styled__lisp_u15853([83,116,97,99,107,32,116,114,97,99,101], [49,59,51,49,59,49]));
    F.line = 2251;
    print__lisp_u13(getStackTrace__system_u2221(e_553664163));
    F.line = 2252;
    reraiseException();
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = F;
    }
  framePtr = F.prev;

  
}

function text__pkgZkaraxZvdom_u989(s_p0) {
  var result_1459618783 = null;

  var F = {procname: "vdom.text", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/vdom.nim", line: 0};
  framePtr = F;
    F.line = 324;
    F.filename = "vdom.nim";
    result_1459618783 = {kind: 0, text: s_p0, index: (-1), m_type: NTI1459617886, id: null, class: null, kids: [], attrs: [], events: [], style: null, styleVersion: 0, dom: null};
  framePtr = F.prev;

  return result_1459618783;

}

function renderer__lisp_u16195() {
    var Temporary4;

function HEX3Aanonymous__lisp_u16246(ev_p0, n_p1) {
  var F = {procname: "renderer.:anonymous", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2329;
    F.filename = "lisp.nim";
    currentScriptName_553664319[0] = nimCopy(null, cstrToNimstr(value__pkgZkaraxZvdom_u450(n_p1)), NTI33554449);
    F.line = 2330;
    F.line = 17;
    F.filename = "dawid.nim";
    var resultHEX60gensym1120_553664382 = ({kind: 0, name: [], code: []});
    Label1: {
      Label2: {
        F.line = 19;
        var it_553664387 = ({kind: 0, name: [], code: []});
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553664942 = 0;
        F.line = 250;
        var L_553664943 = 6;
        Label3: {
          F.line = 251;
            Label4: while (true) {
            if (!(i_553664942 < L_553664943)) break Label4;
              F.line = 19;
              F.filename = "dawid.nim";
              it_553664387 = scripts_553663980[chckIndx(i_553664942, 0, (scripts_553663980).length - 1)];
              if (eqStrings(it_553664387.name, currentScriptName_553664319[0])) {
              F.line = 21;
              resultHEX60gensym1120_553664382 = nimCopy(resultHEX60gensym1120_553664382, it_553664387, NTI553658980);
              F.line = 22;
              break Label1;
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553664942 += 1;
              if (!((6 == L_553664943))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 23;
      F.filename = "dawid.nim";
      raiseAssert__stdZassertions_u42([102,105,110,100,73,116,58,32,110,111,116,32,102,111,117,110,100]);
    };
    var script_553664388 = nimCopy(null, resultHEX60gensym1120_553664382, NTI553658980);
    F.line = 2332;
    F.filename = "lisp.nim";
    var code_553664389 = toJSStr(script_553664388.code);
    F.line = 2333;
                        editor.setValue(code_553664389);
                    editor.clearSelection();
                  
    F.line = 2341;
    currentScriptModified_553664320[0] = false;
  framePtr = F.prev;

  
}
    var Temporary5;

function HEX3Aanonymous__lisp_u16262() {
  var F = {procname: "renderer.:anonymous", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2347;
    F.filename = "lisp.nim";
    var code_553664391 = null;
    F.line = 2348;
    code_553664391 = editor.getValue();
    F.line = 2350;
    rawEcho([99,111,100,101], [32,61,32], cstrToNimstr(code_553664391));
    F.line = 2351;
    runScript__lisp_u15857(currentScriptName_553664319[0], cstrToNimstr(code_553664391), currentScriptModified_553664320[0]);
  framePtr = F.prev;

  
}
    var Temporary10;

function HEX3Aanonymous__lisp_u16278(ev_p0, n_p1) {
  var F = {procname: "renderer.:anonymous", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2357;
    F.filename = "lisp.nim";
    currentScriptModified_553664320[0] = true;
  framePtr = F.prev;

  
}

  var result_553664324 = null;

  var F = {procname: "lisp.renderer", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2317;
    F.filename = "lisp.nim";
    F.line = 2318;
    var tmp_553664351 = tree__pkgZkaraxZvdom_u918(16, []);
    F.line = 2318;
    tmp_553664351.class = "bg-black";
    F.line = 2319;
    var tmp_553664353 = tree__pkgZkaraxZvdom_u918(44, []);
    F.line = 2319;
    tmp_553664353.class = "flex gap-1 h-screen p-3 gap-3";
    F.line = 2320;
    var tmp_553664354 = tree__pkgZkaraxZvdom_u918(44, []);
    F.line = 2320;
    tmp_553664354.class = "flex-1 h-full flex flex-col gap-4";
    F.line = 2321;
    var tmp_553664355 = tree__pkgZkaraxZvdom_u918(44, []);
    F.line = 2321;
    tmp_553664355.class = "flex gap-4";
    F.line = 2323;
    var tmp_553664356 = tree__pkgZkaraxZvdom_u918(196, []);
    F.line = 2323;
    tmp_553664356.id = "scripts-select";
    F.line = 2323;
    tmp_553664356.class = "w-full bg-white/10 text-white p-2 rounded-lg appearance-none";
    Label1: {
      F.line = 2324;
      var s_553664370 = ({kind: 0, name: [], code: []});
      F.line = 249;
      F.filename = "iterators.nim";
      var i_553664946 = 0;
      F.line = 250;
      var L_553664947 = 6;
      Label2: {
        F.line = 251;
          Label3: while (true) {
          if (!(i_553664946 < L_553664947)) break Label3;
            F.line = 2324;
            F.filename = "lisp.nim";
            s_553664370 = scripts_553663980[chckIndx(i_553664946, 0, (scripts_553663980).length - 1)];
            F.line = 2325;
            var tmp_553664357 = tree__pkgZkaraxZvdom_u918(199, []);
            F.line = 2325;
            valueHEX3D__pkgZkaraxZvdom_u453(tmp_553664357, toJSStr(s_553664370.name));
            F.line = 2325;
            setAttr__pkgZkaraxZvdom_u747(tmp_553664357, "value", toJSStr(s_553664370.name));
            F.line = 2325;
            setAttr__pkgZkaraxZvdom_u792(tmp_553664357, "selected", eqStrings(s_553664370.name, currentScriptName_553664319[0]));
            F.line = 2326;
            add__pkgZkaraxZvdom_u832(tmp_553664357, text__pkgZkaraxZvdom_u986((s_553664370.name).concat([32,40],reprEnum(s_553664370.kind, NTI553658979),[41])));
            F.line = 2326;
            add__pkgZkaraxZvdom_u832(tmp_553664356, tmp_553664357);
            F.line = 13;
            F.filename = "iterators.nim";
            i_553664946 += 1;
            if (!((6 == L_553664947))) {
            F.line = 254;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 2328;
    F.filename = "lisp.nim";
    Temporary4 = HEX3Aanonymous__lisp_u16246.bind(null); Temporary4.ClP_0 = HEX3Aanonymous__lisp_u16246; Temporary4.ClE_0 = null;
    addEventHandler__pkgZkaraxZkarax_u1959(tmp_553664356, 8, Temporary4, kxi__);
    F.line = 2318;
    add__pkgZkaraxZvdom_u832(tmp_553664355, tmp_553664356);
    F.line = 2343;
    var tmp_553664362 = tree__pkgZkaraxZvdom_u918(195, []);
    F.line = 2343;
    tmp_553664362.class = "btn bg-blue-500 px-4 rounded-lg py-2";
    F.line = 2344;
    add__pkgZkaraxZvdom_u832(tmp_553664362, text__pkgZkaraxZvdom_u986([82,117,110]));
    F.line = 2345;
    Temporary5 = HEX3Aanonymous__lisp_u16262.bind(null); Temporary5.ClP_0 = HEX3Aanonymous__lisp_u16262; Temporary5.ClE_0 = null;
    addEventHandler__pkgZkaraxZkarax_u1967(tmp_553664362, 0, Temporary5, kxi__);
    F.line = 2318;
    add__pkgZkaraxZvdom_u832(tmp_553664355, tmp_553664362);
    F.line = 2318;
    add__pkgZkaraxZvdom_u832(tmp_553664354, tmp_553664355);
    F.line = 2353;
    var tmp_553664363 = tree__pkgZkaraxZvdom_u918(44, []);
    F.line = 2353;
    tmp_553664363.class = "h-full w-full bg-black resize-none bg-white/10 text-xs rounded-lg";
    F.line = 2353;
    tmp_553664363.id = "input";
    F.line = 2354;
    F.line = 17;
    F.filename = "dawid.nim";
    var resultHEX60gensym1122_553664397 = ({kind: 0, name: [], code: []});
    Label6: {
      Label7: {
        F.line = 19;
        var it_553664402 = ({kind: 0, name: [], code: []});
        F.line = 249;
        F.filename = "iterators.nim";
        var i_553664950 = 0;
        F.line = 250;
        var L_553664951 = 6;
        Label8: {
          F.line = 251;
            Label9: while (true) {
            if (!(i_553664950 < L_553664951)) break Label9;
              F.line = 19;
              F.filename = "dawid.nim";
              it_553664402 = scripts_553663980[chckIndx(i_553664950, 0, (scripts_553663980).length - 1)];
              if (eqStrings(it_553664402.name, [99,111,114,101])) {
              F.line = 21;
              resultHEX60gensym1122_553664397 = nimCopy(resultHEX60gensym1122_553664397, it_553664402, NTI553658980);
              F.line = 22;
              break Label6;
              }
              
              F.line = 13;
              F.filename = "iterators.nim";
              i_553664950 += 1;
              if (!((6 == L_553664951))) {
              F.line = 254;
              failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
      F.line = 23;
      F.filename = "dawid.nim";
      raiseAssert__stdZassertions_u42([102,105,110,100,73,116,58,32,110,111,116,32,102,111,117,110,100]);
    };
    add__pkgZkaraxZvdom_u832(tmp_553664363, text__pkgZkaraxZvdom_u989(toJSStr(resultHEX60gensym1122_553664397.code)));
    F.line = 2356;
    F.filename = "lisp.nim";
    Temporary10 = HEX3Aanonymous__lisp_u16278.bind(null); Temporary10.ClP_0 = HEX3Aanonymous__lisp_u16278; Temporary10.ClE_0 = null;
    addEventHandler__pkgZkaraxZkarax_u1959(tmp_553664363, 8, Temporary10, kxi__);
    F.line = 2318;
    add__pkgZkaraxZvdom_u832(tmp_553664354, tmp_553664363);
    F.line = 2318;
    add__pkgZkaraxZvdom_u832(tmp_553664353, tmp_553664354);
    F.line = 2359;
    var tmp_553664364 = tree__pkgZkaraxZvdom_u918(44, []);
    F.line = 2359;
    tmp_553664364.class = "h-full w-0.5 bg-white/10";
    F.line = 2359;
    add__pkgZkaraxZvdom_u832(tmp_553664353, tmp_553664364);
    F.line = 2360;
    var tmp_553664365 = tree__pkgZkaraxZvdom_u918(44, []);
    F.line = 2360;
    tmp_553664365.class = "flex-1 h-full max-w-1/2";
    F.line = 2361;
    var tmp_553664366 = tree__pkgZkaraxZvdom_u918(44, []);
    F.line = 2361;
    tmp_553664366.id = "terminal";
    F.line = 2361;
    tmp_553664366.class = "h-full";
    F.line = 2361;
    add__pkgZkaraxZvdom_u832(tmp_553664365, tmp_553664366);
    F.line = 2361;
    add__pkgZkaraxZvdom_u832(tmp_553664353, tmp_553664365);
    F.line = 2361;
    add__pkgZkaraxZvdom_u832(tmp_553664351, tmp_553664353);
    result_553664324 = tmp_553664351;
  framePtr = F.prev;

  return result_553664324;

}

function setForeignNodeId__pkgZkaraxZkarax_u1993(id_p0, kxi_p1) {
  var F = {procname: "karax.setForeignNodeId", prev: framePtr, filename: "/Users/dawid/.nimble/pkgs2/karax-1.3.3-6683189b4456437c2809be72e3404adde77f5c34/karax/karax.nim", line: 0};
  framePtr = F;
    F.line = 852;
    F.filename = "karax.nim";
    kxi_p1.orphans[id_p0] = true;
  framePtr = F.prev;

  
}

function runTests__lisp_u16051() {
  var F = {procname: "lisp.runTests", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2256;
    F.filename = "lisp.nim";
    print__lisp_u13(styled__lisp_u15853([82,117,110,110,105,110,103,32,116,101,115,116,115,46,46,46], [49,59,51,52]));
    Label1: {
      F.line = 2258;
      var s_553664183 = ({kind: 0, name: [], code: []});
      F.line = 249;
      F.filename = "iterators.nim";
      var i_553665616 = 0;
      F.line = 250;
      var L_553665617 = 6;
      Label2: {
        F.line = 251;
          Label3: while (true) {
          if (!(i_553665616 < L_553665617)) break Label3;
            F.line = 2258;
            F.filename = "lisp.nim";
            s_553664183 = scripts_553663980[chckIndx(i_553665616, 0, (scripts_553663980).length - 1)];
            F.line = 2260;
            print__lisp_u13(styled__lisp_u15853(([84,101,115,116,105,110,103,58,32]).concat(s_553664183.name), [49,59,51,53]));
            F.line = 2261;
            Label4: {
              F.line = 2261;
              var HEX3Atmp_553664257 = tokenize__lisp_u5532(s_553664183.code);
              F.line = 812;
              F.filename = "sequtils.nim";
              var iHEX60gensym1117_553664260 = 0;
              F.line = 813;
              var resultHEX60gensym1117_553664284 = newSeq__lisp_u16016(chckRange((HEX3Atmp_553664257).length, 0, 2147483647));
              Label5: {
                F.line = 814;
                var itHEX60gensym1117_553664288 = null;
                F.line = 249;
                F.filename = "iterators.nim";
                var i_553665613 = 0;
                F.line = 250;
                var L_553665614 = (HEX3Atmp_553664257).length;
                Label6: {
                  F.line = 251;
                    Label7: while (true) {
                    if (!(i_553665613 < L_553665614)) break Label7;
                      F.line = 814;
                      F.filename = "sequtils.nim";
                      itHEX60gensym1117_553664288 = HEX3Atmp_553664257[chckIndx(i_553665613, 0, (HEX3Atmp_553664257).length - 1)];
                      F.line = 815;
                      resultHEX60gensym1117_553664284[chckIndx(iHEX60gensym1117_553664260, 0, (resultHEX60gensym1117_553664284).length - 1)] = itHEX60gensym1117_553664288;
                      F.line = 816;
                      iHEX60gensym1117_553664260 = addInt(iHEX60gensym1117_553664260, 1);
                      F.line = 13;
                      F.filename = "iterators.nim";
                      i_553665613 += 1;
                      if (!(((HEX3Atmp_553664257).length == L_553665614))) {
                      F.line = 254;
                      failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                };
              };
            };
            var ast_553664293 = buildAst__lisp_u8946(resultHEX60gensym1117_553664284);
            F.line = 2262;
            F.filename = "lisp.nim";
            (evaluate__lisp_u9364(newState__lisp_u15392(), ast_553664293));
            F.line = 13;
            F.filename = "iterators.nim";
            i_553665616 += 1;
            if (!((6 == L_553665617))) {
            F.line = 254;
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("/Users/dawid/.choosenim/toolchains/nim-2.2.2/lib/system/iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 2264;
    F.filename = "lisp.nim";
    print__lisp_u13(styled__lisp_u15853([84,101,115,116,115,32,102,105,110,105,115,104,101,100,46], [49,59,51,50]));
  framePtr = F.prev;

  
}

function main__lisp_u16182() {
  var F = {procname: "lisp.main", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    F.line = 2267;
    F.filename = "lisp.nim";
    print__lisp_u13(styled__lisp_u15853([87,101,108,99,111,109,101,32,116,111,32,68,97,119,105,100,39,115,32,116,111,121,32,108,97,110,103,117,97,103,101,33], [49,59,51,51]));
    F.line = 2268;
    runTests__lisp_u16051();
    F.line = 2270;
          editor = ace.edit("input");
      editor.session.setUseSoftTabs(true);
      editor.session.setUseWrapMode(true);
      editor.setHighlightActiveLine(true);
      editor.setTheme("ace/theme/solarized_dark");
      editor.session.setMode("ace/mode/clojure");
    
  framePtr = F.prev;

  
}

function postRender__lisp_u16194() {
  var F = {procname: "lisp.postRender", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
  framePtr = F;
    if (!(terminalInitialized_553664318[0])) {
    F.line = 2304;
    F.filename = "lisp.nim";
            term.open(document.getElementById("terminal"));
        fitAddon.fit();
        if (editor) {
          editor.resize();
        }
        console.log("!!!")
      
    F.line = 2312;
    setForeignNodeId__pkgZkaraxZkarax_u1993("terminal", kxi__);
    F.line = 2313;
    main__lisp_u16182();
    F.line = 2314;
    terminalInitialized_553664318[0] = true;
    }
    
  framePtr = F.prev;

  
}
var Temporary1;
var Temporary2;
var Temporary3;
var F = {procname: "module lisp", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
framePtr = F;
F.line = 45;
F.filename = "lisp.nim";
    const term = new Terminal({cursorBlink: true, rows: 48, cols: 8, fontSize: 12});
    const fitAddon = new FitAddon.FitAddon();
    term.loadAddon(fitAddon);

    let editor;

    window.addEventListener("resize", () => {
      fitAddon.fit();
      if (editor) {
        editor.resize();
      }
    });
  
F.line = 2289;
var terminalInitialized_553664318 = [false];
F.line = 2290;
var currentScriptName_553664319 = [[99,111,114,101]];
F.line = 2292;
var currentScriptModified_553664320 = [false];
F.line = 2300;
Temporary1 = resize__lisp_u16193.bind(null); Temporary1.ClP_0 = resize__lisp_u16193; Temporary1.ClE_0 = null;
(setInterval(Temporary1, 100));
Temporary2 = renderer__lisp_u16195.bind(null); Temporary2.ClP_0 = renderer__lisp_u16195; Temporary2.ClE_0 = null;
Temporary3 = postRender__lisp_u16194.bind(null); Temporary3.ClP_0 = postRender__lisp_u16194; Temporary3.ClE_0 = null;
setRenderer__pkgZkaraxZkarax_u1866(Temporary2, "ROOT", Temporary3);
framePtr = F.prev;
var F = {procname: "module lisp", prev: framePtr, filename: "/Users/dawid/Documents/portfolio/lisp/src/lisp.nim", line: 0};
framePtr = F;
framePtr = F.prev;
